from __future__ import annotations

import logging
import os
import tempfile
import inspect
from html import escape
from typing import Optional

from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import Application, MessageHandler, ContextTypes, filters

from ..services.dialog_service import DialogService
from ..services.gen_service import GenService
from ..services.voice_service import VoiceService
from app.core import settings

log = logging.getLogger(__name__)


def _suffix_for_mime(mime: Optional[str]) -> str:
    """
    –ü–æ–¥–±–∏—Ä–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∞—É–¥–∏–æ.
    """
    if not mime:
        return ".ogg"
    mime = mime.lower()
    if "ogg" in mime:
        return ".ogg"
    if "mpeg" in mime or "mp3" in mime:
        return ".mp3"
    if "webm" in mime:
        return ".webm"
    if "mp4" in mime or "m4a" in mime:
        return ".mp4"
    return ".ogg"


async def _transcribe_any(
    vs: VoiceService,
    *,
    tmp_path: str,
    message_obj
) -> Optional[str]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:
    1) –ø—Ä–æ–±—É–µ–º vs.transcribe_path(path) (async/sync),
    2) –∑–∞—Ç–µ–º vs.transcribe(message) (async/sync),
    3) –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –¥–∞—ë–º —à–∞–Ω—Å —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ø–æ—Å–æ–±—É.
    """
    # 1) transcribe_path
    try:
        transcribe_path = getattr(vs, "transcribe_path", None)
        if callable(transcribe_path):
            if inspect.iscoroutinefunction(transcribe_path):
                return await transcribe_path(tmp_path)
            else:
                return transcribe_path(tmp_path)
    except Exception as e:
        log.exception("VOICE: transcribe_path failed: %s", e)

    # 2) transcribe(message)
    try:
        transcribe = getattr(vs, "transcribe", None)
        if callable(transcribe):
            if inspect.iscoroutinefunction(transcribe):
                return await transcribe(message_obj)
            else:
                return transcribe(message_obj)
    except Exception as e:
        log.exception("VOICE: transcribe(message) failed: %s", e)

    return None


async def on_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = update.message
        if not msg:
            return

        voice = msg.voice
        audio = msg.audio

        if not voice and not audio:
            # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ VOICE|AUDIO
            return

        fileish = voice or audio
        mime = getattr(fileish, "mime_type", None)
        duration = getattr(fileish, "duration", None)
        file_id = getattr(fileish, "file_id", None)

        log.info(
            "VOICE: –ø–æ–ª—É—á–µ–Ω %s, duration=%s sec, mime=%s, file_id=%s",
            "voice" if voice else "audio", duration, mime, file_id
        )

        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        fobj = await fileish.get_file()
        tmp_path = None
        try:
            suffix = _suffix_for_mime(mime)
            with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
                await fobj.download_to_drive(custom_path=tmp.name)
                tmp_path = tmp.name
            log.info("VOICE: —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω -> %s", tmp_path)

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            vs: VoiceService = context.bot_data.get("svc_voice")
            if not vs:
                await msg.reply_text("‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")
                return

            try:
                text = await _transcribe_any(vs, tmp_path=tmp_path, message_obj=msg)
            except Exception as e:
                log.exception("VOICE: transcription crashed: %s", e)
                await msg.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return

        finally:
            # –ß–∏—Å—Ç–∏–º tmp (–µ—Å–ª–∏ —É—Å–ø–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å)
            if tmp_path:
                try:
                    os.remove(tmp_path)
                except Exception:
                    pass

        if not text or not str(text).strip():
            await msg.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            log.warning("VOICE: empty transcript")
            return

        text = str(text).strip()
        log.info("VOICE: —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: %r", text)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if getattr(settings, "SHOW_VOICE_TRANSCRIPT", True):
            maxlen = int(getattr(settings, "VOICE_TRANSCRIPT_MAXLEN", 400))
            disp = text if len(text) <= maxlen else (text[:maxlen] + "‚Ä¶")
            try:
                await msg.chat.send_action(ChatAction.TYPING)
            except Exception:
                pass
            await msg.reply_html(f"üó£Ô∏è <b>–†–∞—Å–ø–æ–∑–Ω–∞–ª</b>: <i>{escape(disp)}</i>")

        # –î–∏–∞–ª–æ–≥ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–∫–∞–∫ on_text)
        ds: DialogService = context.bot_data.get("svc_dialog")
        gen: GenService = context.bot_data.get("svc_gen")

        if not ds or not gen:
            await msg.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã –¥–∏–∞–ª–æ–≥–æ–≤/–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            log.error("VOICE: missing services: ds=%s, gen=%s", bool(ds), bool(gen))
            return

        d = ds.get_or_create_active(update.effective_user.id)
        ds.add_user_message(d.id, text)

        reply = ""
        try:
            # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ gen.chat ‚Äî async –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º .text
            ans = await gen.chat(user_msg=text, dialog_id=d.id)
            reply = (ans.text or "").strip() if ans else ""
        except Exception as e:
            log.exception("VOICE: gen.chat failed: %s", e)

        if not reply:
            # –§–æ–ª–ª–±–µ–∫ ‚Äî —Ö–æ—Ç—è –±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            reply = f"–†–∞—Å–ø–æ–∑–Ω–∞–ª: {text}"

        ds.add_assistant_message(d.id, reply)

        try:
            await msg.chat.send_action(ChatAction.TYPING)
        except Exception:
            pass

        await msg.reply_text(reply)

    except Exception as e:
        log.exception("VOICE handler crashed: %s", e)
        try:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e.__class__.__name__}")
        except Exception:
            pass


def register(app: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞. –û—Ö–≤–∞—Ç—ã–≤–∞–µ–º voice –∏ –æ–±—ã—á–Ω—ã–µ –∞—É–¥–∏–æ (mp3/m4a –∏ —Ç.–¥.).
    """
    app.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, on_voice))
