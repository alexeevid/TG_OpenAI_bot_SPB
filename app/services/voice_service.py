import logging
from pathlib import Path
import asyncio

log = logging.getLogger(__name__)

def _is_coro_fn(fn):
    try:
        return asyncio.iscoroutinefunction(fn)
    except Exception:
        return False

class VoiceService:
    """
    –°–æ–≤–º–µ—Å—Ç–∏–º —Å bootstrap: __init__(openai_client, settings).
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∞—É–¥–∏–æ –≤ –±–∞–π—Ç—ã –∏ –ø—Ä–æ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ:
    1) transcribe_bytes(raw_bytes, filename="audio.ogg")
    2) transcribe_file(file_obj)          # file-like (rb)
    3) transcribe_path(str_path)          # —Å—Ç—Ä–æ–∫–æ–≤—ã–π –ø—É—Ç—å
    4) transcribe(str_path)               # —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å
    –õ—é–±–∞—è –æ—à–∏–±–∫–∞ ‚Üí —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """

    def __init__(self, openai_client, settings=None):
        self._openai = openai_client
        self._settings = settings

    async def transcribe_path(self, path: str | Path) -> str:
        p = Path(path)
        try:
            if not p.exists():
                log.error("VOICE: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", p)
                return "[–æ—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω]"

            # üîπ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ bytes
            with open(p, "rb") as f:
                audio_bytes = f.read()

            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–º–µ–µ—Ç transcribe_bytes ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if hasattr(self._openai, "transcribe_bytes"):
                text = self._openai.transcribe_bytes(audio_bytes, filename=p.name)

            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–º–µ–µ—Ç transcribe_file ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º file-like
            elif hasattr(self._openai, "transcribe_file"):
                with open(p, "rb") as f:
                    text = self._openai.transcribe_file(f)

            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –º–µ—Ç–æ–¥ transcribe, –Ω–æ –æ–Ω –æ–∂–∏–¥–∞–µ—Ç bytes
            elif hasattr(self._openai, "transcribe"):
                with open(p, "rb") as f:
                    text = self._openai.transcribe(f)

            else:
                log.error("VOICE: –º–µ—Ç–æ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ OpenAIClient")
                return "[–æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏]"

            text = (text or "").strip()
            if not text:
                text = "[–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è]"

            log.info("VOICE: —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: %s", text)
            return text

        except Exception as e:
            log.exception("VOICE: –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: %s", e)
            return f"[–æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e.__class__.__name__}]"

    async def transcribe(self, message) -> str:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Telegram voice message."""
        try:
            file = await message.voice.get_file()
            local_path = f"/tmp/{file.file_unique_id}.ogg"
            await file.download_to_drive(custom_path=local_path)
            return await self.transcribe_path(local_path)
        except Exception as e:
            log.exception("VOICE: –æ—à–∏–±–∫–∞ –≤ transcribe(): %s", e)
            return f"[–æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e.__class__.__name__}]"
