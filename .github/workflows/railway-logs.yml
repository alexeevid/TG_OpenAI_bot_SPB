name: Railway Logs (manual)
run-name: Railway Logs (manual)

on:
  workflow_dispatch:
    inputs:
      lines:
        description: "–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø–æ–∫–∞–∑–∞—Ç—å (tail)"
        required: false
        default: "400"
      service:
        description: "Service (ID –∏–ª–∏ NAME) ‚Äî –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã"
        required: false
        default: ""
      environment:
        description: "Environment (ID –∏–ª–∏ NAME) ‚Äî –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã"
        required: false
        default: ""
      deployment_id:
        description: "DEPLOYMENT_ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        required: false
        default: ""
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  logs:
    runs-on: ubuntu-latest

    env:
      # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ø—Ä–æ–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Project ‚Üí Settings ‚Üí Tokens
      RAILWAY_TOKEN:         ${{ secrets.RAILWAY_TOKEN }}

      # –ú–û–ñ–ù–û –∑–∞–¥–∞—Ç—å ID –ò–õ–ò NAME (–ª—é–±–æ–µ –∏–∑ –ø–∞—Ä—ã)
      RAILWAY_SERVICE_ID:    ${{ secrets.RAILWAY_SERVICE_ID }}
      RAILWAY_SERVICE_NAME:  ${{ secrets.RAILWAY_SERVICE_NAME }}
      RAILWAY_ENV_ID:        ${{ secrets.RAILWAY_ENV_ID }}
      RAILWAY_ENV_NAME:      ${{ secrets.RAILWAY_ENV_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (–¥–ª—è Railway CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Railway CLI
        run: |
          npm i -g @railway/cli@latest
          railway --version

      - name: Validate token
        run: |
          if [ -z "${RAILWAY_TOKEN:-}" ]; then
            echo "::error::Missing RAILWAY_TOKEN. –°–æ–∑–¥–∞–π –ü–†–û–ï–ö–¢–ù–´–ô —Ç–æ–∫–µ–Ω –∏ –¥–æ–±–∞–≤—å –≤ GitHub Secrets."; exit 1;
          fi
          echo "RAILWAY_TOKEN length = ${#RAILWAY_TOKEN} (–∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ)"

      # whoami –¥–ª—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å Unauthorized ‚Äî —ç—Ç–æ –æ–∫
      - name: whoami (optional)
        continue-on-error: true
        run: railway whoami || echo "‚ÑπÔ∏è whoami: Unauthorized ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"

      - name: Resolve service/environment (ID/NAME + inputs)
        id: resolve
        run: |
          set -euo pipefail
          # Inputs –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
          IN_S="${{ github.event.inputs.service }}"
          IN_E="${{ github.event.inputs.environment }}"
          DEP="${{ github.event.inputs.deployment_id }}"

          # –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ inputs, –∑–∞—Ç–µ–º secrets
          SVC="${IN_S:-}"
          ENV="${IN_E:-}"

          if [ -z "$SVC" ]; then
            if [ -n "${RAILWAY_SERVICE_ID:-}" ]; then SVC="$RAILWAY_SERVICE_ID"; fi
            if [ -z "$SVC" ] && [ -n "${RAILWAY_SERVICE_NAME:-}" ]; then SVC="$RAILWAY_SERVICE_NAME"; fi
          fi

          if [ -z "$ENV" ]; then
            if [ -n "${RAILWAY_ENV_ID:-}" ]; then ENV="$RAILWAY_ENV_ID"; fi
            if [ -z "$ENV" ] && [ -n "${RAILWAY_ENV_NAME:-}" ]; then ENV="$RAILWAY_ENV_NAME"; fi
          fi

          # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: UUID —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–∏—Å—ã ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ ID; –∏–Ω–∞—á–µ ‚Äî NAME
          classify() {
            if echo "$1" | grep -qE '^[0-9a-fA-F-]{8,}$'; then echo "id"; else echo "name"; fi
          }

          if [ -z "$SVC" ] || [ -z "$ENV" ]; then
            echo "::error::–ù—É–∂–Ω—ã service –∏ environment. –ó–∞–¥–∞–π —á–µ—Ä–µ–∑ inputs (service/environment) –∏–ª–∏ secrets (RAILWAY_SERVICE_ID/NAME, RAILWAY_ENV_ID/NAME)."
            exit 1
          fi

          S_KIND=$(classify "$SVC")
          E_KIND=$(classify "$ENV")

          echo "service_kind=$S_KIND" >> "$GITHUB_OUTPUT"
          echo "service_value=$SVC"    >> "$GITHUB_OUTPUT"
          echo "env_kind=$E_KIND"      >> "$GITHUB_OUTPUT"
          echo "env_value=$ENV"        >> "$GITHUB_OUTPUT"
          echo "deployment_id=$DEP"    >> "$GITHUB_OUTPUT"

          echo "üîé Using service ($S_KIND): $SVC"
          echo "üîé Using environment ($E_KIND): $ENV"
          if [ -n "$DEP" ]; then echo "üîé Deployment: $DEP"; fi

      - name: Fetch logs (JSON) with fallbacks
        id: fetch
        run: |
          set -Eeuo pipefail

          LINES="${{ github.event.inputs.lines || '400' }}"
          DEP="${{ steps.resolve.outputs.deployment_id }}"
          S_KIND="${{ steps.resolve.outputs.service_kind }}"
          S_VAL="${{ steps.resolve.outputs.service_value }}"
          E_KIND="${{ steps.resolve.outputs.env_kind }}"
          E_VAL="${{ steps.resolve.outputs.env_value }}"

          svc_flag="--service"
          env_flag="--environment"
          [ "$S_KIND" = "name" ] && svc_flag="--service-name"
          [ "$E_KIND" = "name" ] && env_flag="--environment-name"

          dep_arg=""
          [ -n "$DEP" ] && dep_arg="--deployment $DEP"

          OUT_JSON=$(mktemp)
          ERR_TXT=$(mktemp)

          echo "‚ñ∂ railway logs $svc_flag '$S_VAL' $env_flag '$E_VAL' $dep_arg --json"
          set +e
          railway logs $svc_flag "$S_VAL" $env_flag "$E_VAL" $dep_arg --json > "$OUT_JSON" 2> "$ERR_TXT"
          rc=$?
          set -e

          if [ $rc -ne 0 ]; then
            echo "::group::Diagnostics"
            echo "Exit code: $rc"
            echo "---- STDERR ----"
            cat "$ERR_TXT" || true
            echo "---- STDOUT (head) ----"
            head -n 30 "$OUT_JSON" || true
            echo "::endgroup::"

            if grep -qi "Project Token not found" "$ERR_TXT"; then
              echo "::error::Project Token not found ‚Äî –Ω—É–∂–µ–Ω –ü–†–û–ï–ö–¢–ù–´–ô —Ç–æ–∫–µ–Ω (Project ‚Üí Settings ‚Üí Tokens)."
            elif grep -qi "Unauthorized" "$ERR_TXT"; then
              echo "::error::Unauthorized ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π/–∏—Å—Ç—ë–∫ –∏–ª–∏ –Ω–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã–π."
            elif grep -qi "not found" "$ERR_TXT"; then
              echo "::error::–ü—Ä–æ–≤–µ—Ä—å –∏–º–µ–Ω–∞/ID service/environment. –û–Ω–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—é."
            else
              echo "::error::–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏. –°–º. Diagnostics."
            fi
            exit 1
          fi

          cp "$OUT_JSON" logs.json
          tail -n "$LINES" logs.json | tee tail.txt

          {
            echo "tail<<'EOF'"
            tail -n "$LINES" logs.json
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Summary
        run: |
          echo "### Railway logs (last ${{ github.event.inputs.lines || '400' }} lines)" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo '```json' >> "$GITHUB_STEP_SUMMARY"
          cat tail.txt >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: railway-logs
          path: |
            logs.json
            tail.txt
          retention-days: 7

      - name: Comment logs to PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ github.token }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Railway logs (last ${{ github.event.inputs.lines || '400' }} lines)
            ```json
            ${{ steps.fetch.outputs.tail }}
            ```
