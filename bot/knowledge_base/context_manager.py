# bot/knowledge_base/context_manager.py
from __future__ import annotations

import logging
from typing import Iterable, List

logger = logging.getLogger(__name__)

class ContextManager:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–±–æ—Ä—â–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: —Å–∫–ª–µ–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫—É—Å–∫–∏ –≤ –æ–¥–∏–Ω –±–ª–æ–∫.
    –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –ø–æ—è–≤–∏—Ç—Å—è –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ë–î/—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∑–¥–µ—Å—å.
    """

    def __init__(self, settings=None):
        self.settings = settings

    def build_context(self, chunks: Iterable[str]) -> str:
        parts: List[str] = []
        for i, ch in enumerate(chunks, 1):
            if not ch:
                continue
            parts.append(f"[CHUNK {i}]\n{ch}")
        context = "\n\n".join(parts)
        # --- –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º prompt ---
        logger.debug("üß† Built context from %d chunks:\n%s", len(parts), context)
        return context
