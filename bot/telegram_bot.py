# bot/telegram_bot.py
from __future__ import annotations

import asyncio
import logging
import os
import tempfile
from contextlib import suppress
from datetime import datetime
from typing import List, Optional, Set

from sqlalchemy import text
from sqlalchemy.orm import Session

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.constants import ChatAction, ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from bot.db.session import SessionLocal
from bot.db.models import Document  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —ç—Ç–∞ –º–æ–¥–µ–ª—å
from bot.openai_helper import OpenAIHelper

logger = logging.getLogger(__name__)


# ---------------- Utilities ----------------

def style_system_hint(style: str) -> (str, float):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (system_prompt, temperature) –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é.
    """
    style = (style or "pro").lower()
    if style == "pro":  # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
        return (
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–æ–≥—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, –∏–∑–±–µ–≥–∞–π –≤–æ–¥—ã. "
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —è–≤–Ω–æ —É–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å.",
            0.2,
        )
    if style == "expert":  # –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π
        return (
            "–î–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: –≥–ª—É–±–∏–Ω–∞, —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, —Ç–æ–Ω ‚Äî –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞. "
            "–î–æ–±–∞–≤–ª—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å–ø–∏—Å–∫–∏, —à–∞–≥–∏, caveats.",
            0.35,
        )
    if style == "user":  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        return (
            "–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –¥–ª—è –Ω–µ–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞. "
            "–ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –±—ã—Ç–∞.",
            0.5,
        )
    if style == "ceo":  # –°–ï–û
        return (
            "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –±–∏–∑–Ω–µ—Å–∞ —É—Ä–æ–≤–Ω—è EMBA/DBA: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —Ä–∏—Å–∫–∏, –±—é–¥–∂–µ—Ç, —ç—Ñ—Ñ–µ–∫—Ç, KPI. "
            "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π –∏ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.",
            0.25,
        )
    return ("", 0.3)


def only_allowed(func):
    async def wrapper(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id if update.effective_user else None
        if self.allowed and uid not in self.allowed and uid not in self.admins:
            await update.effective_message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        return await func(self, update, context)

    return wrapper


class TypingIndicator:
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ChatAction.TYPING, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ–ª–≥–∏–π –≤—ã–∑–æ–≤.
    """

    def __init__(self, bot, chat_id, interval: float = 4.0):
        self.bot = bot
        self.chat_id = chat_id
        self.interval = interval
        self._task: Optional[asyncio.Task] = None
        self._stop = asyncio.Event()

    async def __aenter__(self):
        async def _loop():
            try:
                while not self._stop.is_set():
                    await self.bot.send_chat_action(chat_id=self.chat_id, action=ChatAction.TYPING)
                    await asyncio.sleep(self.interval)
            except asyncio.CancelledError:
                pass

        self._task = asyncio.create_task(_loop())
        return self

    async def __aexit__(self, exc_type, exc, tb):
        self._stop.set()
        if self._task:
            with suppress(asyncio.CancelledError):
                self._task.cancel()


# ---------------- Bot ----------------

class ChatGPTTelegramBot:
    def __init__(self, openai: OpenAIHelper, settings):
        self.openai = openai
        # —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ–¥–¥–µ—Ä–∂–∏–º —Å—Ç–∞—Ä—ã–µ/–Ω–æ–≤—ã–µ –ø–æ–ª—è)
        self.allowed: Set[int] = set(
            getattr(settings, "allowed_user_ids", None)
            or getattr(settings, "allowed_set", None)
            or []
        )
        self.admins: Set[int] = set(
            getattr(settings, "admin_user_ids", None)
            or getattr(settings, "admin_set", None)
            or []
        )

        # –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_model: str = getattr(settings, "openai_model", None) or openai.model
        self.image_model: Optional[str] = getattr(settings, "image_model", None) or openai.image_model
        self.enable_image_generation: bool = bool(getattr(settings, "enable_image_generation", True))

        # –ú–æ–¥–µ–ª–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑ ENV (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.allowed_models_whitelist: List[str] = getattr(settings, "allowed_models_whitelist", []) or []
        self.denylist_models: List[str] = getattr(settings, "denylist_models", []) or []

    # ---- Helpers ----

    def _get_db(self) -> Session:
        return SessionLocal()

    def _get_active_conv(self, chat_id: int, db: Session):
        # –í –ø—Ä–æ–µ–∫—Ç–µ —É–∂–µ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ conversations ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É –ª–æ–≥–∏–∫—É, –∑–¥–µ—Å—å ‚Äî –∑–∞–≥–ª—É—à–∫–∞
        return None

    def _ensure_conv_title(self, conv, user_text: str, db: Session):
        # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤; –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
        pass

    # ---- Install ----

    def install(self, app: Application):
        app.add_handler(CommandHandler("start", self.on_start))
        app.add_handler(CommandHandler("help", self.on_help))
        app.add_handler(CommandHandler("reset", self.on_reset))
        app.add_handler(CommandHandler("stats", self.on_stats))
        app.add_handler(CommandHandler("model", self.on_model))
        app.add_handler(CommandHandler("web", self.on_web))
        app.add_handler(CommandHandler("image", self.on_image))

        # –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ pgvector (–∞–¥–º–∏–Ω)
        app.add_handler(CommandHandler("debug_pgvector", self.on_debug_pgvector))

        # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text))
        # –≥–æ–ª–æ—Å–æ–≤—ã–µ
        app.add_handler(MessageHandler(filters.VOICE, self.on_voice))
        # –¥–æ–∫—É–º–µ–Ω—Ç—ã/—Ñ–æ—Ç–æ ‚Äî –∞–Ω–∞–ª–∏–∑, –±–µ–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–ó
        app.add_handler(MessageHandler(filters.Document.ALL, self.on_document))
        app.add_handler(MessageHandler(filters.PHOTO, self.on_photo))

        # –∫–æ–ª–±—ç–∫–∏ –º–µ–Ω—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏)
        app.add_handler(CallbackQueryHandler(self.on_callback))

    # ---- Commands ----

    @only_allowed
    async def on_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
            "–ö–æ–º–∞–Ω–¥—ã: /help, /reset, /stats, /model, /image, /web"
        )

    @only_allowed
    async def on_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "/reset ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI\n"
            "/image ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "/web <–∑–∞–ø—Ä–æ—Å> ‚Äî –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"
        )

    @only_allowed
    async def on_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data.clear()
        await update.message.reply_text("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

    @only_allowed
    async def on_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        style = context.user_data.get("style", "pro")
        model = context.user_data.get("model", self.default_model)
        await update.message.reply_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –ú–æ–¥–µ–ª—å: {model}\n"
            f"- –°—Ç–∏–ª—å: {style}\n"
        )

    @only_allowed
    async def on_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        cur = context.user_data.get("model", self.default_model)
        models = self.openai.list_models(
            whitelist=self.allowed_models_whitelist or None,
            denylist=self.denylist_models or None,
        )
        if not models:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
            return
        # —Å–æ–±–µ—Ä—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ 3 –≤ —Ä—è–¥
        rows = []
        row = []
        for m in models:
            title = f"‚úÖ {m}" if m == cur else m
            row.append(InlineKeyboardButton(title, callback_data=f"set_model:{m}"))
            if len(row) == 3:
                rows.append(row)
                row = []
        if row:
            rows.append(row)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(rows))

    @only_allowed
    async def on_web(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = (update.message.text or "").split(maxsplit=1)
        if len(q) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /web <–∑–∞–ø—Ä–æ—Å>")
            return

        query = q[1].strip()
        model = context.user_data.get("model", self.default_model)

        async with TypingIndicator(context.bot, update.effective_chat.id):
            text, cites = await asyncio.to_thread(self.openai.answer_with_web, query, model=model)

        if cites:
            refs = "\n".join([f"‚Ä¢ {c['title']}: {c['url']}" for c in cites])
            reply = f"{text}\n\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏</b>:\n{refs}"
            await update.message.reply_text(reply, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        else:
            await update.message.reply_text(text)

    @only_allowed
    async def on_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # /image –æ–ø–∏—Å–∞–Ω–∏–µ
        args = (update.message.text or "").split(maxsplit=1)
        if len(args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /image <–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>")
            return
        prompt = args[1].strip()
        model = self.image_model

        if not self.enable_image_generation:
            await update.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.")
            return

        try:
            async with TypingIndicator(context.bot, update.effective_chat.id):
                img_bytes = await asyncio.to_thread(self.openai.generate_image, prompt, model=model)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
            with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tf:
                tf.write(img_bytes)
                tmp_png = tf.name

            await update.message.reply_photo(
                photo=open(tmp_png, "rb"),
                caption=f"üñºÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n{prompt}",
            )
        except Exception as e:
            logger.exception("Image generation failed: %s", e)
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        finally:
            with suppress(Exception):
                os.unlink(tmp_png)  # noqa

    # ---- Messages ----

    @only_allowed
    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_text = (update.message.text or "").strip()
        style = context.user_data.get("style", "pro")
        sys_hint, temp = style_system_hint(style)
        model = context.user_data.get("model", self.default_model)

        messages = [
            {"role": "system", "content": sys_hint},
            {"role": "user", "content": user_text},
        ]

        async with TypingIndicator(context.bot, update.effective_chat.id):
            answer = await asyncio.to_thread(
                self.openai.chat,
                messages,
                temperature=temp,
                max_output_tokens=4096,
                model=model,
            )

        await update.message.reply_text(answer or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")

    @only_allowed
    async def on_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        voice = update.message.voice
        if not voice:
            return

        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as tf:
            tmp_ogg = tf.name

        try:
            file = await context.bot.get_file(voice.file_id)
            await file.download_to_drive(custom_path=tmp_ogg)
        except Exception as e:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ: {e}")
            with suppress(Exception):
                os.unlink(tmp_ogg)
            return

        try:
            async with TypingIndicator(context.bot, update.effective_chat.id):
                text = await asyncio.to_thread(self.openai.transcribe, tmp_ogg)

                style = context.user_data.get("style", "pro")
                sys_hint, temp = style_system_hint(style)
                model = context.user_data.get("model", self.default_model)

                messages = [
                    {"role": "system", "content": sys_hint},
                    {"role": "user", "content": (text or "").strip()},
                ]
                answer = await asyncio.to_thread(
                    self.openai.chat,
                    messages,
                    temperature=temp,
                    max_output_tokens=4096,
                    model=model,
                )
        except Exception as e:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å/–æ—Ç–≤–µ—Ç–∏—Ç—å: {e}")
            return
        finally:
            with suppress(Exception):
                os.unlink(tmp_ogg)

        await update.message.reply_text(f"üó£Ô∏è –í—ã —Å–∫–∞–∑–∞–ª–∏:\n{text.strip() if text else ''}")
        await update.message.reply_text(answer or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")

    # ---- Files (–∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–ó) ----

    @only_allowed
    async def on_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        doc = update.message.document
        if not doc:
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False) as tf:
            tmp_path = tf.name

        try:
            tg_file = await context.bot.get_file(doc.file_id)
            await tg_file.download_to_drive(custom_path=tmp_path)

            size_mb = round((doc.file_size or 0) / (1024 * 1024), 2)
            info = f"üìÑ –§–∞–π–ª: {doc.file_name} ({size_mb} –ú–ë, {doc.mime_type})\n\n"
            info += "–§–∞–π–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n" \
                    "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –ë–ó/–∫–æ–º–∞–Ω–¥—É, –¥–æ—Å—Ç—É–ø–Ω—É—é –∞–¥–º–∏–Ω–∞–º."
            await update.message.reply_text(info)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        finally:
            with suppress(Exception):
                os.unlink(tmp_path)

    @only_allowed
    async def on_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        photo = (update.message.photo or [])[-1] if update.message.photo else None
        if not photo:
            return
        await update.message.reply_text(
            "üñºÔ∏è –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. "
            "–ü–æ–∫–∞ —è –¥–µ–ª–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é. "
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/vision."
        )

    # ---- Callback buttons ----

    @only_allowed
    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()

        data = q.data or ""
        if data.startswith("set_model:"):
            model = data.split(":", 1)[1]
            context.user_data["model"] = model
            await q.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model}")

    # ---- Admin / Diagnostics ----

    @only_allowed
    async def on_debug_pgvector(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        /debug_pgvector ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏/—É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pgvector.
        –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        if self.admins and (not update.effective_user or update.effective_user.id not in self.admins):
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        try:
            eng = SessionLocal.bind  # SQLAlchemy Engine
            lines = []
            with eng.connect() as conn:
                ver = conn.execute(text("SELECT version();")).scalar()
                lines.append(f"Postgres: {ver}")

                avail = conn.execute(text("""
                    SELECT name, default_version, installed_version
                    FROM pg_available_extensions
                    WHERE name='vector';
                """)).fetchall()
                if avail:
                    n, dv, iv = avail[0]
                    lines.append(f"pg_available_extensions: {n} (default={dv}, installed={iv})")
                else:
                    lines.append("pg_available_extensions: vector –ù–ï –Ω–∞–π–¥–µ–Ω")

                created = False
                err = None
                try:
                    conn.execute(text("CREATE EXTENSION IF NOT EXISTS vector;"))
                    conn.commit()
                    created = True
                except Exception as e:
                    err = str(e)

                if created:
                    lines.append("CREATE EXTENSION vector: OK (–∏–ª–∏ —É–∂–µ –±—ã–ª–æ)")
                else:
                    lines.append(f"CREATE EXTENSION vector: –æ—à–∏–±–∫–∞: {err}")

                ext = conn.execute(text("""
                    SELECT extname, extversion FROM pg_extension WHERE extname='vector';
                """)).fetchall()
                if ext:
                    en, ev = ext[0]
                    lines.append(f"pg_extension: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {en} v{ev}")
                else:
                    lines.append("pg_extension: vector –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            await update.message.reply_text("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ pgvector:\n" + "\n".join(lines))
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
