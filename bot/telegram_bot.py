
import logging
import asyncio
from functools import wraps
from textwrap import dedent
import os
import numpy as np

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from sqlalchemy import select

from bot.openai_helper import OpenAIHelper
from bot.knowledge_base.context_manager import ContextManager
from bot.knowledge_base.retriever import Retriever
from bot.knowledge_base.indexer import sync_yandex_to_db
from bot.usage_tracker import UsageTracker
from bot.db.session import SessionLocal
from bot.db.models import Document, DocumentChunk

def only_allowed(func):
    @wraps(func)
    async def wrapper(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id if update.effective_user else None
        allowed = self.config.get("allowed_user_ids") or []
        if allowed and user_id not in allowed:
            await update.effective_message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        return await func(self, update, context)
    return wrapper

class ChatGPTTelegramBot:
    def __init__(self, config: dict, openai_helper: OpenAIHelper, usage_tracker: UsageTracker,
                 retriever: Retriever, ctx_manager: ContextManager):
        self.config = config
        self.openai = openai_helper
        self.usage_tracker = usage_tracker
        self.retriever = retriever
        self.ctx_manager = ctx_manager

        self.page_size = 10
        self.pdf_passwords = {}  # filename -> password

        logging.info("ChatGPTTelegramBot initialized")

    def register_handlers(self, application):
        application.add_handler(CommandHandler("start", self.help))
        application.add_handler(CommandHandler("help", self.help))
        application.add_handler(CommandHandler("reset", self.reset))
        application.add_handler(CommandHandler("kb", self.kb))
        application.add_handler(CommandHandler("kb_reset", self.kb_reset))
        application.add_handler(CommandHandler("kb_search", self.kb_search))
        application.add_handler(CommandHandler("kb_sync", self.kb_sync))
        application.add_handler(CommandHandler("pdfpass", self.pdfpass))
        application.add_handler(CommandHandler("image", self.image))

        application.add_handler(CallbackQueryHandler(self.handle_kb_selection, pattern=r"^kbselect:"))
        application.add_handler(CallbackQueryHandler(self.handle_kb_page, pattern=r"^kbpage:"))

        application.add_handler(MessageHandler(filters.VOICE, self.voice))
        application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, self.handle_file))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.text_message))

        application.add_error_handler(self.error_handler)

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logging.exception("Unhandled exception while handling update: %s", update, exc_info=context.error)
        try:
            if update and hasattr(update, "effective_message") and update.effective_message:
                await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –£–∂–µ —á–∏–Ω–∏–º.")
        except Exception:
            pass

    # region Commands

    @only_allowed
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        HELP_TEXT = dedent("""        /start, /help ‚Äî –ø–æ–º–æ—â—å
        /reset ‚Äî —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞

        /kb ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –ë–ó (+ –≤—ã–±–æ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        /kb_reset ‚Äî —Å–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        /kb_search <–≤–æ–ø—Ä–æ—Å> ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å —É –ë–ó (RAG)
        /kb_sync ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–ó (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        /pdfpass <filename.pdf> <password> ‚Äî –ø–∞—Ä–æ–ª—å –∫ PDF

        /image <prompt> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        –ì–æ–ª–æ—Å–æ–≤—ã–µ ‚Äî —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∏ —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á—É.
        –§–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–ª–∏–∑–∞—Ö.
        """)
        await update.message.reply_text(HELP_TEXT)

    @only_allowed
    async def reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        self.openai.reset_chat_history(chat_id)
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

    @only_allowed
    async def kb_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        self.ctx_manager.reset(chat_id)
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç (–≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã) —Å–±—Ä–æ—à–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")

    @only_allowed
    async def kb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self._send_kb_list(update.effective_chat.id, update, page=0)

    async def _send_kb_list(self, chat_id: int, update_or_query, page: int):
        with SessionLocal() as s:
            total = s.query(Document).count()
            docs = s.execute(
                select(Document).order_by(Document.id).offset(page * self.page_size).limit(self.page_size)
            ).scalars().all()

        if not docs:
            text = "–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –í—ã–ø–æ–ª–Ω–∏ /kb_sync (–∞–¥–º–∏–Ω)"
            # –†–∞–∑—Ä—É–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ Update vs CallbackQuery
            if hasattr(update_or_query, "edit_message_text"):  # CallbackQuery
                await update_or_query.edit_message_text(text)
            elif hasattr(update_or_query, "message"):
                await update_or_query.message.reply_text(text)
            else:
                logging.warning("Can't send message: unknown object type in _send_kb_list")
            return

        text_lines = [f"üìö –î–æ–∫—É–º–µ–Ω—Ç—ã ({total} –≤—Å–µ–≥–æ). –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}:"]

        kb = []
        for d in docs:
            text_lines.append(f"‚Ä¢ [{d.id}] {d.path}")
            kb.append([InlineKeyboardButton(f"‚ûï {d.id}", callback_data=f"kbselect:{d.id}")])

        nav = []
        if page > 0:
            nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"kbpage:{page-1}"))
        if (page + 1) * self.page_size < total:
            nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"kbpage:{page+1}"))
        if nav:
            kb.append(nav)

        text = "\n".join(text_lines)
        markup = InlineKeyboardMarkup(kb)

        if hasattr(update_or_query, "edit_message_text"):  # CallbackQuery
            await update_or_query.edit_message_text(text, reply_markup=markup)
        elif hasattr(update_or_query, "message"):
            await update_or_query.message.reply_text(text, reply_markup=markup)
        else:
            logging.warning("Can't send message: unknown object type in _send_kb_list")

    async def handle_kb_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        _, page = query.data.split(":")
        page = int(page)
        await self._send_kb_list(update.effective_chat.id, query, page)

    async def handle_kb_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        _, doc_id = query.data.split(":")
        doc_id = int(doc_id)
        chat_id = update.effective_chat.id
        self.ctx_manager.add(chat_id, doc_id)
        await query.edit_message_text(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞.")

    @only_allowed
    async def kb_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        question = " ".join(context.args) if context.args else ""
        if not question:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /kb_search <–≤–æ–ø—Ä–æ—Å>")
            return

        q_emb = (await self.openai.embed_texts([question]))[0]
        doc_ids = self.ctx_manager.get(chat_id)
        if not doc_ids:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /kb.")
            return

        with SessionLocal() as s:
            chunks = (
                s.execute(
                    select(DocumentChunk)
                    .where(DocumentChunk.document_id.in_(doc_ids))
                )
                .scalars()
                .all()
            )

        if not chunks:
            await update.message.reply_text("–í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞.")
            return

        q = np.array(q_emb, dtype=np.float32)
        q_norm = np.linalg.norm(q) + 1e-8
        scored = []
        for ch in chunks:
            v = np.array(ch.embedding, dtype=np.float32)
            score = float(np.dot(q, v) / ((np.linalg.norm(v)+1e-8) * q_norm))
            scored.append((score, ch))
        scored.sort(key=lambda x: x[0], reverse=True)
        top_chunks = [c for _, c in scored[:5]]

        context_text = "\n\n".join([c.text for c in top_chunks])
        prompt = f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n{context_text}\n\n–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ)."

        answer, _ = await self.openai.get_chat_response(chat_id, prompt)
        await update.message.reply_text(answer)

    @only_allowed
    async def kb_sync(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        admins = self.config.get("admin_user_ids") or []
        if admins and user_id not in admins:
            await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        token = os.getenv("YANDEX_DISK_TOKEN")
        root_path = os.getenv("YANDEX_ROOT_PATH", "/")
        if not token:
            await update.message.reply_text("YANDEX_DISK_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
            return

        await update.message.reply_text("–ù–∞—á–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")
        try:
            await sync_yandex_to_db(
                yandex_token=token,
                root_path=root_path,
                embedder=self.openai.embed_texts,
                embedding_model=self.openai.config.get("embedding_model", "text-embedding-3-small"),
                pdf_passwords=self.pdf_passwords
            )
            await update.message.reply_text("–ì–æ—Ç–æ–≤–æ!")
        except Exception as e:
            logging.exception("kb_sync error")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    @only_allowed
    async def pdfpass(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if len(context.args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pdfpass <–∏–º—è_—Ñ–∞–π–ª–∞.pdf> <–ø–∞—Ä–æ–ª—å>")
            return
        filename = context.args[0]
        password = " ".join(context.args[1:])
        self.pdf_passwords[filename] = password
        await update.message.reply_text(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {filename} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.")

    @only_allowed
    async def image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.config.get("enable_image_generation", True):
            await update.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return
        prompt = " ".join(context.args) if context.args else ""
        if not prompt:
            await update.message.reply_text("–£–∫–∞–∂–∏ –ø—Ä–æ–º–ø—Ç: /image <prompt>")
            return
        try:
            url, size = await self.openai.generate_image(prompt)
            await update.message.reply_text(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª ({size}): {url}")
        except Exception as e:
            await update.message.reply_text(str(e))

    @only_allowed
    async def voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        file = await context.bot.get_file(update.message.voice.file_id)
        tmp = f"/tmp/{file.file_unique_id}.oga"
        await file.download_to_drive(tmp)
        try:
            text = await self.openai.transcribe(tmp)
            answer, _ = await self.openai.get_chat_response(chat_id, text)
            await update.message.reply_text(answer)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")

    @only_allowed
    async def handle_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–µ–ª–∏–∑–µ.")

    @only_allowed
    async def text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        query = update.message.text
        try:
            answer, _ = await self.openai.get_chat_response(chat_id, query)
            await update.message.reply_text(answer)
        except Exception as e:
            logging.exception("Error on text message")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
