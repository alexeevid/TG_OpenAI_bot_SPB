from __future__ import annotations

import asyncio
import contextlib
import logging
import os
import tempfile
from datetime import datetime
from typing import List, Optional, Set

from sqlalchemy import select, delete
from sqlalchemy.orm import Session

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    BotCommand,
)
from telegram.constants import ChatAction, ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from bot.db.session import SessionLocal
from bot.openai_helper import OpenAIHelper
from bot.db.models import Conversation

logger = logging.getLogger(__name__)


def style_system_hint(style: str) -> (str, float):
    style = (style or "pro").lower()
    if style == "pro":
        return (
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–æ–≥—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, –∏–∑–±–µ–≥–∞–π –≤–æ–¥—ã. "
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —è–≤–Ω–æ —É–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å.",
            0.2,
        )
    if style == "expert":
        return (
            "–î–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: –≥–ª—É–±–∏–Ω–∞, —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, —Ç–æ–Ω ‚Äî –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞. "
            "–î–æ–±–∞–≤–ª—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å–ø–∏—Å–∫–∏, —à–∞–≥–∏, caveats.",
            0.35,
        )
    if style == "user":
        return (
            "–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –∫–∞–∫ –¥–ª—è –Ω–µ–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –±—ã—Ç–∞.",
            0.5,
        )
    if style == "ceo":
        return (
            "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –±–∏–∑–Ω–µ—Å–∞ —É—Ä–æ–≤–Ω—è EMBA/DBA: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —Ä–∏—Å–∫–∏, –±—é–¥–∂–µ—Ç, —ç—Ñ—Ñ–µ–∫—Ç, KPI. "
            "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π –∏ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.",
            0.25,
        )
    return ("", 0.3)


def only_allowed(func):
    async def wrapper(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id if update.effective_user else None
        if self.allowed and uid not in self.allowed and uid not in self.admins:
            await update.effective_message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        return await func(self, update, context)
    return wrapper


class TypingIndicator:
    def __init__(self, bot, chat_id, interval: float = 4.0):
        self.bot = bot
        self.chat_id = chat_id
        self.interval = interval
        self._task: Optional[asyncio.Task] = None
        self._stop = asyncio.Event()

    async def __aenter__(self):
        async def _loop():
            try:
                while not self._stop.is_set():
                    await self.bot.send_chat_action(chat_id=self.chat_id, action=ChatAction.TYPING)
                    await asyncio.sleep(self.interval)
            except asyncio.CancelledError:
                pass

        self._task = asyncio.create_task(_loop())
        return self

    async def __aexit__(self, exc_type, exc, tb):
        self._stop.set()
        if self._task:
            with contextlib.suppress(asyncio.CancelledError):
                self._task.cancel()


async def _set_global_commands(app: Application):
    cmds = [
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("reset", "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("kb", "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã)"),
        BotCommand("model", "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI"),
        BotCommand("dialogs", "–°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (/dialog <id> ‚Äî –ø–µ—Ä–µ–π—Ç–∏)"),
        BotCommand("image", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"),
        BotCommand("web", "–í–æ–ø—Ä–æ—Å —Å –≤–µ–±‚Äë–ø–æ–∏—Å–∫–æ–º"),
        BotCommand("style", "–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π/–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π/–°–ï–û"),
    ]
    await app.bot.set_my_commands(cmds)
    with contextlib.suppress(Exception):
        from telegram import (
            BotCommandScopeAllPrivateChats,
            BotCommandScopeAllGroupChats,
            BotCommandScopeAllChatAdministrators,
        )
        for scope in (
            BotCommandScopeAllPrivateChats(),
            BotCommandScopeAllGroupChats(),
            BotCommandScopeAllChatAdministrators(),
        ):
            await app.bot.set_my_commands([], scope=scope)


class ChatGPTTelegramBot:
    def __init__(self, openai: OpenAIHelper, settings):
        self.openai = openai
        self.allowed: Set[int] = set(
            getattr(settings, "allowed_set", []) or getattr(settings, "allowed_user_ids", [])
        )
        self.admins: Set[int] = set(
            getattr(settings, "admin_set", []) or getattr(settings, "admin_user_ids", [])
        )

        self.default_model: str = getattr(settings, "openai_model", None) or openai.model
        self.image_model: Optional[str] = getattr(settings, "image_model", None) or openai.image_model
        self.enable_image_generation: bool = bool(getattr(settings, "enable_image_generation", True))

        self.allowed_models_whitelist: List[str] = getattr(settings, "allowed_models_whitelist", []) or []
        self.denylist_models: List[str] = getattr(settings, "denylist_models", []) or []

    def _get_db(self) -> Session:
        return SessionLocal()

    def install(self, app: Application):
        app.add_handler(CommandHandler("start", self.on_start))
        app.add_handler(CommandHandler("help", self.on_help))
        app.add_handler(CommandHandler("reset", self.on_reset))
        app.add_handler(CommandHandler("stats", self.on_stats))
        app.add_handler(CommandHandler("kb", self.on_kb))
        app.add_handler(CommandHandler("model", self.on_model))
        app.add_handler(CommandHandler("web", self.on_web))
        app.add_handler(CommandHandler("image", self.on_image))
        app.add_handler(CommandHandler("dialogs", self.on_dialogs))
        app.add_handler(CommandHandler("style", self.on_style))

        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text))
        app.add_handler(MessageHandler(filters.VOICE, self.on_voice))
        app.add_handler(MessageHandler(filters.Document.ALL, self.on_document))
        app.add_handler(MessageHandler(filters.PHOTO, self.on_photo))
        app.add_handler(CallbackQueryHandler(self.on_callback))
        
        # PTB v20.x: post_init ‚Äî —ç—Ç–æ –∞—Ç—Ä–∏–±—É—Ç-–∫–æ–ª–±—ç–∫, –∞ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥
        if getattr(app, "post_init", None) is None:
            app.post_init = _set_global_commands
        else:
            # –µ—Å–ª–∏ —É–∂–µ –∫—Ç–æ-—Ç–æ –∑–∞–¥–∞–ª –∫–æ–ª–±—ç–∫, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —á—É–∂–æ–π
            prev_cb = app.post_init
            async def _chained_post_init(application):
                if prev_cb:
                    await prev_cb(application)
                await _set_global_commands(application)
            app.post_init = _chained_post_init

    @only_allowed
    async def on_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
            "–ö–æ–º–∞–Ω–¥—ã: /help, /reset, /stats, /kb, /model, /dialogs, /image, /web, /style"
        )

    @only_allowed
    async def on_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "/reset ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/kb ‚Äî –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã)\n"
            "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI\n"
            "/dialogs ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤, /dialog <id> ‚Äî –ø–µ—Ä–µ–π—Ç–∏\n"
            "/image ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "/web ‚Äî –≤–æ–ø—Ä–æ—Å —Å –≤–µ–±‚Äë–ø–æ–∏—Å–∫–æ–º\n"
            "/style ‚Äî —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞"
        )

    @only_allowed
    async def on_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data.clear()
        await update.message.reply_text("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

    @only_allowed
    async def on_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        dialog_title = context.user_data.get("dialog_title") or context.user_data.get("title") or "–î–∏–∞–ª–æ–≥"
        model = context.user_data.get("model", self.default_model)
        style = context.user_data.get("style", "pro")
        kb_enabled = bool(context.user_data.get("kb_enabled", False))
        selected_docs = context.user_data.get("kb_selected_docs") or context.user_data.get("kb_selected") or []
        if isinstance(selected_docs, set):
            selected_docs = list(selected_docs)
        if selected_docs and not isinstance(selected_docs[0], str):
            selected_docs = [str(d) for d in selected_docs]
        docs_line = ", ".join(selected_docs[:10]) + ("‚Ä¶" if len(selected_docs) > 10 else "")
        docs_cnt = len(selected_docs)

        msg = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –î–∏–∞–ª–æ–≥: {dialog_title}\n"
            f"- –ú–æ–¥–µ–ª—å: {model}\n"
            f"- –°—Ç–∏–ª—å: {style.capitalize()}\n"
            f"- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'–≤–∫–ª—é—á–µ–Ω–∞' if kb_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}\n"
            f"- –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: {docs_cnt}\n"
        )
        if docs_cnt:
            msg += f"- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {docs_line}\n"
        await update.message.reply_text(msg)

    @only_allowed
    async def on_kb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ú–µ–Ω—é –ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ–∫—É—â–µ–π —Å–±–æ—Ä–∫–µ —á–µ—Ä–µ–∑ –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")

    @only_allowed
    async def on_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        cur = context.user_data.get("model", self.default_model)
        models = self.openai.list_models(
            whitelist=self.allowed_models_whitelist or None,
            denylist=self.denylist_models or None,
        )
        if not models:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
            return
        rows = []
        row = []
        for m in models:
            title = f"‚úÖ {m}" if m == cur else m
            row.append(InlineKeyboardButton(title, callback_data=f"set_model:{m}"))
            if len(row) == 3:
                rows.append(row); row = []
        if row:
            rows.append(row)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(rows))

    @only_allowed
    async def on_web(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = (update.message.text or "").split(maxsplit=1)
        if len(q) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /web <–∑–∞–ø—Ä–æ—Å>")
            return

        query = q[1].strip()
        model = context.user_data.get("model", self.default_model)

        async with TypingIndicator(context.bot, update.effective_chat.id):
            text, cites = await asyncio.to_thread(self.openai.answer_with_web, query, model=model)

        if cites:
            refs = "\n".join([f"‚Ä¢ {c['title']}: {c['url']}" for c in cites])
            reply = f"{text}\n\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏</b>:\n{refs}"
            await update.message.reply_text(reply, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        else:
            await update.message.reply_text(
                text + "\n\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —è–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.",
                disable_web_page_preview=True
            )

    @only_allowed
    async def on_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = (update.message.text or "").split(maxsplit=1)
        if len(args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /image <–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>")
            return
        prompt = args[1].strip()
        model = self.image_model
        if not self.enable_image_generation:
            await update.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.")
            return

        tmp_png = None
        try:
            async with TypingIndicator(context.bot, update.effective_chat.id):
                img_bytes = await asyncio.to_thread(self.openai.generate_image, prompt, model=model)

            with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tf:
                tf.write(img_bytes)
                tmp_png = tf.name

            await update.message.reply_photo(photo=open(tmp_png, "rb"), caption=f"üñºÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n{prompt}")
        except Exception as e:
            logger.exception("Image generation failed: %s", e)
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        finally:
            if tmp_png:
                with contextlib.suppress(Exception):
                    os.unlink(tmp_png)

    @only_allowed
    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_text = (update.message.text or "").strip()
        style = context.user_data.get("style", "pro")
        sys_hint, temp = style_system_hint(style)
        model = context.user_data.get("model", self.default_model)

        messages = [
            {"role": "system", "content": sys_hint},
            {"role": "user", "content": user_text},
        ]

        async with TypingIndicator(context.bot, update.effective_chat.id):
            answer = await asyncio.to_thread(
                self.openai.chat, messages, temperature=temp, max_output_tokens=4096, model=model
            )

        await update.message.reply_text(answer or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")

    @only_allowed
    async def on_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        voice = update.message.voice
        if not voice:
            return

        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as tf:
            tmp_ogg = tf.name

        try:
            file = await context.bot.get_file(voice.file_id)
            await file.download_to_drive(custom_path=tmp_ogg)
        except Exception as e:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ: {e}")
            with contextlib.suppress(Exception):
                os.unlink(tmp_ogg)
            return

        try:
            async with TypingIndicator(context.bot, update.effective_chat.id):
                text = await asyncio.to_thread(self.openai.transcribe, tmp_ogg)

                style = context.user_data.get("style", "pro")
                sys_hint, temp = style_system_hint(style)
                model = context.user_data.get("model", self.default_model)

                messages = [
                    {"role": "system", "content": sys_hint},
                    {"role": "user", "content": (text or '').strip()},
                ]
                answer = await asyncio.to_thread(
                    self.openai.chat, messages, temperature=temp, max_output_tokens=4096, model=model
                )
        except Exception as e:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å/–æ—Ç–≤–µ—Ç–∏—Ç—å: {e}")
            return
        finally:
            with contextlib.suppress(Exception):
                os.unlink(tmp_ogg)

        await update.message.reply_text(f"üó£Ô∏è –í—ã —Å–∫–∞–∑–∞–ª–∏:\n{text.strip() if text else ''}")
        await update.message.reply_text(answer or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")

    @only_allowed
    async def on_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        doc = update.message.document
        if not doc:
            return
        with tempfile.NamedTemporaryFile(delete=False) as tf:
            tmp_path = tf.name
        try:
            tg_file = await context.bot.get_file(doc.file_id)
            await tg_file.download_to_drive(custom_path=tmp_path)
            size_mb = round((doc.file_size or 0) / (1024 * 1024), 2)
            info = f"üìÑ –§–∞–π–ª: {doc.file_name} ({size_mb} –ú–ë, {doc.mime_type})\n\n"
            info += "–§–∞–π–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n" \
                    "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –ë–ó/–∫–æ–º–∞–Ω–¥—É, –¥–æ—Å—Ç—É–ø–Ω—É—é –∞–¥–º–∏–Ω–∞–º."
            await update.message.reply_text(info)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        finally:
            with contextlib.suppress(Exception):
                os.unlink(tmp_path)

    @only_allowed
    async def on_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        photo = (update.message.photo or [])[-1] if update.message.photo else None
        if not photo:
            return
        await update.message.reply_text(
            "üñºÔ∏è –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–∫–∞ —è –¥–µ–ª–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é. "
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/vision."
        )

    @only_allowed
    async def on_style(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        parts = (update.message.text or "").split(maxsplit=1)
        styles = {"pro": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "expert": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", "user": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", "ceo": "–°–ï–û"}
        if len(parts) == 2:
            key = parts[1].strip().lower()
            if key in styles:
                context.user_data["style"] = key
                await update.message.reply_text(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {styles[key]}")
                return
            else:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /style pro|expert|user|ceo")
                return
        rows = [
            [InlineKeyboardButton("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", callback_data="set_style:pro"),
             InlineKeyboardButton("–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", callback_data="set_style:expert")],
            [InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", callback_data="set_style:user"),
             InlineKeyboardButton("–°–ï–û", callback_data="set_style:ceo")],
        ]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(rows))

    def _render_dialogs_page(self, db: Session, uid: int, page: int = 0, page_size: int = 10):
        total = db.execute(select(Conversation).where(Conversation.user_id == uid)).scalars().all()
        total_count = len(total)
        rows = sorted(
            total,
            key=lambda c: (getattr(c, "updated_at", None) or getattr(c, "created_at", None) or datetime.min),
            reverse=True,
        )
        start = page * page_size
        end = start + page_size
        slice_rows = rows[start:end]
        if not slice_rows:
            return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤.", None

        kb = []
        for c in slice_rows:
            title = (getattr(c, "title", None) or f"–î–∏–∞–ª–æ–≥ #{c.id}").strip()
            if len(title) > 40:
                title = title[:37] + "‚Ä¶"
            kb.append([
                InlineKeyboardButton(f"#{c.id}: {title}", callback_data=f"open_dlg:{c.id}"),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_dlg:{c.id}"),
            ])

        nav = []
        if page > 0:
            nav.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"dlg_page:{page-1}"))
        if end < total_count:
            nav.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"dlg_page:{page+1}"))
        if nav:
            kb.append(nav)

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥:\n‚Äî –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏, –∏–ª–∏ üóë ‚Äî —É–¥–∞–ª–∏—Ç—å."
        return text, InlineKeyboardMarkup(kb)

    @only_allowed
    async def on_dialogs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id if update.effective_user else None
        db = self._get_db()
        try:
            text, markup = self._render_dialogs_page(db, uid, page=0)
            await update.message.reply_text(text, reply_markup=markup)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        finally:
            db.close()

    @only_allowed
    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()

        data = q.data or ""

        if data.startswith("set_model:"):
            model = data.split(":", 1)[1]
            context.user_data["model"] = model
            await q.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model}")
            return

        if data.startswith("set_style:"):
            st = data.split(":", 1)[1]
            context.user_data["style"] = st
            human = {"pro":"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π","expert":"–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π","user":"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π","ceo":"–°–ï–û"}.get(st, st)
            await q.edit_message_text(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {human}")
            return

        if data.startswith("dlg_page:"):
            try:
                page = int(data.split(":", 1)[1])
            except Exception:
                page = 0
            uid = update.effective_user.id if update.effective_user else None
            db = self._get_db()
            try:
                text, markup = self._render_dialogs_page(db, uid, page=page)
                await q.edit_message_text(text, reply_markup=markup)
            except Exception as e:
                await q.edit_message_text(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            finally:
                db.close()
            return

        if data.startswith("open_dlg:"):
            dlg_id = int(data.split(":", 1)[1])
            uid = update.effective_user.id if update.effective_user else None
            db = self._get_db()
            try:
                row = db.execute(
                    select(Conversation).where(Conversation.id == dlg_id, Conversation.user_id == uid)
                ).scalar_one_or_none()
                if not row:
                    await q.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                    return

                context.user_data["dialog_id"] = row.id
                context.user_data["dialog_title"] = row.title or f"–î–∏–∞–ª–æ–≥ #{row.id}"

                await q.edit_message_text(f"‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ –¥–∏–∞–ª–æ–≥ #{row.id}: {context.user_data['dialog_title']}")
            except Exception as e:
                await q.edit_message_text(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            finally:
                db.close()
            return

        if data.startswith("del_dlg:"):
            dlg_id = int(data.split(":", 1)[1])
            uid = update.effective_user.id if update.effective_user else None
            db = self._get_db()
            try:
                row = db.execute(
                    select(Conversation).where(Conversation.id == dlg_id, Conversation.user_id == uid)
                ).scalar_one_or_none()
                if not row:
                    await q.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                    return

                from sqlalchemy import delete as sqldelete
                db.execute(sqldelete(Conversation).where(Conversation.id == dlg_id))
                db.commit()

                if context.user_data.get("dialog_id") == dlg_id:
                    context.user_data.pop("dialog_id", None)
                    context.user_data.pop("dialog_title", None)

                text, markup = self._render_dialogs_page(db, uid, page=0)
                await q.edit_message_text("üóë –î–∏–∞–ª–æ–≥ —É–¥–∞–ª—ë–Ω.\n\n" + text, reply_markup=markup)
            except Exception as e:
                db.rollback()
                await q.edit_message_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            finally:
                db.close()
            return

    def _get_db(self) -> Session:
        return SessionLocal()
