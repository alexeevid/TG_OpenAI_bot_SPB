import logging
import time
import os
from io import BytesIO
from datetime import datetime

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    InputFile
)
from telegram.constants import ChatAction, ParseMode
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)

from .dialog_manager import DialogManager
from .openai_helper import OpenAIHelper
from .knowledge_base.indexer import KnowledgeBaseIndexer
from .knowledge_base.retriever import KnowledgeBaseRetriever

logger = logging.getLogger(__name__)


class ChatGPTTelegramBot:
    def __init__(self, settings):
        self.settings = settings
        self.dialog_manager = DialogManager()
        self.openai = OpenAIHelper(
            api_key=settings.openai_api_key,
            model=settings.openai_model,
            image_model=settings.image_model
        )
        self.kb_indexer = KnowledgeBaseIndexer(settings)
        self.kb_retriever = KnowledgeBaseRetriever(settings)

        self.current_dialog_by_user = {}
        self.awaiting_rename = {}
        self.awaiting_kb_pwd = {}

    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /dialogs /rename /export /kb /kb_diag /model /mode /img /web /stats")

    async def cmd_dialogs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dialogs = self.dialog_manager.get_active_dialogs(user_id)

        buttons = []
        for dlg in dialogs:
            title = f"{dlg.title} | {dlg.created_at.strftime('%Y.%m.%d')}"
            buttons.append([
                InlineKeyboardButton(title, callback_data=f"dlg:open:{dlg.id}"),
                InlineKeyboardButton("‚úèÔ∏è", callback_data=f"dlg:rename:{dlg.id}"),
                InlineKeyboardButton("üì§", callback_data=f"dlg:export:{dlg.id}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"dlg:del:{dlg.id}")
            ])
        buttons.append([InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data="dlg:new")])

        await update.message.reply_text(
            "–í–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    async def cmd_rename(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        current_dlg = self.current_dialog_by_user.get(user_id)
        if not current_dlg:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
            return
        self.awaiting_rename[user_id] = current_dlg
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:")

    async def cmd_export(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        current_dlg = self.current_dialog_by_user.get(user_id)
        if not current_dlg:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
            return
        md_text = self.dialog_manager.export_dialog(current_dlg, user_id)
        if not md_text:
            await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—É—Å—Ç.")
            return
        file_bytes = BytesIO(md_text.encode("utf-8"))
        file_bytes.name = f"dialog_{current_dlg}.md"
        await update.message.reply_document(InputFile(file_bytes))

    async def cmd_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI –ø–æ —Å–ø–∏—Å–∫—É –∏–∑ API."""
        user_id = update.effective_user.id
        current_dlg = self.current_dialog_by_user.get(user_id)
        if not current_dlg:
            dlg = self.dialog_manager.create_dialog(user_id)
            self.current_dialog_by_user[user_id] = dlg.id
            current_dlg = dlg.id
    
        try:
            from openai import OpenAI
            client = OpenAI(api_key=self.settings.openai_api_key)
    
            # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
            models_data = client.models.list()
            model_names = sorted([m.id for m in models_data.data])
    
            if not model_names:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π OpenAI.")
                return
    
            # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
            buttons = []
            for i in range(0, len(model_names), 2):
                row = []
                for model in model_names[i:i+2]:
                    row.append(InlineKeyboardButton(model, callback_data=f"model:{model}"))
                buttons.append(row)
    
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")

    
    async def cmd_kb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞."""
        user_id = update.effective_user.id
        current_dlg = self.current_dialog_by_user.get(user_id)
        if not current_dlg:
            dlg = self.dialog_manager.create_dialog(user_id)
            self.current_dialog_by_user[user_id] = dlg.id
            current_dlg = dlg.id
    
        dlg_state = self.dialog_manager.get_dialog_state(current_dlg, user_id)
    
        try:
            docs = await asyncio.to_thread(self.kb_indexer.list_documents)
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return
    
        buttons = []
        path_by_idx = {}
    
        for i, d in enumerate(docs):
            path_by_idx[i] = d.path
            mark = "‚úÖ " if d.path in dlg_state.kb_selected_docs else "‚òê "
            buttons.append([InlineKeyboardButton(f"{mark}{os.path.basename(d.path)}", callback_data=f"kb:toggle:{i}")])
    
            # –ö–Ω–æ–ø–∫–∞ –ø–∞—Ä–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è PDF
            if d.path in dlg_state.kb_selected_docs and d.path.lower().endswith(".pdf"):
                buttons.append([InlineKeyboardButton("üîë –ü–∞—Ä–æ–ª—å", callback_data=f"kb:pwd:{i}")])
    
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="kb:save")])
        buttons.append([InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é", callback_data="kb:resync")])
    
        dlg_state.kb_last_paths = path_by_idx
        self.dialog_manager.save_dialog_state(current_dlg, user_id, dlg_state)
    
        await update.message.reply_text(
            "üìÇ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    
    async def cmd_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è KB."""
        user_id = update.effective_user.id
        self.current_dialog_by_user.pop(user_id, None)
        self.awaiting_rename.pop(user_id, None)
        self.awaiting_kb_pwd.pop(user_id, None)
    
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º DialogManager, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.dialog_manager.reset_user_dialogs(user_id)
    
        await update.message.reply_text("üîÑ –î–∏–∞–ª–æ–≥ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã.")
    
    async def cmd_kb_diag(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        current_dlg = self.current_dialog_by_user.get(user_id)
        if not current_dlg:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
            return
        dlg = self.dialog_manager.get_dialog(current_dlg, user_id)
        msgs = self.dialog_manager.get_messages(current_dlg, limit=5)
        kb_docs = dlg.kb_documents if hasattr(dlg, "kb_documents") else []

        text = f"–î–∏–∞–ª–æ–≥: {dlg.title} (ID {dlg.id})\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(kb_docs) or '‚Äî'}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
        for m in reversed(msgs):
            text += f"[{m.role}] {m.content}\n"
        await update.message.reply_text(text)

    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data
        user_id = update.effective_user.id

        if data == "dlg:new":
            dlg = self.dialog_manager.create_dialog(user_id)
            self.current_dialog_by_user[user_id] = dlg.id
            await query.edit_message_text(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥: {dlg.title}")
            return

        if data.startswith("model:"):
            model_name = data.split(":", 1)[1]
            dlg_state = self.dialog_manager.get_dialog_state(self.current_dialog_by_user[user_id], user_id)
            dlg_state.model = model_name
            self.dialog_manager.save_dialog_state(self.current_dialog_by_user[user_id], user_id, dlg_state)
            await query.edit_message_text(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model_name}")
            return
        
        if data.startswith("dlg:open:"):
            dlg_id = int(data.split(":")[2])
            self.current_dialog_by_user[user_id] = dlg_id
            dlg = self.dialog_manager.get_dialog(dlg_id, user_id)
            last_msg = self.dialog_manager.get_messages(dlg_id, limit=1)
            last_date = last_msg[0].timestamp.strftime("%Y.%m.%d") if last_msg else "‚Äî"
            await query.edit_message_text(f"üìÇ –î–∏–∞–ª–æ–≥ '{dlg.title}' (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_date}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return

        if data.startswith("kb:toggle:"):
            idx = int(data.split(":", 2)[2])
            dlg_state = self.dialog_manager.get_dialog_state(self.current_dialog_by_user[user_id], user_id)
            path = dlg_state.kb_last_paths.get(idx)
        
            if not path:
                await query.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ (/kb).", show_alert=True)
                return
        
            if path in dlg_state.kb_selected_docs:
                dlg_state.kb_selected_docs.remove(path)
                dlg_state.kb_passwords.pop(path, None)
            else:
                dlg_state.kb_selected_docs.append(path)
        
            self.dialog_manager.save_dialog_state(self.current_dialog_by_user[user_id], user_id, dlg_state)
        
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á—ë—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
            docs = await asyncio.to_thread(self.kb_indexer.list_documents)
            buttons = []
            for i, d in enumerate(docs):
                mark = "‚úÖ " if d.path in dlg_state.kb_selected_docs else "‚òê "
                buttons.append([InlineKeyboardButton(f"{mark}{os.path.basename(d.path)}", callback_data=f"kb:toggle:{i}")])
                if d.path in dlg_state.kb_selected_docs and d.path.lower().endswith(".pdf"):
                    buttons.append([InlineKeyboardButton("üîë –ü–∞—Ä–æ–ª—å", callback_data=f"kb:pwd:{i}")])
            buttons.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="kb:save")])
            buttons.append([InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é", callback_data="kb:resync")])
        
            await query.edit_message_reply_markup(InlineKeyboardMarkup(buttons))
            return

        if data == "kb:save":
            dlg_state = self.dialog_manager.get_dialog_state(self.current_dialog_by_user[user_id], user_id)
            if len(dlg_state.kb_selected_docs) == 0:
                dlg_state.kb_enabled = False
                self.dialog_manager.save_dialog_state(self.current_dialog_by_user[user_id], user_id, dlg_state)
                await query.edit_message_text("üìÇ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã).")
            else:
                dlg_state.kb_enabled = True
                self.dialog_manager.save_dialog_state(self.current_dialog_by_user[user_id], user_id, dlg_state)
                await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(dlg_state.kb_selected_docs)}. –ë—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–ó.")
            return
        
        if data.startswith("dlg:rename:"):
            dlg_id = int(data.split(":")[2])
            self.awaiting_rename[user_id] = dlg_id
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:")
            return

        if data.startswith("dlg:export:"):
            dlg_id = int(data.split(":")[2])
            md_text = self.dialog_manager.export_dialog(dlg_id, user_id)
            if not md_text:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –ø—É—Å—Ç.")
                return
            file_bytes = BytesIO(md_text.encode("utf-8"))
            file_bytes.name = f"dialog_{dlg_id}.md"
            await context.bot.send_document(chat_id=user_id, document=InputFile(file_bytes))
            return

        if data.startswith("dlg:del:"):
            dlg_id = int(data.split(":")[2])
            self.dialog_manager.soft_delete_dialog(dlg_id, user_id)
            await query.edit_message_text("–î–∏–∞–ª–æ–≥ —É–¥–∞–ª—ë–Ω.")
            return

        if data.startswith("kb:pwd:"):
            idx = int(data.split(":", 2)[2])
            dlg_state = self.dialog_manager.get_dialog_state(self.current_dialog_by_user[user_id], user_id)
            path = dlg_state.kb_last_paths.get(idx)
        
            if not path:
                await query.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ (/kb).", show_alert=True)
                return
        
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –¥–ª—è –∫–∞–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∂–¥—ë–º –ø–∞—Ä–æ–ª—å
            self.awaiting_kb_pwd[user_id] = idx
            await query.edit_message_text(
                f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {os.path.basename(path)}"
            )
            return

        if data.startswith("kb:pwd:"):
            idx = int(data.split(":")[2])
            self.awaiting_kb_pwd[user_id] = idx
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É:")
            return

    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        text = update.message.text.strip()
    
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        if user_id in self.awaiting_rename:
            dlg_id = self.awaiting_rename.pop(user_id)
            self.dialog_manager.rename_dialog(dlg_id, user_id, text)
            await update.message.reply_text(f"–î–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {text}")
            return
    
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ KB
        if user_id in self.awaiting_kb_pwd:
            idx = self.awaiting_kb_pwd.pop(user_id)
            dlg_state = self.dialog_manager.get_dialog_state(self.current_dialog_by_user[user_id], user_id)
            path = dlg_state.kb_last_paths.get(idx)
            if path:
                dlg_state.kb_passwords[path] = text
                self.dialog_manager.save_dialog_state(self.current_dialog_by_user[user_id], user_id, dlg_state)
                await update.message.reply_text(f"üîë –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è: {os.path.basename(path)}")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å: –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
    
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
        current_dlg = self.current_dialog_by_user.get(user_id)
        if not current_dlg:
            dlg = self.dialog_manager.create_dialog(user_id)
            self.current_dialog_by_user[user_id] = dlg.id
            current_dlg = dlg.id
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.dialog_manager.add_message(current_dlg, "user", text)
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º KB
        kb_ctx = None
        dlg_state = self.dialog_manager.get_dialog_state(current_dlg, user_id)
        if dlg_state.kb_enabled and dlg_state.kb_selected_docs:
            chunks = await asyncio.to_thread(
                self.kb_retriever.retrieve,
                text,
                list(dlg_state.kb_selected_docs),
                dlg_state.kb_passwords
            )
    
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ PDF, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
            used_paths_text = "\n".join(chunks) if chunks else ""
            for path in dlg_state.kb_selected_docs:
                if path.lower().endswith(".pdf") and path not in used_paths_text:
                    await update.message.reply_text(
                        f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç {os.path.basename(path)} –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. "
                        "–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ."
                    )
    
            if chunks:
                kb_ctx = "\n\n".join(chunks)
    
        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        dlg_obj = self.dialog_manager.get_dialog(current_dlg, user_id)
        reply = await self.openai.chat(
            dialog_id=current_dlg,
            user_id=user_id,
            user_message=text,
            style=dlg_obj.style,
            kb_context=kb_ctx,
            model=dlg_obj.model
        )
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        self.dialog_manager.add_message(current_dlg, "assistant", reply)
        await update.message.reply_text(reply)
    
