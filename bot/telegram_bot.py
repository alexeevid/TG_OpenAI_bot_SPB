from __future__ import annotations

import asyncio
import io
import logging
import os
import time
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Tuple

import httpx
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
)
from telegram.constants import ChatAction, ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from bot.openai_helper import OpenAIHelper
from bot.settings import Settings

# --- knowledge_base –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–º—è–≥–∫–∞—è) ---
KB_AVAILABLE = True
try:
    from bot.knowledge_base.indexer import sync as kb_sync  # type: ignore
    from bot.knowledge_base.retriever import list_documents as kb_list_docs  # -> List[Document-like] # type: ignore
    # –æ–∂–∏–¥–∞–µ–º —É Document –ø–æ–ª—è: id, title
except Exception:
    KB_AVAILABLE = False
    kb_sync = None
    kb_list_docs = None

logger = logging.getLogger(__name__)

# ----------------- –ü–∞–º—è—Ç—å per-chat -----------------

@dataclass
class ChatState:
    selected_doc_ids: List[int] = field(default_factory=list)  # –¥–æ–∫—É–º–µ–Ω—Ç—ã –ë–ó –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    kb_enabled: bool = False  # –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ë–ó
    # –ò–º—è –¥–∏–∞–ª–æ–≥–∞ (–¥–ª—è /stats)
    title: str = "–î–∏–∞–ª–æ–≥"


class ChatGPTTelegramBot:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞. –ù–∏–∫–∞–∫–∏—Ö —Å–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π –æ –ë–î/–º–æ–¥–µ–ª—è—Ö.
    –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ per-chat —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """

    STYLES = {
        "pro": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π ‚Äî –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ.",
        "expert": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π ‚Äî –≥–ª—É–±–æ–∫–∞—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤/—Ç–µ—Ä–º–∏–Ω–æ–≤.",
        "user": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ‚Äî –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫, –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∞ —Ç–µ—Ä–º–∏–Ω–∞–º–∏.",
        "ceo": "–°–ï–û ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –≤–∑–≥–ª—è–¥ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–∏–∑–Ω–µ—Å–∞ (EMBA/DBA).",
    }

    def __init__(self, openai: OpenAIHelper, settings: Settings) -> None:
        self.openai = openai
        self.settings = settings

        # per-chat —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state: Dict[int, ChatState] = {}

    # ------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ -------------

    def _get_state(self, chat_id: int) -> ChatState:
        st = self.state.get(chat_id)
        if not st:
            st = ChatState()
            self.state[chat_id] = st
        return st

    async def _typing(self, update: Update, context: ContextTypes.DEFAULT_TYPE, seconds: float = 1.0):
        """
        –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞: —Ä–∞–∑–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "typing".
        (–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ç–ª—é –∫–∞–∂–¥—ã–µ 4s, –Ω–æ —á–∞—â–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–∞–∑–æ–≤–æ–≥–æ –ø–∏–Ω–≥–∞).
        """
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        except Exception:
            pass
        await asyncio.sleep(seconds)

    def _kb_snippets_from_ids(self, doc_ids: List[int]) -> Optional[str]:
        """
        –ë–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–º–µ—à–∏–≤–∞–µ–º –≤ system. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤.
        –°–µ–π—á–∞—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π (–±–µ–∑ —Ç—è–∂—ë–ª–æ–≥–æ RAG).
        """
        if not KB_AVAILABLE or not kb_list_docs:
            if not doc_ids:
                return None
            titles = [f"- –¥–æ–∫—É–º–µ–Ω—Ç #{i}" for i in doc_ids]
            return "\n".join(titles)

        docs = {d.id: d for d in (kb_list_docs() or [])}
        titles = []
        for i in doc_ids:
            d = docs.get(i)
            if d:
                titles.append(f"- {d.title}")
        if not titles:
            return None
        return "\n".join(titles)

    # ---------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ ----------------

    def install(self, app: Application) -> None:
        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.cmd_start))
        app.add_handler(CommandHandler("help", self.cmd_help))
        app.add_handler(CommandHandler("reset", self.cmd_reset))
        app.add_handler(CommandHandler("stats", self.cmd_stats))
        app.add_handler(CommandHandler("kb", self.cmd_kb))
        app.add_handler(CommandHandler("model", self.cmd_model))
        app.add_handler(CommandHandler("mode", self.cmd_mode))
        app.add_handler(CommandHandler("dialogs", self.cmd_dialogs))
        app.add_handler(CommandHandler("del", self.cmd_del))
        app.add_handler(CommandHandler("img", self.cmd_img))
        app.add_handler(CommandHandler("web", self.cmd_web))

        # –ö–æ–ª–±—ç–∫–∏
        app.add_handler(CallbackQueryHandler(self.on_model_select, pattern=r"^model:"))
        app.add_handler(CallbackQueryHandler(self.on_mode_select, pattern=r"^mode:"))
        app.add_handler(CallbackQueryHandler(self.on_kb_toggle, pattern=r"^kb:"))
        app.add_handler(CallbackQueryHandler(self.on_dialog_action, pattern=r"^dlg:"))

        # –°–æ–æ–±—â–µ–Ω–∏—è
        app.add_handler(MessageHandler(filters.VOICE, self.on_voice))
        app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, self.on_file_or_photo))
        app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), self.on_text))

        # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ ‚Äî —á–µ—Ä–µ–∑ post_init (–∞—Ç—Ä–∏–±—É—Ç, –∞ –Ω–µ –º–µ—Ç–æ–¥!)
        async def _set_global_commands(application: Application):
            try:
                await application.bot.set_my_commands([
                    ("start", "–ó–∞–ø—É—Å–∫/—Å–ø—Ä–∞–≤–∫–∞"),
                    ("help", "–°–ø—Ä–∞–≤–∫–∞"),
                    ("reset", "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
                    ("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                    ("kb", "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"),
                    ("model", "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"),
                    ("mode", "–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤"),
                    ("dialogs", "–î–∏–∞–ª–æ–≥–∏"),
                    ("del", "–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥"),
                    ("img", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                    ("web", "–í–µ–±-–ø–æ–∏—Å–∫"),
                ])
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: %s", e)

        if getattr(app, "post_init", None) is None:
            app.post_init = _set_global_commands
        else:
            prev_cb = app.post_init
            async def _chained(application: Application):
                if prev_cb:
                    await prev_cb(application)
                await _set_global_commands(application)
            app.post_init = _chained

    # ---------------- –ö–æ–º–∞–Ω–¥—ã ----------------

    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
            "–ö–æ–º–∞–Ω–¥—ã: /help, /reset, /stats, /kb, /model, /mode, /dialogs, /del, /img, /web"
        )

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "/reset ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/kb ‚Äî –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã)\n"
            "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI\n"
            "/mode ‚Äî —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ (Pro/Expert/User/CEO)\n"
            "/dialogs ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (–æ—Ç–∫—Ä—ã—Ç—å/—É–¥–∞–ª–∏—Ç—å)\n"
            "/del ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥\n"
            "/img <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "/web <–∑–∞–ø—Ä–æ—Å> ‚Äî –≤–µ–±‚Äë–ø–æ–∏—Å–∫ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"
        )

    async def cmd_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        self.state.pop(chat_id, None)
        await update.message.reply_text("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        st = self._get_state(chat_id)
        model = self.openai.get_current_model(chat_id)
        style = self.openai.get_style(chat_id)
        kb = "–≤–∫–ª—é—á–µ–Ω–∞" if st.kb_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"

        # –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å knowledge_base
        doc_titles: List[str] = []
        if KB_AVAILABLE and kb_list_docs and st.selected_doc_ids:
            docs = {d.id: d for d in kb_list_docs() or []}
            for d_id in st.selected_doc_ids:
                if d_id in docs:
                    doc_titles.append(docs[d_id].title)

        text = [
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
            f"- –î–∏–∞–ª–æ–≥: {st.title}",
            f"- –ú–æ–¥–µ–ª—å: {model}",
            f"- –°—Ç–∏–ª—å: {style.capitalize()}",
            f"- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {kb}",
            f"- –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: {len(st.selected_doc_ids)}",
        ]
        if doc_titles:
            text.append(f"- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {', '.join(doc_titles)}")

        await update.message.reply_text("\n".join(text))

    async def cmd_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        models, current = self.openai.list_models_with_current(chat_id)
        if not models:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        rows = []
        for m in models:
            mark = " ‚úÖ" if m == current else ""
            rows.append([InlineKeyboardButton(text=f"{m}{mark}", callback_data=f"model:set:{m}")])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(rows))

    async def on_model_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        _, action, model = q.data.split(":", 2)
        if action != "set":
            return
        chat_id = update.effective_chat.id
        self.openai.set_current_model(chat_id, model)
        await q.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {model}")

    async def cmd_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        current = self.openai.get_style(chat_id)
        rows = []
        for key, desc in self.STYLES.items():
            mark = " ‚úÖ" if key == current else ""
            rows.append([InlineKeyboardButton(f"{key}{mark}", callback_data=f"mode:set:{key}")])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:", reply_markup=InlineKeyboardMarkup(rows))

    async def on_mode_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        _, action, style = q.data.split(":", 2)
        if action != "set":
            return
        chat_id = update.effective_chat.id
        self.openai.set_style(chat_id, style)
        await q.edit_message_text(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {style}")

    async def cmd_kb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        st = self._get_state(chat_id)

        msg = await update.message.reply_text("‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
        added = updated = deleted = 0

        if not KB_AVAILABLE or not kb_sync or not kb_list_docs:
            await msg.edit_text("‚ö†Ô∏è –ú–æ–¥—É–ª—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.")
            return

        try:
            # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ kb_sync() –≤–µ—Ä–Ω—ë—Ç (added, updated, deleted) –∏–ª–∏ dict —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
            res = kb_sync()
            if isinstance(res, tuple) and len(res) >= 3:
                added, updated, deleted = res[:3]
            elif isinstance(res, dict):
                added = int(res.get("added", 0))
                updated = int(res.get("updated", 0))
                deleted = int(res.get("deleted", 0))
        except Exception as e:
            await msg.edit_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return

        docs = []
        try:
            docs = kb_list_docs() or []
        except Exception as e:
            await msg.edit_text(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–∫. –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ë–ó
        kb_switch = "üîì –í–∫–ª—é—á–∏—Ç—å –ë–ó" if not st.kb_enabled else "üîí –í—ã–∫–ª—é—á–∏—Ç—å –ë–ó"
        rows: List[List[InlineKeyboardButton]] = [
            [InlineKeyboardButton(kb_switch, callback_data="kb:switch")],
        ]

        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        for d in docs:
            on = "‚úÖ" if d.id in st.selected_doc_ids else "‚ùå"
            rows.append([InlineKeyboardButton(f"{on} {d.title}", callback_data=f"kb:toggle:{d.id}")])

        text = (
            f"üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n"
            f"‚Äî –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}, –£–¥–∞–ª–µ–Ω–æ: {deleted}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
        )
        await msg.edit_text(text, reply_markup=InlineKeyboardMarkup(rows))

    async def on_kb_toggle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        parts = q.data.split(":")
        if len(parts) == 2 and parts[1] == "switch":
            chat_id = update.effective_chat.id
            st = self._get_state(chat_id)
            st.kb_enabled = not st.kb_enabled
            await q.answer("–ë–ó –≤–∫–ª—é—á–µ–Ω–∞" if st.kb_enabled else "–ë–ó –≤—ã–∫–ª—é—á–µ–Ω–∞")
            # –û–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º –Ω–µ –±—É–¥–µ–º ‚Äî —á—Ç–æ–±—ã –Ω–µ –¥—ë—Ä–≥–∞—Ç—å DD
            return

        if len(parts) == 3 and parts[1] == "toggle":
            chat_id = update.effective_chat.id
            st = self._get_state(chat_id)
            try:
                doc_id = int(parts[2])
            except Exception:
                await q.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
                return
            if doc_id in st.selected_doc_ids:
                st.selected_doc_ids.remove(doc_id)
            else:
                st.selected_doc_ids.append(doc_id)
            await q.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

    async def cmd_dialogs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ¬´–¥–∏–∞–ª–æ–≥–æ–≤¬ª: –≤ –ø–∞–º—è—Ç–∏ —É –Ω–∞—Å –æ–¥–∏–Ω, –ø–æ—ç—Ç–æ–º—É
        –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π title –∏ –¥–∞—ë–º —É–¥–∞–ª–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.
        –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ë–î —Å–æ —Å–ø–∏—Å–∫–æ–º, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–∞ SQL.
        """
        chat_id = update.effective_chat.id
        st = self._get_state(chat_id)
        rows = [
            [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="dlg:open:current")],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="dlg:del:current")],
        ]
        await update.message.reply_text(f"–î–∏–∞–ª–æ–≥–∏ (—Ç–µ–∫—É—â–∏–π: {st.title})", reply_markup=InlineKeyboardMarkup(rows))

    async def on_dialog_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        _, action, ident = q.data.split(":", 3)
        chat_id = update.effective_chat.id

        if action == "open":
            # –£ –Ω–∞—Å –µ–¥–∏–Ω—ã–π —Ç–µ–∫—É—â–∏–π, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º
            st = self._get_state(chat_id)
            await q.edit_message_text(f"–û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥: {st.title}")
            return

        if action == "del":
            # –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.state.pop(chat_id, None)
            await q.edit_message_text("–î–∏–∞–ª–æ–≥ —É–¥–∞–ª—ë–Ω. –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π.")
            return

    async def cmd_del(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        self.state.pop(chat_id, None)
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ —É–¥–∞–ª—ë–Ω. –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π.")

    async def cmd_img(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /img <–æ–ø–∏—Å–∞–Ω–∏–µ>")
            return
        prompt = " ".join(context.args)
        chat_id = update.effective_chat.id

        await self._typing(update, context, 0.5)
        try:
            res = self.openai.generate_image(prompt)
            bio = io.BytesIO(res.image_bytes)
            bio.name = "image.png"
            bio.seek(0)
            cap = f"üñºÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n{res.final_prompt}\n\n–ú–æ–¥–µ–ª—å: {res.model_used}"
            await update.message.reply_photo(photo=InputFile(bio), caption=cap)
        except Exception as e:
            logger.error("Image generation failed: %s", e, exc_info=True)
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    async def cmd_web(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /web <–∑–∞–ø—Ä–æ—Å>")
            return
        query = " ".join(context.args)
        await self._typing(update, context, 0.5)
        try:
            results = self.openai.web_search(query, limit=3)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤–µ–±‚Äë–ø–æ–∏—Å–∫–∞: {e}")
            return
        if not results:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.")
            return
        lines = [f"üîé –ü–æ–∏—Å–∫: {query}", ""]
        for i, r in enumerate(results, 1):
            title = r.get("title") or r.get("url")
            url = r.get("url")
            snippet = r.get("snippet", "")
            lines.append(f"{i}. {title}\n{url}")
            if snippet:
                lines.append(snippet)
            lines.append("")
        await update.message.reply_text("\n".join(lines).strip())

    # --------------- –°–æ–æ–±—â–µ–Ω–∏—è ----------------

    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        st = self._get_state(chat_id)

        await self._typing(update, context, 0.5)
        # –ë–ó-—Å–Ω–∏–ø–ø–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º (—É–ø—Ä–æ—â—ë–Ω–Ω–æ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è)
        kb_snip = None
        if st.kb_enabled and st.selected_doc_ids:
            kb_snip = self._kb_snippets_from_ids(st.selected_doc_ids)

        try:
            reply = self.openai.chat(chat_id, update.message.text, kb_snip)
        except Exception as e:
            logger.error("Chat failed: %s", e, exc_info=True)
            reply = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}"

        await update.message.reply_text(reply)

    async def on_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        st = self._get_state(chat_id)

        file_id = update.message.voice.file_id
        f = await context.bot.get_file(file_id)
        bx = httpx.get(f.file_path, timeout=60.0)
        bx.raise_for_status()

        await self._typing(update, context, 0.5)
        try:
            text = self.openai.transcribe(bx.content, filename_hint="audio.ogg")
            await update.message.reply_text(f"üéôÔ∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return

        # –∑–∞—Ç–µ–º ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        kb_snip = None
        if st.kb_enabled and st.selected_doc_ids:
            kb_snip = self._kb_snippets_from_ids(st.selected_doc_ids)

        try:
            reply = self.openai.chat(chat_id, text, kb_snip)
        except Exception as e:
            reply = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}"

        await update.message.reply_text(reply)

    async def on_file_or_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ ‚Äî **–Ω–µ** –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤ –ë–ó.
        –ö–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /kb –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        """
        msg = update.message
        if msg.document:
            name = msg.document.file_name or "–¥–æ–∫—É–º–µ–Ω—Ç"
            size = msg.document.file_size or 0
            await msg.reply_text(
                f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {name} ({size} –±–∞–π—Ç).\n"
                f"–Ø –Ω–µ –¥–æ–±–∞–≤–ª—è—é —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ë–ó.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /kb –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
            )
            return
        if msg.photo:
            await msg.reply_text(
                "–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É. "
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /kb –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏."
            )
            return
