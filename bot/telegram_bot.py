# bot/telegram_bot.py
from __future__ import annotations

import asyncio
import io
import logging
import time
from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional, Tuple

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    MenuButtonCommands,
    BotCommandScopeDefault,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllChatAdministrators,
    InputFile,
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

logger = logging.getLogger(__name__)

# --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π (KB) ---
KB_AVAILABLE = True
try:
    from bot.knowledge_base.indexer import KnowledgeBaseIndexer
    from bot.knowledge_base.retriever import KnowledgeBaseRetriever
    from bot.knowledge_base.context_manager import ContextManager
    from bot.knowledge_base.service import KBService, KBDocument, KBSyncResult
except Exception as e:
    KB_AVAILABLE = False
    logger.warning("KB unavailable: %s", e)

# --- –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (in-memory) ---
@dataclass
class DialogState:
    dialog_id: int
    title: str = "–î–∏–∞–ª–æ–≥"
    created_at_ts: float = field(default_factory=lambda: time.time())
    updated_at_ts: float = field(default_factory=lambda: time.time())
    model: Optional[str] = None
    style: str = "Pro"
    # –ë–ó - —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü—É—Å—Ç–æ => RAG –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    kb_selected_docs: List[int | str] = field(default_factory=list)

class ChatGPTTelegramBot:
    def __init__(self, openai, settings):
        self.openai = openai
        self.settings = settings

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
        self.admin_ids = set(getattr(settings, "admin_user_ids", []) or getattr(settings, "admin_set", []) or [])
        self.allowed_ids = set(getattr(settings, "allowed_user_ids", []) or getattr(settings, "allowed_set", []) or [])

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–∏–≤–Ω–∞—è in‚Äëmemory —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        self._dialogs_by_user: Dict[int, Dict[int, DialogState]] = {}
        self._current_dialog_by_user: Dict[int, int] = {}
        self._next_dialog_id: int = 1

        # –ë–ó
        self.kb_service: Optional[KBService] = None
        if KB_AVAILABLE:
            try:
                indexer = KnowledgeBaseIndexer(settings)
                retriever = KnowledgeBaseRetriever(settings)
                ctx_mgr = ContextManager(settings)
                self.kb_service = KBService(indexer, retriever, ctx_mgr)
            except Exception as e:
                logger.exception("KB init failed: %s", e)

        # –ü—É–ª ¬´–Ω–æ–≤—ã—Ö¬ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–ø–æ–¥—Å–≤–µ—Ç–∫–∞ üÜï –Ω–∞ 60 —Å–µ–∫. –ø–æ—Å–ª–µ —Å–∏–Ω–∫–∞)
        self._kb_last_added: Dict[int | str, float] = {}

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è encrypted –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: user_id -> {doc_id, tries}
        self._kb_pwd_wait: Dict[int, Dict[str, Any]] = {}

    # ========== –ö–æ–º–∞–Ω–¥—ã/–º–µ–Ω—é ==========
    def _build_commands(self) -> List[BotCommand]:
        # –ù–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É –≤—Å–µ—Ö (–º—ã —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ –ª–∏—à–Ω–∏–µ –≤ post_init)
        return [
            BotCommand("start", "–∑–∞–ø—É—Å–∫ –∏ –º–µ–Ω—é"),
            BotCommand("help", "–ø–æ–º–æ—â—å"),
            BotCommand("reset", "—Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
            BotCommand("stats", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("kb", "–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–≤—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"),
            BotCommand("model", "–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI"),
            BotCommand("mode", "—Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤"),
            BotCommand("dialogs", "—Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"),
            BotCommand("img", "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
            BotCommand("web", "–≤–µ–±‚Äë–ø–æ–∏—Å–∫"),
        ]

    async def setup_commands(self, app: Application):
        """
        –í–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ scope. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Application.builder().post_init(...)
        """
        commands = self._build_commands()
        try:
            await app.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        except Exception:
            pass

        scopes = [
            BotCommandScopeDefault(),
            BotCommandScopeAllPrivateChats(),
            BotCommandScopeAllChatAdministrators(),
        ]
        # –°–Ω–∞—á–∞–ª–∞ —Å–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—ã–µ ¬´–∑–∞–≤–∏—Å—à–∏–µ¬ª –∫–æ–º–∞–Ω–¥—ã –≤ –∫–∞–∂–¥–æ–º scope
        for scope in scopes:
            try:
                await app.bot.delete_my_commands(scope=scope)
            except Exception:
                pass
            await app.bot.set_my_commands(commands=commands, scope=scope)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (global scopes)")

    # ========== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ==========
    def install(self, app: Application) -> None:
        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.cmd_start))
        app.add_handler(CommandHandler("help", self.cmd_help))
        app.add_handler(CommandHandler("reset", self.cmd_reset))
        app.add_handler(CommandHandler("stats", self.cmd_stats))
        app.add_handler(CommandHandler("model", self.cmd_model))
        app.add_handler(CommandHandler("mode", self.cmd_mode))
        app.add_handler(CommandHandler("dialogs", self.cmd_dialogs))
        app.add_handler(CommandHandler("img", self.cmd_img))
        app.add_handler(CommandHandler("web", self.cmd_web))
        # KB
        app.add_handler(CommandHandler("kb", self.cmd_kb))

        # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        app.add_handler(MessageHandler(filters.VOICE, self.on_voice))
        app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, self.on_file_or_photo))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text))

        # Inline callbacks
        app.add_handler(CallbackQueryHandler(self.on_callback))

    # ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ==========
    def _ensure_dialog(self, user_id: int) -> DialogState:
        user_dialogs = self._dialogs_by_user.setdefault(user_id, {})
        if user_id not in self._current_dialog_by_user:
            dlg_id = self._next_dialog_id
            self._next_dialog_id += 1
            st = DialogState(dialog_id=dlg_id)
            user_dialogs[dlg_id] = st
            self._current_dialog_by_user[user_id] = dlg_id
        return user_dialogs[self._current_dialog_by_user[user_id]]

    def _list_dialogs(self, user_id: int) -> List[DialogState]:
        return list(self._dialogs_by_user.get(user_id, {}).values())

    async def _send_typing(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        try:
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        except Exception:
            pass

    def _is_admin(self, user_id: int) -> bool:
        return user_id in self.admin_ids

    # ========== –†–µ–Ω–¥–µ—Ä KB ==========
    def _kb_is_new(self, doc_id: int | str) -> bool:
        ts = self._kb_last_added.get(doc_id)
        return bool(ts and (time.time() - ts) < 60.0)

    def _kb_render_page(self, docs: List[KBDocument], page: int, total_pages: int, st: DialogState) -> InlineKeyboardMarkup:
        selected = set(st.kb_selected_docs)
        rows: List[List[InlineKeyboardButton]] = []
        for d in docs:
            check = "‚òë" if d.id in selected else "‚òê"
            lock = " üîê" if d.encrypted else ""
            new = " üÜï" if self._kb_is_new(d.id) else ""
            rows.append([
                InlineKeyboardButton(f"{check} {d.title}{lock}{new}", callback_data=f"kb:toggle:{d.id}")
            ])
        nav: List[InlineKeyboardButton] = []
        if page > 1:
            nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"kb:page:{page-1}"))
        nav.append(InlineKeyboardButton(f"–°—Ç—Ä. {page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"kb:page:{page+1}"))
        if nav:
            rows.append(nav)
        # –¥–µ–π—Å—Ç–≤–∏—è
        rows.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="kb:clear"),
                     InlineKeyboardButton("üìÑ –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ", callback_data="kb:selected")])
        return InlineKeyboardMarkup(rows)

    # ========== –ö–æ–º–∞–Ω–¥—ã ==========
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self._ensure_dialog(update.effective_user.id)
        await update.effective_message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n–ö–æ–º–∞–Ω–¥—ã: /help, /reset, /stats, /kb, /model, /mode, /dialogs, /img, /web"
        )

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (
            "/reset ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥)\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/kb ‚Äî –≤—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –ë–ó (RAG –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—å –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç)\n"
            "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI\n"
            "/mode ‚Äî —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤\n"
            "/dialogs ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (–æ—Ç–∫—Ä—ã—Ç—å/—É–¥–∞–ª–∏—Ç—å)\n"
            "/img ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "/web ‚Äî –≤–µ–±‚Äë–ø–æ–∏—Å–∫\n"
        )
        await update.effective_message.reply_text(text)

    async def cmd_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dlg_id = self._next_dialog_id
        self._next_dialog_id += 1
        self._dialogs_by_user.setdefault(user_id, {})[dlg_id] = DialogState(dialog_id=dlg_id)
        self._current_dialog_by_user[user_id] = dlg_id
        await update.effective_message.reply_text("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        kb_list = ", ".join(map(str, st.kb_selected_docs)) if st.kb_selected_docs else "‚Äî"
        text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –î–∏–∞–ª–æ–≥: {st.title}\n"
            f"- –ú–æ–¥–µ–ª—å: {st.model or getattr(self.settings, 'openai_model', 'gpt-4o')}\n"
            f"- –°—Ç–∏–ª—å: {st.style}\n"
            f"- –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {len(st.kb_selected_docs)}\n"
            f"- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {kb_list}"
        )
        await update.effective_message.reply_text(text)

    async def cmd_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        try:
            models = self.openai.list_models_for_menu()
        except Exception as e:
            logger.exception("list_models failed: %s", e)
            await update.effective_message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
            return

        rows = []
        current = st.model or getattr(self.settings, "openai_model", None)
        for name in models:
            mark = "‚úÖ " if name == current else ""
            rows.append([InlineKeyboardButton(f"{mark}{name}", callback_data=f"model:{name}")])
        kb = InlineKeyboardMarkup(rows)
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=kb)

    async def cmd_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        modes = ["Pro", "Expert", "User", "CEO"]
        rows = []
        for m in modes:
            mark = "‚úÖ " if st.style == m else ""
            rows.append([InlineKeyboardButton(f"{mark}{m}", callback_data=f"mode:{m}")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_dialogs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dialogs = self._list_dialogs(user_id)
        current_id = self._current_dialog_by_user.get(user_id)
        if not dialogs:
            await update.effective_message.reply_text("–î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ /reset –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")
            return

        rows = []
        for d in dialogs:
            title = d.title or f"–î–∏–∞–ª–æ–≥ #{d.dialog_id}"
            prefix = "‚≠ê " if d.dialog_id == current_id else ""
            rows.append([
                InlineKeyboardButton(f"{prefix}{title}", callback_data=f"open:{d.dialog_id}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"del:{d.dialog_id}"),
            ])
        rows.append([InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data="newdlg")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_img(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /img <–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>")
            return
        prompt = " ".join(context.args)
        await self._send_typing(update.effective_chat.id, context)
        try:
            img_bytes, used_prompt = await asyncio.to_thread(self.openai.generate_image, prompt, None)
            await update.effective_message.reply_photo(
                photo=InputFile(io.BytesIO(img_bytes), filename="image.png"),
                caption=f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ prompt:\n{used_prompt}"
            )
        except Exception as e:
            logger.exception("Image generation failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    async def cmd_web(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /web <–∑–∞–ø—Ä–æ—Å>")
            return
        query = " ".join(context.args)
        await self._send_typing(update.effective_chat.id, context)
        try:
            answer, sources = await asyncio.to_thread(self.openai.web_answer, query)
            if sources:
                src_text = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(f"‚Ä¢ {u}" for u in sources)
            else:
                src_text = "\n\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —è–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
            await update.effective_message.reply_text(answer + src_text)
        except Exception as e:
            logger.exception("Web search failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≤–µ–±‚Äë–ø–æ–∏—Å–∫–∞: {e}")

    async def cmd_kb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        st = self._ensure_dialog(user_id)

        if not self.kb_service:
            await update.effective_message.reply_text("–ú–æ–¥—É–ª—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.")
            return

        # –ê–¥–º–∏–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        if self._is_admin(user_id):
            msg = await update.effective_message.reply_text("‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π‚Ä¶")
            try:
                res = await asyncio.to_thread(self.kb_service.sync)
                # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ¬´–Ω–æ–≤—ã–µ¬ª
                now = time.time()
                for doc_id in res.added_ids:
                    self._kb_last_added[doc_id] = now
                header = (
                    "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                    f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {res.added}\n"
                    f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {res.updated}\n"
                    f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ: {res.deleted}\n"
                    f"‚Ä¢ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {res.unchanged}"
                )
            except Exception as e:
                logger.exception("KB sync failed: %s", e)
                await msg.edit_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                return

            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1)
            try:
                docs, total_pages = await asyncio.to_thread(self.kb_service.list_docs, 1, 10, None)
            except Exception as e:
                await msg.edit_text(header + f"\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
                return
            await msg.edit_text(
                header + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:",
                reply_markup=self._kb_render_page(docs, 1, total_pages, st)
            )
        else:
            # –ù–µ –∞–¥–º–∏–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫
            try:
                docs, total_pages = await asyncio.to_thread(self.kb_service.list_docs, 1, 10, None)
            except Exception as e:
                await update.effective_message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
                return
            await update.effective_message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:",
                reply_markup=self._kb_render_page(docs, 1, total_pages, st)
            )

    # ========== –°–æ–æ–±—â–µ–Ω–∏—è ==========
    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        st = self._ensure_dialog(user_id)
        user_text = update.effective_message.text

        # –ï—Å–ª–∏ –∂–¥—ë–º –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Äì –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º
        if user_id in self._kb_pwd_wait:
            info = self._kb_pwd_wait[user_id]
            doc_id = info["doc_id"]
            tries = info.get("tries", 0)
            try:
                ok = await asyncio.to_thread(self.kb_service.index_encrypted_with_password, doc_id, user_text)
            except Exception as e:
                ok = False
            if ok:
                # –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≤—ã–±–æ—Ä
                if doc_id not in st.kb_selected_docs:
                    st.kb_selected_docs.append(doc_id)
                del self._kb_pwd_wait[user_id]
                await update.effective_message.reply_text("üîì –î–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
            else:
                tries += 1
                if tries >= 3:
                    del self._kb_pwd_wait[user_id]
                    await update.effective_message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Ç–º–µ–Ω–∞.")
                else:
                    info["tries"] = tries
                    await update.effective_message.reply_text(f"–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3-tries}")
            return

        await self._send_typing(update.effective_chat.id, context)

        # RAG, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        kb_ctx = None
        if self.kb_service and st.kb_selected_docs:
            try:
                chunks = await asyncio.to_thread(
                    self.kb_service.retrieve,
                    user_text,
                    st.kb_selected_docs,
                    int(getattr(self.settings, "rag_top_k", 8)),
                )
                kb_ctx = self.kb_service.build_context(chunks)
            except Exception as e:
                logger.warning("KB retrieve failed: %s", e)

        try:
            reply = await asyncio.to_thread(
                self.openai.chat,
                user_text,
                st.model or getattr(self.settings, "openai_model", None),
                getattr(self.settings, "openai_temperature", 0.2),
                st.style,
                kb_ctx,
            )
            await update.effective_message.reply_text(reply)
        except Exception as e:
            logger.exception("text chat failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")

    async def on_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        file = await update.effective_message.voice.get_file()
        file_bytes = await file.download_as_bytearray()

        await self._send_typing(update.effective_chat.id, context)
        try:
            transcript = await asyncio.to_thread(self.openai.transcribe_audio, bytes(file_bytes))
        except Exception as e:
            logger.exception("transcribe failed: %s", e)
            await update.effective_message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ: {e}")
            return

        kb_ctx = None
        if self.kb_service and st.kb_selected_docs:
            try:
                chunks = await asyncio.to_thread(
                    self.kb_service.retrieve,
                    transcript,
                    st.kb_selected_docs,
                    int(getattr(self.settings, "rag_top_k", 8)),
                )
                kb_ctx = self.kb_service.build_context(chunks)
            except Exception as e:
                logger.warning("KB retrieve failed: %s", e)

        try:
            reply = await asyncio.to_thread(
                self.openai.chat,
                transcript,
                st.model or getattr(self.settings, "openai_model", None),
                getattr(self.settings, "openai_temperature", 0.2),
                st.style,
                kb_ctx,
            )
            await update.effective_message.reply_text(f"üéôÔ∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {transcript}\n\n–û—Ç–≤–µ—Ç:\n{reply}")
        except Exception as e:
            logger.exception("voice chat failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")

    async def on_file_or_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞/—Ñ–æ—Ç–æ ‚Äî —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ–ø–∏—Å—ã–≤–∞–µ–º (–ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).
        """
        message = update.effective_message
        await self._send_typing(update.effective_chat.id, context)

        try:
            if message.document:
                file = await message.document.get_file()
                content = await file.download_as_bytearray()
                summary = await asyncio.to_thread(self.openai.describe_file, bytes(content), message.document.file_name)
                await message.reply_text(f"üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {message.document.file_name}\n–ê–Ω–∞–ª–∏–∑:\n{summary}")
            elif message.photo:
                file = await message.photo[-1].get_file()
                content = await file.download_as_bytearray()
                summary = await asyncio.to_thread(self.openai.describe_image, bytes(content))
                await message.reply_text(f"üñºÔ∏è –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ê–Ω–∞–ª–∏–∑:\n{summary}")
        except Exception as e:
            logger.exception("file/photo analyze failed: %s", e)
            await message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ: {e}")

    # ========== Inline callbacks ==========
    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if not query:
            return
        await query.answer()

        data = query.data or ""
        user_id = update.effective_user.id
        st = self._ensure_dialog(user_id)

        # model:<name>
        if data.startswith("model:"):
            name = data.split(":", 1)[1]
            st.model = name
            await query.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {name}")
            return

        # mode:<name>
        if data.startswith("mode:"):
            name = data.split(":", 1)[1]
            st.style = name
            await query.edit_message_text(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {name}")
            return

        # dialogs
        if data == "newdlg":
            dlg_id = self._next_dialog_id
            self._next_dialog_id += 1
            self._dialogs_by_user.setdefault(user_id, {})[dlg_id] = DialogState(dialog_id=dlg_id)
            self._current_dialog_by_user[user_id] = dlg_id
            await query.edit_message_text("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
            return

        if data.startswith("open:"):
            dlg_id = int(data.split(":", 1)[1])
            if dlg_id in self._dialogs_by_user.get(user_id, {}):
                self._current_dialog_by_user[user_id] = dlg_id
                await query.edit_message_text(f"–û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥ #{dlg_id}.")
            else:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if data.startswith("del:"):
            dlg_id = int(data.split(":", 1)[1])
            if dlg_id in self._dialogs_by_user.get(user_id, {}):
                del self._dialogs_by_user[user_id][dlg_id]
                if self._current_dialog_by_user.get(user_id) == dlg_id:
                    rest = list(self._dialogs_by_user.get(user_id, {}).keys())
                    self._current_dialog_by_user[user_id] = rest[0] if rest else None
                await query.edit_message_text(f"–î–∏–∞–ª–æ–≥ #{dlg_id} —É–¥–∞–ª–µ–Ω.")
            else:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # ==== KB callbacks ====
        if data.startswith("kb:page:"):
            if not self.kb_service:
                return
            page = int(data.split(":", 2)[2])
            docs, total_pages = await asyncio.to_thread(self.kb_service.list_docs, page, 10, None)
            await query.edit_message_reply_markup(
                reply_markup=self._kb_render_page(docs, page, total_pages, st)
            )
            return

        if data == "kb:clear":
            st.kb_selected_docs.clear()
            # –æ–±–Ω–æ–≤–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–±–µ—Ä—ë–º 1)
            docs, total_pages = await asyncio.to_thread(self.kb_service.list_docs, 1, 10, None)
            await query.edit_message_reply_markup(
                reply_markup=self._kb_render_page(docs, 1, total_pages, st)
            )
            return

        if data == "kb:selected":
            if not st.kb_selected_docs:
                await query.edit_message_text("–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
                return
            lst = "\n".join(f"‚Ä¢ {d}" for d in st.kb_selected_docs)
            await query.edit_message_text(f"–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:\n{lst}")
            return

        if data.startswith("kb:toggle:"):
            if not self.kb_service:
                return
            doc_id = data.split(":", 2)[2]
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
            try:
                enc = await asyncio.to_thread(self.kb_service.is_encrypted, doc_id)
            except Exception:
                enc = False
            if doc_id in st.kb_selected_docs:
                st.kb_selected_docs.remove(doc_id)
            else:
                if enc:
                    self._kb_pwd_wait[user_id] = {"doc_id": doc_id, "tries": 0}
                    await query.edit_message_text("üîê –î–æ–∫—É–º–µ–Ω—Ç –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (3 –ø–æ–ø—ã—Ç–∫–∏):")
                    return
                st.kb_selected_docs.append(doc_id)

            # –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Ç–∞—Ç—å –µ—ë –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º 1)
            page = 1
            try:
                # –•–∏—Ç—Ä—ã–π, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±: –ø—Ä–æ—Å—Ç–æ —Å–Ω–æ–≤–∞ –æ—Ç—Ä–∏—Å—É–µ–º 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É
                docs, total_pages = await asyncio.to_thread(self.kb_service.list_docs, page, 10, None)
                await query.edit_message_reply_markup(
                    reply_markup=self._kb_render_page(docs, page, total_pages, st)
                )
            except Exception as e:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            return
