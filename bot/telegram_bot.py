from __future__ import annotations

import asyncio
import logging
import time
from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional, Tuple

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    MenuButtonCommands,
    BotCommandScopeDefault,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllChatAdministrators,
    InputFile,
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)
logging.getLogger("bot.knowledge_base.retriever").setLevel(logging.DEBUG)
logging.getLogger("bot.knowledge_base.indexer").setLevel(logging.DEBUG)
# --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π (KB) ---
KB_AVAILABLE = True
try:
    from bot.knowledge_base.indexer import KnowledgeBaseIndexer
    from bot.knowledge_base.retriever import KnowledgeBaseRetriever
except ImportError as e:
    KB_AVAILABLE = False
    logger.warning("KB unavailable (import): %s", e)


# --- –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏ ---
@dataclass
class DialogState:
    dialog_id: int
    title: str = "–î–∏–∞–ª–æ–≥"
    created_at_ts: float = 0.0
    updated_at_ts: float = 0.0
    model: Optional[str] = None
    style: str = "Pro"

    # KB
    kb_selected_docs: List[str] = field(default_factory=list)
    # –ü–∞—Ä–æ–ª–∏ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –≤ —Ä–∞–º–∫–∞—Ö –°–ï–°–°–ò–ò: disk:/... -> password
    kb_passwords: Dict[str, str] = field(default_factory=dict)
    # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥ ¬´–∂–¥—ë–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è¬ª (–∏–Ω–¥–µ–∫—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–ª–∞–≤—ã)
    kb_await_pwd_for_path: Optional[str] = None


class ChatGPTTelegramBot:
    def __init__(self, openai, settings):
        self.openai = openai
        self.settings = settings

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
        self.admin_ids = set(getattr(settings, "admin_user_ids", []) or getattr(settings, "admin_set", []) or [])
        self.allowed_ids = set(getattr(settings, "allowed_user_ids", []) or getattr(settings, "allowed_set", []) or [])

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._dialogs_by_user: Dict[int, Dict[int, DialogState]] = {}
        self._current_dialog_by_user: Dict[int, int] = {}
        self._next_dialog_id: int = 1

        # KB
        self.kb_indexer: Optional[KnowledgeBaseIndexer] = None
        self.kb_retriever: Optional[KnowledgeBaseRetriever] = None
        if KB_AVAILABLE:
            try:
                self.kb_indexer = KnowledgeBaseIndexer(settings)
                self.kb_retriever = KnowledgeBaseRetriever(settings)
            except Exception as e:
                logger.exception("KB init failed: %s", e)

    # ========= –ö–æ–º–∞–Ω–¥—ã/–º–µ–Ω—é =========
    def _build_commands(self) -> List[BotCommand]:
        return [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –∏ –º–µ–Ω—é"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("reset", "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("kb", "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"),
            BotCommand("model", "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"),
            BotCommand("mode", "–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤"),
            BotCommand("dialogs", "–°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"),
            BotCommand("img", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
            BotCommand("web", "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"),
            BotCommand("kb_diag", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–ó"),
        ]

    async def setup_commands(self, app: Application) -> None:
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤–æ –≤—Å–µ—Ö scope
        commands = self._build_commands()
        try:
            await app.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        except Exception:
            pass
        scopes = [BotCommandScopeDefault(), BotCommandScopeAllPrivateChats(), BotCommandScopeAllChatAdministrators()]
        for scope in scopes:
            try:
                await app.bot.delete_my_commands(scope=scope)
            except Exception:
                pass
            await app.bot.set_my_commands(commands=commands, scope=scope)

        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (global scopes)")

    # ========= –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ =========
    def install(self, app: Application) -> None:
        app.add_handler(CommandHandler("start", self.cmd_start))
        app.add_handler(CommandHandler("help", self.cmd_help))
        app.add_handler(CommandHandler("reset", self.cmd_reset))
        app.add_handler(CommandHandler("stats", self.cmd_stats))
        app.add_handler(CommandHandler("model", self.cmd_model))
        app.add_handler(CommandHandler("mode", self.cmd_mode))
        app.add_handler(CommandHandler("dialogs", self.cmd_dialogs))
        app.add_handler(CommandHandler("img", self.cmd_img))
        app.add_handler(CommandHandler("web", self.cmd_web))
        app.add_handler(CommandHandler("kb", self.cmd_kb))
        app.add_handler(CommandHandler("kb_diag", self.cmd_kb_diag))

        # –°–æ–æ–±—â–µ–Ω–∏—è
        app.add_handler(MessageHandler(filters.VOICE, self.on_voice))
        app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, self.on_file_or_photo))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text))

        # Inline callbacks
        app.add_handler(CallbackQueryHandler(self.on_callback))

    # ========= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =========
    def _ensure_dialog(self, user_id: int) -> DialogState:
        user_dialogs = self._dialogs_by_user.setdefault(user_id, {})
        if user_id not in self._current_dialog_by_user:
            dlg_id = self._next_dialog_id
            self._next_dialog_id += 1
            st = DialogState(dialog_id=dlg_id, created_at_ts=time.time())
            user_dialogs[dlg_id] = st
            self._current_dialog_by_user[user_id] = dlg_id
        return user_dialogs[self._current_dialog_by_user[user_id]]

    def _list_dialogs(self, user_id: int) -> List[DialogState]:
        return list(self._dialogs_by_user.get(user_id, {}).values())

    async def _send_typing(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        try:
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        except Exception:
            pass

    # ========= –ö–æ–º–∞–Ω–¥—ã =========
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self._ensure_dialog(update.effective_user.id)
        await update.effective_message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n–ö–æ–º–∞–Ω–¥—ã: /help, /reset, /stats, /kb, /model, /mode, /dialogs, /img, /web"
        )

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (
            "/reset ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥)\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/kb ‚Äî –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–≤—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–∞—Ä–æ–ª–∏ –∫ PDF)\n"
            "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏\n"
            "/mode ‚Äî —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤\n"
            "/dialogs ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤\n"
            "/img ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "/web ‚Äî –≤–µ–±-–ø–æ–∏—Å–∫\n"
            "/kb_diag ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–ó\n"
        )
        await update.effective_message.reply_text(text)

    async def cmd_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dlg_id = self._next_dialog_id
        self._next_dialog_id += 1
        self._dialogs_by_user.setdefault(user_id, {})[dlg_id] = DialogState(dialog_id=dlg_id, created_at_ts=time.time())
        self._current_dialog_by_user[user_id] = dlg_id
        await update.effective_message.reply_text("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        kb_list = ", ".join(st.kb_selected_docs) if st.kb_selected_docs else "‚Äî"
        text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –î–∏–∞–ª–æ–≥: {st.title}\n"
            f"- –ú–æ–¥–µ–ª—å: {st.model or getattr(self.settings, 'openai_model', 'gpt-4o')}\n"
            f"- –°—Ç–∏–ª—å: {st.style}\n"
            f"- –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: {len(st.kb_selected_docs)}\n"
            f"- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {kb_list}"
        )
        await update.effective_message.reply_text(text)

    async def cmd_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        try:
            models = self.openai.list_models_for_menu()
        except Exception as e:
            logger.exception("list_models failed: %s", e)
            await update.effective_message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
            return

        rows = []
        current = st.model or getattr(self.settings, "openai_model", None)
        for name in models:
            mark = "‚úÖ " if name == current else ""
            rows.append([InlineKeyboardButton(f"{mark}{name}", callback_data=f"model:{name}")])
        kb = InlineKeyboardMarkup(rows)
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=kb)

    async def cmd_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        modes = ["Pro", "Expert", "User", "CEO"]
        rows = []
        for m in modes:
            mark = "‚úÖ " if st.style == m else ""
            rows.append([InlineKeyboardButton(f"{mark}{m}", callback_data=f"mode:{m}")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_dialogs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dialogs = self._list_dialogs(user_id)
        current_id = self._current_dialog_by_user.get(user_id)
        if not dialogs:
            await update.effective_message.reply_text("–î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ /reset –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")
            return

        rows = []
        for d in dialogs:
            title = d.title or f"–î–∏–∞–ª–æ–≥ #{d.dialog_id}"
            prefix = "‚≠ê " if d.dialog_id == current_id else ""
            rows.append([
                InlineKeyboardButton(f"{prefix}{title}", callback_data=f"open:{d.dialog_id}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"del:{d.dialog_id}"),
            ])
        rows.append([InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data="newdlg")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_img(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /img <–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>")
            return
        prompt = " ".join(context.args)
        await self._send_typing(update.effective_chat.id, context)
        try:
            img_bytes, used_prompt = await asyncio.to_thread(
                self.openai.generate_image, prompt, None
            )
            await update.effective_message.reply_photo(
                photo=InputFile.from_bytes(img_bytes, filename="image.png"),
                caption=f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ prompt:\n{used_prompt}"
            )
        except Exception as e:
            logger.exception("Image generation failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    async def cmd_web(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /web <–∑–∞–ø—Ä–æ—Å>")
            return
        query = " ".join(context.args)
        await self._send_typing(update.effective_chat.id, context)
        try:
            answer, sources = await asyncio.to_thread(self.openai.web_answer, query)
            if sources:
                src_text = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(f"‚Ä¢ {u}" for u in sources)
            else:
                src_text = "\n\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —è–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
            await update.effective_message.reply_text(answer + src_text)
        except Exception as e:
            logger.exception("Web search failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")

    async def cmd_kb_diag(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not (KB_AVAILABLE and self.kb_indexer):
            await update.effective_message.reply_text("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –º–æ–¥—É–ª—å –ë–ó –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        try:
            text = await asyncio.to_thread(self.kb_indexer.diagnose, 200)
        except Exception as e:
            text = f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}"
        await update.effective_message.reply_text(text)

    async def cmd_kb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        if not (KB_AVAILABLE and self.kb_indexer and self.kb_retriever):
            await update.effective_message.reply_text("–ú–æ–¥—É–ª—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.")
            return

        # 1) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        try:
            added, updated, deleted, unchanged = await asyncio.to_thread(self.kb_indexer.sync)
            sync_msg = (
                f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: +{added}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated}, "
                f"—É–¥–∞–ª–µ–Ω–æ {deleted}, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π {unchanged}."
            )
        except Exception as e:
            logger.exception("KB sync failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return

        # 2) –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        try:
            docs = await asyncio.to_thread(self.kb_indexer.list_documents)
        except Exception as e:
            logger.exception("list_documents failed: %s", e)
            await update.effective_message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return

        # 3) –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ (–∏ –∫–Ω–æ–ø–∫–∞ ¬´üîë –ü–∞—Ä–æ–ª—å¬ª)
        rows: List[List[InlineKeyboardButton]] = []
        # –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –ø—É—Ç–∏ –≤ callback_data
        path_by_idx: Dict[int, str] = {}
        for i, d in enumerate(docs):
            path_by_idx[i] = d.path
            mark = "‚úÖ " if d.path in st.kb_selected_docs else "‚òê "
            rows.append([
                InlineKeyboardButton(f"{mark}{d.path.split('/')[-1]}", callback_data=f"kb:toggle:{i}"),
            ])
        # –°–µ—Ä–≤–∏—Å–Ω—ã–µ
        rows.append([
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="kb:save"),
            InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é", callback_data="kb:resync"),
        ])
        # –ö–Ω–æ–ø–∫–∏ ¬´üîë –ü–∞—Ä–æ–ª—å –∫ —Ñ–∞–π–ª—É ‚Ä¶¬ª –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ —Ç–∞–ø–∞ –ø–æ ¬´–∫–ª—é—á—É¬ª –ø–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å—å—é.
        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ü–∞—Ä–æ–ª—å¬ª –¥–ª—è —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:
        for i, d in enumerate(docs):
            if d.path in st.kb_selected_docs:
                rows.append([
                    InlineKeyboardButton(f"üîë –ü–∞—Ä–æ–ª—å –∫: {d.path.split('/')[-1]}", callback_data=f"kb:pwd:{i}")
                ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞ 2 –º–∏–Ω—É—Ç—ã)
        context.chat_data["kb_idx_map"] = {"ts": time.time(), "paths": path_by_idx}

        await update.effective_message.reply_text(
            sync_msg + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(rows),
        )

    # ========= –°–æ–æ–±—â–µ–Ω–∏—è =========
    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        user_text = update.effective_message.text or ""

        # –ë–ª–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∫ PDF (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω ¬´–æ–∂–∏–¥–∞–µ–º—ã–π¬ª –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
        if st.kb_await_pwd_for_path:
            pwd = user_text.strip()
            target = st.kb_await_pwd_for_path
            st.kb_passwords[target] = pwd
            st.kb_await_pwd_for_path = None
            await update.effective_message.reply_text(f"üîë –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è: {target.split('/')[-1]}")
            return

        await self._send_typing(update.effective_chat.id, context)

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ KB-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å)
        # ...
        kb_ctx = None
        if KB_AVAILABLE and self.kb_retriever and st.kb_selected_docs:
            try:
                logger.debug(
                    "KB call: docs=%s, passwords=%s",
                    st.kb_selected_docs,
                    {k: "***" for k in st.kb_passwords.keys()}  # –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–∞–º–∏ –ø–∞—Ä–æ–ª–∏
                )
                chunks = await asyncio.to_thread(
                    self.kb_retriever.retrieve,
                    user_text,
                    list(st.kb_selected_docs),
                    st.kb_passwords
                )
                if chunks:
                    kb_ctx = "\n\n".join(chunks)
                logger.debug("KB result: chunks=%d, ctx_len=%d", len(chunks or []), len(kb_ctx or ""))
            except Exception as e:
                logger.warning("KB retrieve failed: %s", e)

        # –í—ã–∑–æ–≤ OpenAI
        try:
            reply = await asyncio.to_thread(
                self.openai.chat,
                user_text,
                st.model or getattr(self.settings, "openai_model", None),
                getattr(self.settings, "openai_temperature", 0.2),
                st.style,
                kb_ctx,
            )
            await update.effective_message.reply_text(reply)
        except Exception as e:
            logger.exception("text chat failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")

    async def on_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        file = await update.effective_message.voice.get_file()
        file_bytes = await file.download_as_bytearray()

        await self._send_typing(update.effective_chat.id, context)
        try:
            transcript = await asyncio.to_thread(self.openai.transcribe_audio, bytes(file_bytes))
        except Exception as e:
            logger.exception("transcribe failed: %s", e)
            await update.effective_message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ: {e}")
            return

        kb_ctx = None
        if KB_AVAILABLE and self.kb_retriever and st.kb_selected_docs:
            try:
                logger.debug(
                    "KB call: docs=%s, passwords=%s",
                    st.kb_selected_docs,
                    {k: "***" for k in st.kb_passwords.keys()}  # –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–∞–º–∏ –ø–∞—Ä–æ–ª–∏
                )
                chunks = await asyncio.to_thread(
                    self.kb_retriever.retrieve,
                    user_text,
                    list(st.kb_selected_docs),
                    st.kb_passwords
                )
                if chunks:
                    kb_ctx = "\n\n".join(chunks)
                logger.debug("KB result: chunks=%d, ctx_len=%d", len(chunks or []), len(kb_ctx or ""))
            except Exception as e:
                logger.warning("KB retrieve failed: %s", e)

        try:
            reply = await asyncio.to_thread(
                self.openai.chat,
                transcript,
                st.model or getattr(self.settings, "openai_model", None),
                getattr(self.settings, "openai_temperature", 0.2),
                st.style,
                kb_ctx,
            )
            await update.effective_message.reply_text(f"üéôÔ∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {transcript}\n\n–û—Ç–≤–µ—Ç:\n{reply}")
        except Exception as e:
            logger.exception("voice chat failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")

    async def on_file_or_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message = update.effective_message
        await self._send_typing(update.effective_chat.id, context)

        try:
            if message.document:
                file = await message.document.get_file()
                content = await file.download_as_bytearray()
                summary = await asyncio.to_thread(self.openai.describe_file, bytes(content), message.document.file_name)
                await message.reply_text(f"üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {message.document.file_name}\n–ê–Ω–∞–ª–∏–∑:\n{summary}")
            elif message.photo:
                file = await message.photo[-1].get_file()
                content = await file.download_as_bytearray()
                summary = await asyncio.to_thread(self.openai.describe_image, bytes(content))
                await message.reply_text(f"üñºÔ∏è –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ê–Ω–∞–ª–∏–∑:\n{summary}")
        except Exception as e:
            logger.exception("file/photo analyze failed: %s", e)
            await message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ: {e}")

    # ========= Inline callbacks =========
    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if not query:
            return
        await query.answer()

        data = (query.data or "").strip()
        user_id = update.effective_user.id
        st = self._ensure_dialog(user_id)

        # –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–µ–ª—å—é/—Ä–µ–∂–∏–º–æ–º/–¥–∏–∞–ª–æ–≥–∞–º–∏ (–∫–∞–∫ –±—ã–ª–æ)
        if data.startswith("model:"):
            name = data.split(":", 1)[1]
            st.model = name
            await query.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {name}")
            return

        if data.startswith("mode:"):
            name = data.split(":", 1)[1]
            st.style = name
            await query.edit_message_text(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {name}")
            return

        if data == "newdlg":
            dlg_id = self._next_dialog_id
            self._next_dialog_id += 1
            self._dialogs_by_user.setdefault(user_id, {})[dlg_id] = DialogState(dialog_id=dlg_id, created_at_ts=time.time())
            self._current_dialog_by_user[user_id] = dlg_id
            await query.edit_message_text("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
            return

        if data.startswith("open:"):
            dlg_id = int(data.split(":", 1)[1])
            if dlg_id in self._dialogs_by_user.get(user_id, {}):
                self._current_dialog_by_user[user_id] = dlg_id
                await query.edit_message_text(f"–û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥ #{dlg_id}.")
            else:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if data.startswith("del:"):
            dlg_id = int(data.split(":", 1)[1])
            if dlg_id in self._dialogs_by_user.get(user_id, {}):
                del self._dialogs_by_user[user_id][dlg_id]
                if self._current_dialog_by_user.get(user_id) == dlg_id:
                    rest = list(self._dialogs_by_user.get(user_id, {}).keys())
                    self._current_dialog_by_user[user_id] = rest[0] if rest else None
                await query.edit_message_text(f"–î–∏–∞–ª–æ–≥ #{dlg_id} —É–¥–∞–ª–µ–Ω.")
            else:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # ===== KB callbacks =====
        if data == "kb:resync":
            # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º /kb
            await self.cmd_kb(update, context)
            return

        if data == "kb:save":
            await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(st.kb_selected_docs)}. –ë—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–ó.")
            return

        # map –∏–Ω–¥–µ–∫—Å–æ–≤
        kb_idx_map = context.chat_data.get("kb_idx_map") or {}
        paths: Dict[int, str] = (kb_idx_map.get("paths") or {}) if isinstance(kb_idx_map, dict) else {}

        if data.startswith("kb:toggle:"):
            try:
                idx = int(data.split(":", 2)[2])
                path = paths.get(idx)
                if not path:
                    await query.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ (/kb).", show_alert=True)
                    return
                if path in st.kb_selected_docs:
                    st.kb_selected_docs.remove(path)
                    st.kb_passwords.pop(path, None)  # –ø–∞—Ä–æ–ª—å —Å—Ç–∏—Ä–∞–µ–º, –µ—Å–ª–∏ —Å–Ω—è–ª–∏ –≤—ã–±–æ—Ä
                else:
                    st.kb_selected_docs.append(path)
                await query.answer("–û–∫")
            except Exception as e:
                await query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
            return

        if data.startswith("kb:pwd:"):
            try:
                idx = int(data.split(":", 2)[2])
                path = paths.get(idx)
                if not path:
                    await query.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ (/kb).", show_alert=True)
                    return
                if path not in st.kb_selected_docs:
                    await query.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≥–∞–ª–æ—á–∫–æ–π.", show_alert=True)
                    return
                st.kb_await_pwd_for_path = path
                await query.edit_message_text(
                    f"üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ñ–∞–π–ª–∞: {path.split('/')[-1]}\n"
                    f"–û—Ç–≤–µ—Ç—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ø–∞—Ä–æ–ª–µ–º. –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."
                )
            except Exception as e:
                await query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
            return
