# bot/telegram_bot.py
from __future__ import annotations

import asyncio
import io
import logging
import time
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Tuple

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    MenuButtonCommands,
    BotCommandScopeDefault,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllChatAdministrators,
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

logger = logging.getLogger(__name__)

# === –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π (KB) ========================================
# –í–ê–ñ–ù–û: –ù–∏–∫–∞–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ KBDocument ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
KB_AVAILABLE: bool = False
try:
    from bot.knowledge_base.indexer import KnowledgeBaseIndexer  # type: ignore
    from bot.knowledge_base.retriever import KnowledgeBaseRetriever  # type: ignore
    from bot.knowledge_base.context_manager import ContextManager  # type: ignore
    KB_AVAILABLE = True
except Exception as e:
    KB_AVAILABLE = False
    logger.warning("KB unavailable: %s", e)
    KnowledgeBaseIndexer = None  # type: ignore
    KnowledgeBaseRetriever = None  # type: ignore
    ContextManager = None  # type: ignore


# === –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏ =====================================
@dataclass
class DialogState:
    dialog_id: int
    title: str = "–î–∏–∞–ª–æ–≥"
    created_at_ts: float = field(default_factory=lambda: time.time())
    updated_at_ts: float = field(default_factory=lambda: time.time())
    model: Optional[str] = None
    style: str = "Pro"  # Pro | Expert | User | CEO
    kb_selected_docs: List[str] = field(default_factory=list)  # –∏–º–µ–Ω–∞/–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤


class ChatGPTTelegramBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞. –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥/—Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
    - OpenAI (—á–∞—Ç, TTS/STT, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    - KB (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
    """

    def __init__(self, openai, settings):
        self.openai = openai
        self.settings = settings

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
        self.admin_ids = set(getattr(settings, "admin_user_ids", []) or getattr(settings, "admin_set", []) or [])
        self.allowed_ids = set(getattr(settings, "allowed_user_ids", []) or getattr(settings, "allowed_set", []) or [])

        # –î–∏–∞–ª–æ–≥–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø—Ä–æ—Å—Ç–µ–π—à–µ–µ in-memory, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ë–î –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å)
        self._dialogs_by_user: Dict[int, Dict[int, DialogState]] = {}
        self._current_dialog_by_user: Dict[int, int] = {}
        self._next_dialog_id: int = 1

        # KB-–∏–Ω—Å—Ç–∞–Ω—Å—ã –∏ —Ñ–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ KB –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        self.kb_available: bool = KB_AVAILABLE
        self.kb_indexer: Optional[KnowledgeBaseIndexer] = None  # type: ignore
        self.kb_retriever: Optional[KnowledgeBaseRetriever] = None  # type: ignore
        self.kb_ctx: Optional[ContextManager] = None  # type: ignore

        if self.kb_available:
            try:
                self.kb_indexer = KnowledgeBaseIndexer(settings)  # type: ignore
                self.kb_retriever = KnowledgeBaseRetriever(settings)  # type: ignore
                self.kb_ctx = ContextManager(settings)  # type: ignore
            except Exception as e:
                # –ù–µ —Ç—Ä–æ–≥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
                self.kb_available = False
                self.kb_indexer = None
                self.kb_retriever = None
                self.kb_ctx = None
                logger.exception("KB init failed: %s", e)

    # ===================== –ö–æ–º–∞–Ω–¥—ã/–º–µ–Ω—é =====================
    def _build_commands(self) -> List[BotCommand]:
        return [
            BotCommand("help", "–ø–æ–º–æ—â—å"),
            BotCommand("reset", "—Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥)"),
            BotCommand("stats", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("kb", "–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"),
            BotCommand("model", "–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI"),
            BotCommand("mode", "—Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤"),
            BotCommand("dialogs", "–¥–∏–∞–ª–æ–≥–∏ (–æ—Ç–∫—Ä—ã—Ç—å/—É–¥–∞–ª–∏—Ç—å/–Ω–æ–≤—ã–π)"),
            BotCommand("img", "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
            BotCommand("web", "–≤–µ–±-–ø–æ–∏—Å–∫"),
        ]

    async def _apply_bot_commands(self, bot, lang: Optional[str] = None) -> None:
        commands = self._build_commands()

        # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        try:
            await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        except Exception:
            pass

        scopes = [
            BotCommandScopeDefault(),
            BotCommandScopeAllPrivateChats(),
            BotCommandScopeAllChatAdministrators(),
        ]
        for scope in scopes:
            try:
                await bot.delete_my_commands(scope=scope)
            except Exception:
                pass
            await bot.set_my_commands(commands=commands, scope=scope, language_code=lang)

    async def setup_commands(self, app: Application) -> None:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Application.builder().post_init(...)
        –°—Ç–∞–≤–∏—Ç –º–µ–Ω—é/–∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Å–µ—Ö scope.
        """
        lang = getattr(self.settings, "bot_language", None)
        await self._apply_bot_commands(app.bot, lang=None)
        if lang:
            await self._apply_bot_commands(app.bot, lang=lang)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (global scopes)")

    # ===================== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ =====================
    def install(self, app: Application) -> None:
        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.cmd_start))
        app.add_handler(CommandHandler("help", self.cmd_help))
        app.add_handler(CommandHandler("reset", self.cmd_reset))
        app.add_handler(CommandHandler("stats", self.cmd_stats))
        app.add_handler(CommandHandler("kb", self.cmd_kb))
        app.add_handler(CommandHandler("model", self.cmd_model))
        app.add_handler(CommandHandler("mode", self.cmd_mode))
        app.add_handler(CommandHandler("dialogs", self.cmd_dialogs))
        app.add_handler(CommandHandler("img", self.cmd_img))
        app.add_handler(CommandHandler("web", self.cmd_web))

        # –°–æ–æ–±—â–µ–Ω–∏—è
        app.add_handler(MessageHandler(filters.VOICE, self.on_voice))
        app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, self.on_file_or_photo))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text))

        # Inline callbacks
        app.add_handler(CallbackQueryHandler(self.on_callback))

    # ===================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =====================
    def _ensure_dialog(self, user_id: int) -> DialogState:
        user_dialogs = self._dialogs_by_user.setdefault(user_id, {})
        if user_id not in self._current_dialog_by_user or self._current_dialog_by_user[user_id] not in user_dialogs:
            dlg_id = self._next_dialog_id
            self._next_dialog_id += 1
            st = DialogState(dialog_id=dlg_id)
            user_dialogs[dlg_id] = st
            self._current_dialog_by_user[user_id] = dlg_id
        return user_dialogs[self._current_dialog_by_user[user_id]]

    def _list_dialogs(self, user_id: int) -> List[DialogState]:
        return list(self._dialogs_by_user.get(user_id, {}).values())

    async def _send_typing(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        try:
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        except Exception:
            pass

    # ===================== –ö–æ–º–∞–Ω–¥—ã =====================
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self._ensure_dialog(update.effective_user.id)
        await update.effective_message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
            "–ö–æ–º–∞–Ω–¥—ã: /help, /reset, /stats, /kb, /model, /mode, /dialogs, /img, /web"
        )

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (
            "/reset ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥)\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/kb ‚Äî –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π\n"
            "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI\n"
            "/mode ‚Äî —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤\n"
            "/dialogs ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (–æ—Ç–∫—Ä—ã—Ç—å/—É–¥–∞–ª–∏—Ç—å/–Ω–æ–≤—ã–π)\n"
            "/img ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "/web ‚Äî –≤–µ–±-–ø–æ–∏—Å–∫\n"
        )
        await update.effective_message.reply_text(text)

    async def cmd_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dlg_id = self._next_dialog_id
        self._next_dialog_id += 1
        self._dialogs_by_user.setdefault(user_id, {})[dlg_id] = DialogState(dialog_id=dlg_id)
        self._current_dialog_by_user[user_id] = dlg_id
        await update.effective_message.reply_text("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        kb_list = ", ".join(st.kb_selected_docs) if st.kb_selected_docs else "‚Äî"
        text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –î–∏–∞–ª–æ–≥: {st.title}\n"
            f"- –ú–æ–¥–µ–ª—å: {st.model or getattr(self.settings, 'openai_model', 'gpt-4o')}\n"
            f"- –°—Ç–∏–ª—å: {st.style}\n"
            f"- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'–¥–æ—Å—Ç—É–ø–Ω–∞' if self.kb_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n"
            f"- –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: {len(st.kb_selected_docs)}\n"
            f"- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {kb_list}"
        )
        await update.effective_message.reply_text(text)

    async def cmd_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        try:
            models = self.openai.list_models_for_menu()  # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        except Exception as e:
            logger.exception("list_models failed: %s", e)
            await update.effective_message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
            return

        rows = []
        current = st.model or getattr(self.settings, "openai_model", None)
        for name in models:
            mark = "‚úÖ " if name == current else ""
            rows.append([InlineKeyboardButton(f"{mark}{name}", callback_data=f"model:{name}")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        modes = ["Pro", "Expert", "User", "CEO"]
        rows = []
        for m in modes:
            mark = "‚úÖ " if st.style == m else ""
            rows.append([InlineKeyboardButton(f"{mark}{m}", callback_data=f"mode:{m}")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_dialogs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dialogs = self._list_dialogs(user_id)
        current_id = self._current_dialog_by_user.get(user_id)
        if not dialogs:
            await update.effective_message.reply_text("–î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ /reset –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")
            return

        rows = []
        for d in dialogs:
            title = d.title or f"–î–∏–∞–ª–æ–≥ #{d.dialog_id}"
            prefix = "‚≠ê " if d.dialog_id == current_id else ""
            rows.append([
                InlineKeyboardButton(f"{prefix}{title}", callback_data=f"open:{d.dialog_id}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"del:{d.dialog_id}"),
            ])
        rows.append([InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data="newdlg")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_img(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # /img <prompt>
        if not context.args:
            await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /img <–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>")
            return
        prompt = " ".join(context.args)
        await self._send_typing(update.effective_chat.id, context)
        try:
            img_bytes, used_prompt = await asyncio.to_thread(self.openai.generate_image, prompt, None)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ file-like –æ–±—ä–µ–∫—Ç (–±–µ–∑ InputFile.from_bytes, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ PTB 20)
            bio = io.BytesIO(img_bytes)
            bio.name = "image.png"
            await update.effective_message.reply_photo(photo=bio, caption=f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ prompt:\n{used_prompt}")
        except Exception as e:
            logger.exception("Image generation failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    async def cmd_web(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /web <–∑–∞–ø—Ä–æ—Å>")
            return
        query = " ".join(context.args)
        await self._send_typing(update.effective_chat.id, context)
        try:
            answer, sources = await asyncio.to_thread(self.openai.web_answer, query)
            if sources:
                src_text = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(f"‚Ä¢ {u}" for u in sources)
            else:
                src_text = "\n\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —è–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
            await update.effective_message.reply_text(answer + src_text)
        except Exception as e:
            logger.exception("Web search failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")

    async def cmd_kb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.kb_available or not (self.kb_indexer and self.kb_retriever and self.kb_ctx):
            await update.effective_message.reply_text("–ú–æ–¥—É–ª—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.")
            return

        # –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è + –≤—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è list –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Indexer/Retriever)
        rows = [
            [InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="kb:sync")],
            [InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="kb:pick")],
        ]
        await update.effective_message.reply_text("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:", reply_markup=InlineKeyboardMarkup(rows))

    # ===================== –°–æ–æ–±—â–µ–Ω–∏—è =====================
    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        user_text = update.effective_message.text or ""

        await self._send_typing(update.effective_chat.id, context)

        kb_ctx = None
        if self.kb_available and st.kb_selected_docs and self.kb_retriever and self.kb_ctx:
            try:
                chunks = await asyncio.to_thread(self.kb_retriever.retrieve, user_text, st.kb_selected_docs)
                kb_ctx = self.kb_ctx.build_context(chunks)
            except Exception as e:
                logger.warning("KB retrieve failed: %s", e)

        try:
            reply = await asyncio.to_thread(
                self.openai.chat,
                user_text,
                st.model or getattr(self.settings, "openai_model", None),
                getattr(self.settings, "openai_temperature", 0.2),
                st.style,
                kb_ctx,
            )
            await update.effective_message.reply_text(reply)
        except Exception as e:
            logger.exception("text chat failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")

    async def on_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        file = await update.effective_message.voice.get_file()
        file_bytes = await file.download_as_bytearray()

        await self._send_typing(update.effective_chat.id, context)
        try:
            transcript = await asyncio.to_thread(self.openai.transcribe_audio, bytes(file_bytes))
        except Exception as e:
            logger.exception("transcribe failed: %s", e)
            await update.effective_message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ: {e}")
            return

        kb_ctx = None
        if self.kb_available and st.kb_selected_docs and self.kb_retriever and self.kb_ctx:
            try:
                chunks = await asyncio.to_thread(self.kb_retriever.retrieve, transcript, st.kb_selected_docs)
                kb_ctx = self.kb_ctx.build_context(chunks)
            except Exception as e:
                logger.warning("KB retrieve failed: %s", e)

        try:
            reply = await asyncio.to_thread(
                self.openai.chat,
                transcript,
                st.model or getattr(self.settings, "openai_model", None),
                getattr(self.settings, "openai_temperature", 0.2),
                st.style,
                kb_ctx,
            )
            await update.effective_message.reply_text(f"üéôÔ∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {transcript}\n\n–û—Ç–≤–µ—Ç:\n{reply}")
        except Exception as e:
            logger.exception("voice chat failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")

    async def on_file_or_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ: –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞/—Ñ–æ—Ç–æ –±–æ—Ç –¢–û–õ–¨–ö–û –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–ó ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ /kb (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞/–º–µ–Ω—é).
        """
        msg = update.effective_message
        await self._send_typing(update.effective_chat.id, context)

        try:
            if msg.document:
                file = await msg.document.get_file()
                content = await file.download_as_bytearray()
                summary = await asyncio.to_thread(self.openai.describe_file, bytes(content), msg.document.file_name)
                await msg.reply_text(f"üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {msg.document.file_name}\n–ê–Ω–∞–ª–∏–∑:\n{summary}")
            elif msg.photo:
                file = await msg.photo[-1].get_file()  # –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ñ–æ—Ç–æ
                content = await file.download_as_bytearray()
                summary = await asyncio.to_thread(self.openai.describe_image, bytes(content))
                await msg.reply_text(f"üñºÔ∏è –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ê–Ω–∞–ª–∏–∑:\n{summary}")
        except Exception as e:
            logger.exception("file/photo analyze failed: %s", e)
            await msg.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ: {e}")

    # ===================== Inline callbacks =====================
    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if not query:
            return
        await query.answer()

        data = query.data or ""
        user_id = update.effective_user.id
        st = self._ensure_dialog(user_id)

        # model:<name>
        if data.startswith("model:"):
            name = data.split(":", 1)[1]
            st.model = name
            st.updated_at_ts = time.time()
            await query.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {name}")
            return

        # mode:<name>
        if data.startswith("mode:"):
            name = data.split(":", 1)[1]
            st.style = name
            st.updated_at_ts = time.time()
            await query.edit_message_text(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {name}")
            return

        # dialogs
        if data == "newdlg":
            dlg_id = self._next_dialog_id
            self._next_dialog_id += 1
            self._dialogs_by_user.setdefault(user_id, {})[dlg_id] = DialogState(dialog_id=dlg_id)
            self._current_dialog_by_user[user_id] = dlg_id
            await query.edit_message_text("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
            return

        if data.startswith("open:"):
            dlg_id = int(data.split(":", 1)[1])
            if dlg_id in self._dialogs_by_user.get(user_id, {}):
                self._current_dialog_by_user[user_id] = dlg_id
                await query.edit_message_text(f"–û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥ #{dlg_id}.")
            else:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if data.startswith("del:"):
            dlg_id = int(data.split(":", 1)[1])
            if dlg_id in self._dialogs_by_user.get(user_id, {}):
                del self._dialogs_by_user[user_id][dlg_id]
                if self._current_dialog_by_user.get(user_id) == dlg_id:
                    rest = list(self._dialogs_by_user.get(user_id, {}).keys())
                    if rest:
                        self._current_dialog_by_user[user_id] = rest[0]
                    else:
                        self._current_dialog_by_user.pop(user_id, None)
                await query.edit_message_text(f"–î–∏–∞–ª–æ–≥ #{dlg_id} —É–¥–∞–ª—ë–Ω.")
            else:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # KB callbacks
        if data == "kb:sync":
            if not self.kb_available or not self.kb_indexer:
                await query.edit_message_text("–ú–æ–¥—É–ª—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            try:
                # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ indexer.sync() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (added, updated, deleted, unchanged)
                res = await asyncio.to_thread(self.kb_indexer.sync)  # type: ignore
                if isinstance(res, tuple) and len(res) == 4:
                    added, updated, deleted, unchanged = res
                    await query.edit_message_text(
                        "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                        f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n‚Ä¢ –£–¥–∞–ª–µ–Ω–æ: {deleted}\n‚Ä¢ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {unchanged}"
                    )
                else:
                    await query.edit_message_text("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            except Exception as e:
                logger.exception("KB sync failed: %s", e)
                await query.edit_message_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return

        if data == "kb:pick":
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞. –†–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π KB-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
            await query.edit_message_text("–í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.")
            return
