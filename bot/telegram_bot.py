# bot/telegram_bot.py
from __future__ import annotations

import asyncio
import datetime as dt
import logging
import os
import textwrap
import tempfile
from typing import Any, Dict, List, Optional, Tuple

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    BotCommand,
    InputFile,
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

# –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ–º —É—Å–ª–æ–≤–Ω–æ
try:
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ bot/knowledge_base/*
    from bot.knowledge_base.indexer import KnowledgeBase  # type: ignore
    KB_AVAILABLE = True
except Exception:
    KnowledgeBase = None  # type: ignore
    KB_AVAILABLE = False

logger = logging.getLogger(__name__)


# –°—Ç–∏–ª–∏ –æ—Ç–≤–µ—Ç–∞
STYLE_LABELS = {
    "Pro": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
    "Expert": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",
    "User": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π",
    "CEO": "–°–ï–û",
}
STYLE_ORDER = ["Pro", "Expert", "User", "CEO"]


class ChatGPTTelegramBot:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ telegram.ext, —Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
    (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞, —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.).
    """

    def __init__(self, openai, settings):
        self.openai = openai
        self.settings = settings

        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
        # user_id -> state dict
        self.state: Dict[int, Dict[str, Any]] = {}

        # –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
        self._dialog_seq: int = 1

        # –≠–∫–∑–µ–º–ø–ª—è—Ä –ë–ó (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        self.kb = KnowledgeBase(settings) if KB_AVAILABLE else None

    # ------------------------------- –£—Ç–∏–ª–∏—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è ------------------------

    def _ensure_user(self, user_id: int) -> Dict[str, Any]:
        st = self.state.get(user_id)
        if not st:
            st = {
                "model": self.openai.get_user_model(user_id) or getattr(self.settings, "openai_model", None) or "gpt-4o",
                "style": "Pro",
                "kb_enabled": False,
                "kb_selected_docs": [],  # —Å–ø–∏—Å–æ–∫ doc_id –∏–ª–∏ –ø—É—Ç–µ–π ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ KB
                "dialogs": {},           # dialog_id -> {"title": str, "created_at": ..., "updated_at": ...}
                "current_dialog": None,  # dialog_id
                "await_password_for_doc": None,  # –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            }
            # —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–≤—ã–π –¥–∏–∞–ª–æ–≥
            did = self._next_dialog_id()
            st["dialogs"][did] = self._make_dialog_meta("–î–∏–∞–ª–æ–≥")
            st["current_dialog"] = did
            self.state[user_id] = st
        return st

    def _next_dialog_id(self) -> int:
        v = self._dialog_seq
        self._dialog_seq += 1
        return v

    def _make_dialog_meta(self, base_title: str) -> Dict[str, Any]:
        now = dt.datetime.now()
        return {
            "title": base_title,
            "created_at": now,
            "updated_at": now,
        }

    def _touch_dialog(self, st: Dict[str, Any]) -> None:
        did = st.get("current_dialog")
        if not did:
            return
        meta = st["dialogs"].get(did)
        if meta:
            meta["updated_at"] = dt.datetime.now()

    def _format_dialog_title(self, meta: Dict[str, Any]) -> str:
        created = meta.get("created_at")
        updated = meta.get("updated_at")
        created_s = created.strftime("%Y-%m-%d %H:%M") if created else "-"
        updated_s = updated.strftime("%Y-%m-%d %H:%M") if updated else "-"
        return f"{meta.get('title','–î–∏–∞–ª–æ–≥')}  üïí {created_s} ‚Ä¢ ‚úé {updated_s}"

    # ------------------------------- post_init –º–µ–Ω—é ---------------------------

    async def _set_global_commands(self, app: Application) -> None:
        cmds = [
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("reset", "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("kb", "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"),
            BotCommand("model", "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"),
            BotCommand("mode", "–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤"),
            BotCommand("dialogs", "–î–∏–∞–ª–æ–≥–∏"),
            BotCommand("img", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
            BotCommand("web", "–í–µ–±‚Äë–ø–æ–∏—Å–∫"),
        ]
        # —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        try:
            await app.bot.set_my_commands(cmds)
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: %s", e)

    # ------------------------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ----------------------

    def install(self, app: Application) -> None:
        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.on_start))
        app.add_handler(CommandHandler("help", self.on_help))
        app.add_handler(CommandHandler("reset", self.on_reset))
        app.add_handler(CommandHandler("stats", self.on_stats))
        app.add_handler(CommandHandler("kb", self.on_kb))
        app.add_handler(CommandHandler("model", self.on_model))
        app.add_handler(CommandHandler("mode", self.on_mode))
        app.add_handler(CommandHandler("dialogs", self.on_dialogs))
        app.add_handler(CommandHandler("img", self.on_image))
        app.add_handler(CommandHandler("web", self.on_web))

        # Callback‚Äô–∏ –æ—Ç –∏–Ω–ª–∞–π–Ω‚Äë–∫–Ω–æ–ø–æ–∫
        app.add_handler(CallbackQueryHandler(self.on_callback))

        # –°–æ–æ–±—â–µ–Ω–∏—è
        app.add_handler(MessageHandler(filters.VOICE, self.on_voice))
        app.add_handler(MessageHandler(filters.PHOTO, self.on_photo))
        app.add_handler(MessageHandler(filters.Document.ALL, self.on_document))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text))

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π post_init: –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫, –∞ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º
        async def _post_init(application: Application) -> None:
            await self._set_global_commands(application)

        app.post_init = _post_init

    # ------------------------------- –ö–æ–º–∞–Ω–¥—ã ---------------------------------

    async def on_start(self, update: Update, context: CallbackContext) -> None:
        user = update.effective_user
        self._ensure_user(user.id)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n–ö–æ–º–∞–Ω–¥—ã: /help, /reset, /stats, /kb, /model, /mode, /dialogs, /img, /web",
        )

    async def on_help(self, update: Update, context: CallbackContext) -> None:
        text = (
            "/reset ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/kb ‚Äî –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã)\n"
            "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI\n"
            "/mode ‚Äî —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤\n"
            "/dialogs ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤\n"
            "/img ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n"
            "/web ‚Äî –≤–µ–±‚Äë–ø–æ–∏—Å–∫\n"
        )
        await context.bot.send_message(update.effective_chat.id, text)

    async def on_reset(self, update: Update, context: CallbackContext) -> None:
        user_id = update.effective_user.id
        st = self._ensure_user(user_id)
        # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        did = self._next_dialog_id()
        st["dialogs"][did] = self._make_dialog_meta("–î–∏–∞–ª–æ–≥")
        st["current_dialog"] = did
        await context.bot.send_message(update.effective_chat.id, "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

    async def on_stats(self, update: Update, context: CallbackContext) -> None:
        user_id = update.effective_user.id
        st = self._ensure_user(user_id)
        did = st.get("current_dialog")
        meta = st["dialogs"].get(did) if did else None
        dialog_title = meta["title"] if meta else "–î–∏–∞–ª–æ–≥"

        model = st.get("model") or self.openai.get_user_model(user_id) or self.openai.default_model
        style = st.get("style", "Pro")
        kb_on = st.get("kb_enabled", False)
        docs = st.get("kb_selected_docs", [])
        docs_names = ", ".join(self._kb_doc_display_name(d) for d in docs) if docs else "‚Äî"

        text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –î–∏–∞–ª–æ–≥: {dialog_title}\n"
            f"- –ú–æ–¥–µ–ª—å: {model}\n"
            f"- –°—Ç–∏–ª—å: {STYLE_LABELS.get(style, style)}\n"
            f"- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'–≤–∫–ª—é—á–µ–Ω–∞' if kb_on else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}\n"
            f"- –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: {len(docs)}\n"
        )
        if docs and len(docs_names) <= 900:
            text += f"- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {docs_names}\n"

        await context.bot.send_message(update.effective_chat.id, text)

    async def on_model(self, update: Update, context: CallbackContext) -> None:
        user_id = update.effective_user.id
        st = self._ensure_user(user_id)
        current = st.get("model") or self.openai.get_user_model(user_id) or self.openai.default_model

        try:
            models = self.openai.list_models_for_user(user_id)
        except Exception as e:
            await context.bot.send_message(update.effective_chat.id, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
            return

        # –î–µ–ª–∏–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2-3 –∫–Ω–æ–ø–∫–∏
        buttons: List[List[InlineKeyboardButton]] = []
        row: List[InlineKeyboardButton] = []
        for m in models[:36]:
            label = f"{'‚úÖ ' if m == current else ''}{m}"
            row.append(InlineKeyboardButton(label, callback_data=f"model:set:{m}"))
            if len(row) == 2:
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)

        kb = InlineKeyboardMarkup(buttons)
        await context.bot.send_message(update.effective_chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=kb)

    async def on_mode(self, update: Update, context: CallbackContext) -> None:
        user_id = update.effective_user.id
        st = self._ensure_user(user_id)
        current = st.get("style", "Pro")

        buttons: List[List[InlineKeyboardButton]] = []
        for style in STYLE_ORDER:
            label = f"{'‚úÖ ' if style == current else ''}{STYLE_LABELS[style]}"
            buttons.append([InlineKeyboardButton(label, callback_data=f"mode:set:{style}")])

        await context.bot.send_message(update.effective_chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤:", reply_markup=InlineKeyboardMarkup(buttons))

    async def on_dialogs(self, update: Update, context: CallbackContext) -> None:
        user_id = update.effective_user.id
        st = self._ensure_user(user_id)
        did_current = st.get("current_dialog")
        dialogs: Dict[int, Dict[str, Any]] = st.get("dialogs", {})

        if not dialogs:
            await context.bot.send_message(update.effective_chat.id, "–î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        def short(name: str) -> str:
            return name if len(name) <= 30 else name[:27] + "‚Ä¶"

        rows: List[List[InlineKeyboardButton]] = []
        for did, meta in sorted(dialogs.items(), key=lambda kv: kv[1].get("updated_at") or kv[1].get("created_at"), reverse=True):
            title_line = self._format_dialog_title(meta)
            marker = "‚≠ê " if did == did_current else ""
            # –í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É: –û—Ç–∫—Ä—ã—Ç—å / –£–¥–∞–ª–∏—Ç—å
            rows.append([
                InlineKeyboardButton(f"{marker}{short(title_line)}", callback_data=f"dialog:open:{did}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"dialog:del:{did}"),
            ])

        rows.append([InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data="dialog:new")])

        await context.bot.send_message(update.effective_chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥:", reply_markup=InlineKeyboardMarkup(rows))

    async def on_kb(self, update: Update, context: CallbackContext) -> None:
        user_id = update.effective_user.id
        st = self._ensure_user(user_id)
        kb_on = st.get("kb_enabled", False)

        if not KB_AVAILABLE or not self.kb:
            await context.bot.send_message(
                update.effective_chat.id,
                "–ú–æ–¥—É–ª—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–∞–ø–∫–∞ bot/knowledge_base/* –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–µ–ø–ª–æ–µ.",
            )
            return

        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é KB
        btns = [
            [InlineKeyboardButton("üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="kb:sync")],
            [InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="kb:choose")],
            [InlineKeyboardButton(("üü¢ –í—ã–∫–ª—é—á–∏—Ç—å –ë–ó" if kb_on else "‚ö™ –í–∫–ª—é—á–∏—Ç—å –ë–ó"), callback_data="kb:toggle")],
        ]
        await context.bot.send_message(update.effective_chat.id, "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:", reply_markup=InlineKeyboardMarkup(btns))

    async def on_image(self, update: Update, context: CallbackContext) -> None:
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        st = self._ensure_user(user_id)

        args = update.message.text.split(maxsplit=1)
        if len(args) < 2:
            await context.bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /img –±–µ–ª—ã–π –∫–æ—Ç –Ω–∞ —Å–∏–Ω–µ–º —Ñ–æ–Ω–µ, –º–∏–Ω–∏–º–∞–ª–∏–∑–º")
            return
        prompt = args[1].strip()
        model = self.openai.get_image_model()

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        await context.bot.send_chat_action(chat_id, ChatAction.UPLOAD_PHOTO)

        try:
            img_bytes, used_prompt = await asyncio.to_thread(self.openai.generate_image, prompt, model)
        except Exception as e:
            logger.exception("Image generation failed: %s", e)
            await context.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return

        with tempfile.NamedTemporaryFile("wb", suffix=".png", delete=False) as tmp:
            tmp.write(img_bytes)
            tmp_path = tmp.name

        try:
            caption = f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n{used_prompt}"
            await context.bot.send_photo(chat_id, photo=InputFile(tmp_path), caption=caption)
        finally:
            try:
                os.remove(tmp_path)
            except Exception:
                pass

    async def on_web(self, update: Update, context: CallbackContext) -> None:
        chat_id = update.effective_chat.id
        args = update.message.text.split(maxsplit=1)
        if len(args) < 2:
            await context.bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /web –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–¥–∂–∞–π–ª")
            return
        query = args[1].strip()

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        await context.bot.send_chat_action(chat_id, ChatAction.TYPING)

        try:
            answer, links = await asyncio.to_thread(self.openai.web_search, query)
        except Exception as e:
            await context.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –≤–µ–±‚Äë–ø–æ–∏—Å–∫–∞: {e}")
            return

        text = answer.strip()
        if links:
            links_block = "\n".join(f"- {u}" for u in links[:8])
            text = f"{text}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n{links_block}"
        await context.bot.send_message(chat_id, text)

    # ------------------------------- Callbacks --------------------------------

    async def on_callback(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        data = query.data or ""
        user_id = query.from_user.id
        st = self._ensure_user(user_id)

        try:
            if data.startswith("model:set:"):
                model = data.split("model:set:", 1)[1]
                st["model"] = model
                self.openai.set_user_model(user_id, model)
                await query.answer("–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞.")
                await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}")

            elif data.startswith("mode:set:"):
                style = data.split("mode:set:", 1)[1]
                if style in STYLE_LABELS:
                    st["style"] = style
                    await query.answer("–°—Ç–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.")
                    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {STYLE_LABELS[style]}")
                else:
                    await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å.", show_alert=True)

            elif data == "dialog:new":
                did = self._next_dialog_id()
                st["dialogs"][did] = self._make_dialog_meta("–î–∏–∞–ª–æ–≥")
                st["current_dialog"] = did
                await query.answer("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
                await query.edit_message_text("–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

            elif data.startswith("dialog:open:"):
                did = int(data.split("dialog:open:", 1)[1])
                if did in st["dialogs"]:
                    st["current_dialog"] = did
                    await query.answer("–î–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç.")
                    await query.edit_message_text(f"–û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥: {self._format_dialog_title(st['dialogs'][did])}")
                else:
                    await query.answer("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

            elif data.startswith("dialog:del:"):
                did = int(data.split("dialog:del:", 1)[1])
                if did in st["dialogs"]:
                    # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏–º—Å—è –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π
                    was_current = (st.get("current_dialog") == did)
                    del st["dialogs"][did]
                    if was_current:
                        if st["dialogs"]:
                            st["current_dialog"] = next(iter(st["dialogs"].keys()))
                        else:
                            # –°–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–π
                            ndid = self._next_dialog_id()
                            st["dialogs"][ndid] = self._make_dialog_meta("–î–∏–∞–ª–æ–≥")
                            st["current_dialog"] = ndid
                    await query.answer("–î–∏–∞–ª–æ–≥ —É–¥–∞–ª—ë–Ω.")
                    await query.edit_message_text("–î–∏–∞–ª–æ–≥ —É–¥–∞–ª—ë–Ω.")
                else:
                    await query.answer("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

            elif data == "kb:toggle":
                st["kb_enabled"] = not st.get("kb_enabled", False)
                await query.answer("–ì–æ—Ç–æ–≤–æ.")
                await query.edit_message_text(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Ç–µ–ø–µ—Ä—å: {'–≤–∫–ª—é—á–µ–Ω–∞' if st['kb_enabled'] else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")

            elif data == "kb:sync":
                if not KB_AVAILABLE or not self.kb:
                    await query.answer("–ú–æ–¥—É–ª—å –ë–ó –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
                else:
                    await query.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è‚Ä¶")
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–æ–π ‚Äî –∑–∞–ø—É—Å—Ç–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    def _sync() -> Tuple[int, int, int, int]:
                        return self.kb.sync()  # –æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤–µ—Ä–Ω—ë—Ç added, updated, deleted, unchanged

                    try:
                        added, updated, deleted, unchanged = await asyncio.to_thread(_sync)
                        await query.edit_message_text(
                            f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated}, —É–¥–∞–ª–µ–Ω–æ {deleted}, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π {unchanged}."
                        )
                    except Exception as e:
                        logger.exception("KB sync failed: %s", e)
                        await query.edit_message_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

            elif data == "kb:choose":
                if not KB_AVAILABLE or not self.kb:
                    await query.answer("–ú–æ–¥—É–ª—å –ë–ó –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
                else:
                    try:
                        docs = self.kb.list_documents()  # –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ dict‚Äô–æ–≤ —Å –ø–æ–ª—è–º–∏ id/title/encrypted
                    except Exception as e:
                        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
                        return

                    if not docs:
                        await query.edit_message_text("–í –ë–ó –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
                        return

                    rows: List[List[InlineKeyboardButton]] = []
                    sel = set(st.get("kb_selected_docs", []))
                    for d in docs[:48]:
                        did = d.get("id") or d.get("path") or str(d)
                        title = d.get("title") or d.get("path") or "–î–æ–∫—É–º–µ–Ω—Ç"
                        enc = d.get("encrypted", False)
                        mark = "‚úÖ " if did in sel else ""
                        lock = " üîí" if enc else ""
                        rows.append([
                            InlineKeyboardButton(f"{mark}{title}{lock}", callback_data=f"kb:doc:{did}")
                        ])
                    rows.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="kb:done")])
                    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:", reply_markup=InlineKeyboardMarkup(rows))

            elif data.startswith("kb:doc:"):
                did = data.split("kb:doc:", 1)[1]
                sel: List[str] = st.get("kb_selected_docs", [])
                if did in sel:
                    sel.remove(did)
                else:
                    # –ü—Ä–æ–≤–µ—Ä–∏–º ‚Äî –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω ‚Äî –∑–∞–ø—Ä–æ—Å–∏–º –ø–∞—Ä–æ–ª—å
                    need_password = False
                    if KB_AVAILABLE and self.kb:
                        try:
                            meta = self.kb.get_document_meta(did)
                            need_password = bool(meta.get("encrypted"))
                        except Exception:
                            need_password = False
                    if need_password:
                        st["await_password_for_doc"] = did
                        await query.answer("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
                        await query.edit_message_text("–î–æ–∫—É–º–µ–Ω—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–ª–∏ /cancel).")
                        return
                    sel.append(did)
                    st["kb_selected_docs"] = sel
                await query.answer("–ì–æ—Ç–æ–≤–æ.")

            elif data == "kb:done":
                await query.answer("–ì–æ—Ç–æ–≤–æ.")
                await query.edit_message_text("–î–æ–∫—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã.")

            else:
                await query.answer()

        except Exception as e:
            logger.exception("Callback error: %s", e)
            await query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è.", show_alert=True)

    # ------------------------------- –°–æ–æ–±—â–µ–Ω–∏—è --------------------------------

    async def on_text(self, update: Update, context: CallbackContext) -> None:
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        st = self._ensure_user(user_id)

        # –ü–µ—Ä–µ—Ö–≤–∞—Ç –ø–∞—Ä–æ–ª—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤ /kb)
        if st.get("await_password_for_doc"):
            doc_id = st["await_password_for_doc"]
            pwd = (update.message.text or "").strip()
            if pwd.lower() in {"/cancel", "–æ—Ç–º–µ–Ω–∞"}:
                st["await_password_for_doc"] = None
                await context.bot.send_message(chat_id, "–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω—ë–Ω.")
                return
            if KB_AVAILABLE and self.kb:
                try:
                    ok = self.kb.set_password_for_document(doc_id, pwd)
                    if ok:
                        # –î–æ–±–∞–≤–∏–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                        sel: List[str] = st.get("kb_selected_docs", [])
                        if doc_id not in sel:
                            sel.append(doc_id)
                            st["kb_selected_docs"] = sel
                        await context.bot.send_message(chat_id, "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
                    else:
                        await context.bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.")
                    return
                except Exception as e:
                    await context.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
                    return
            else:
                await context.bot.send_message(chat_id, "–ú–æ–¥—É–ª—å –ë–ó –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.")
                return

        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —á–∞—Ç —Å –º–æ–¥–µ–ª—å—é
        await context.bot.send_chat_action(chat_id, ChatAction.TYPING)

        user_text = update.message.text
        model = st.get("model") or self.openai.get_user_model(user_id) or self.openai.default_model
        style = st.get("style", "Pro")
        did = st.get("current_dialog")

        # –ï—Å–ª–∏ –ë–ó –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –ø–æ–¥—Ç—è–Ω–µ–º –≤—ã–¥–µ—Ä–∂–∫–∏
        kb_chunks: Optional[List[Tuple[int, str]]] = None
        if st.get("kb_enabled") and KB_AVAILABLE and self.kb:
            try:
                # –æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ (doc_id, text_chunk)
                kb_chunks = self.kb.get_chunks_for_dialog(user_id, did, st.get("kb_selected_docs", []), limit_chars=4000)
            except Exception as e:
                logger.warning("KB chunks failed: %s", e)
                kb_chunks = None

        try:
            answer = await asyncio.to_thread(
                self.openai.chat,
                user_id,
                did or 0,
                user_text,
                model,
                style,
                kb_chunks,
            )
        except Exception as e:
            await context.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")
            return

        self._touch_dialog(st)
        await context.bot.send_message(chat_id, answer)

    async def on_voice(self, update: Update, context: CallbackContext) -> None:
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        st = self._ensure_user(user_id)

        await context.bot.send_chat_action(chat_id, ChatAction.TYPING)

        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å
        vf = await context.bot.get_file(update.message.voice.file_id)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as tmp:
            await vf.download_to_drive(custom_path=tmp.name)
            path = tmp.name

        try:
            text = await asyncio.to_thread(self.openai.transcribe, path)
        except Exception as e:
            await context.bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ: {e}")
            try:
                os.remove(path)
            except Exception:
                pass
            return

        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        model = st.get("model") or self.openai.get_user_model(user_id) or self.openai.default_model
        style = st.get("style", "Pro")
        did = st.get("current_dialog")

        kb_chunks: Optional[List[Tuple[int, str]]] = None
        if st.get("kb_enabled") and KB_AVAILABLE and self.kb:
            try:
                kb_chunks = self.kb.get_chunks_for_dialog(user_id, did or 0, st.get("kb_selected_docs", []), limit_chars=4000)
            except Exception:
                kb_chunks = None

        try:
            answer = await asyncio.to_thread(
                self.openai.chat,
                user_id,
                did or 0,
                text or "",
                model,
                style,
                kb_chunks,
            )
        except Exception as e:
            answer = f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏: {e}"

        finally:
            try:
                os.remove(path)
            except Exception:
                pass

        msg = f"üó£Ô∏è –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{text or '‚Äî'}\n\nüí¨ –û—Ç–≤–µ—Ç:\n{answer}"
        await context.bot.send_message(chat_id, msg)

    async def on_photo(self, update: Update, context: CallbackContext) -> None:
        chat_id = update.effective_chat.id
        await context.bot.send_chat_action(chat_id, ChatAction.TYPING)

        # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –≤ –Ω–∞–∏–±–æ–ª—å—à–µ–º —Ä–∞–∑–º–µ—Ä–µ
        p = update.message.photo[-1]
        tf = await context.bot.get_file(p.file_id)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp:
            await tf.download_to_drive(custom_path=tmp.name)
            path = tmp.name

        try:
            desc = await asyncio.to_thread(self.openai.describe_file, path)
            await context.bot.send_message(chat_id, desc)
        finally:
            try:
                os.remove(path)
            except Exception:
                pass

    async def on_document(self, update: Update, context: CallbackContext) -> None:
        chat_id = update.effective_chat.id
        await context.bot.send_chat_action(chat_id, ChatAction.TYPING)

        doc = update.message.document
        tf = await context.bot.get_file(doc.file_id)
        suffix = os.path.splitext(doc.file_name or "")[1] or ".bin"
        with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
            await tf.download_to_drive(custom_path=tmp.name)
            path = tmp.name

        try:
            desc = await asyncio.to_thread(self.openai.describe_file, path)
            # –í–ê–ñ–ù–û: –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
            await context.bot.send_message(chat_id, desc + "\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ –ë–ó –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /kb ‚Üí ¬´–í—ã–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã¬ª.")
        finally:
            try:
                os.remove(path)
            except Exception:
                pass

    # ------------------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ --------------------------

    def _kb_doc_display_name(self, doc_id_or_meta: Any) -> str:
        """–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ stats ‚Äî –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º title."""
        if isinstance(doc_id_or_meta, dict):
            return doc_id_or_meta.get("title") or doc_id_or_meta.get("path") or str(doc_id_or_meta)
        if KB_AVAILABLE and self.kb:
            try:
                meta = self.kb.get_document_meta(doc_id_or_meta)
                return meta.get("title") or meta.get("path") or str(doc_id_or_meta)
            except Exception:
                return str(doc_id_or_meta)
        return str(doc_id_or_meta)
