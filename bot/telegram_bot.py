# bot/telegram_bot.py
from __future__ import annotations

import asyncio
import logging
import time
from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    MenuButtonCommands,
    InputFile,  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º from_bytes, –Ω–æ —Ç–∏–ø –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è
    BotCommandScopeDefault,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats,
    BotCommandScopeAllChatAdministrators,
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

logger = logging.getLogger(__name__)

# --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π (KB) ---
KB_AVAILABLE = True
try:
    from bot.knowledge_base.indexer import KnowledgeBaseIndexer
    from bot.knowledge_base.retriever import KnowledgeBaseRetriever
    from bot.knowledge_base.context_manager import ContextManager
except Exception as e:
    KB_AVAILABLE = False
    logger.warning("KB unavailable: %s", e)


# --- –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ë–î ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å) ---
@dataclass
class DialogState:
    dialog_id: int
    title: str = "–î–∏–∞–ª–æ–≥"
    created_at_ts: float = field(default_factory=lambda: time.time())
    updated_at_ts: float = field(default_factory=lambda: time.time())
    model: Optional[str] = None
    style: str = "Pro"  # Pro | Expert | User | CEO
    kb_enabled: bool = False
    kb_selected_docs: List[str] = field(default_factory=list)


class ChatGPTTelegramBot:
    """
    –ö–ª–∞—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ handlers –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥.
    –ö–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram –≤—ã—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ async-–º–µ—Ç–æ–¥ `setup_commands`,
    –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –≤ Application.builder().post_init(...)
    –≤ main.py.
    """

    # ====== –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ======
    def __init__(self, openai, settings):
        self.openai = openai
        self.settings = settings

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
        self.admin_ids = set(
            getattr(settings, "admin_user_ids", [])
            or getattr(settings, "admin_set", [])
            or []
        )
        self.allowed_ids = set(
            getattr(settings, "allowed_user_ids", [])
            or getattr(settings, "allowed_set", [])
            or []
        )

        # –î–∏–∞–ª–æ–≥–∏ (–Ω–∞–∏–≤–Ω–∞—è in-memory —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        self._dialogs_by_user: Dict[int, Dict[int, DialogState]] = {}
        self._current_dialog_by_user: Dict[int, int] = {}
        self._next_dialog_id: int = 1

        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        self.kb_indexer: Optional[KnowledgeBaseIndexer] = None
        self.kb_retriever: Optional[KnowledgeBaseRetriever] = None
        self.kb_ctx: Optional[ContextManager] = None
        if KB_AVAILABLE:
            try:
                self.kb_indexer = KnowledgeBaseIndexer(settings)
                self.kb_retriever = KnowledgeBaseRetriever(settings)
                self.kb_ctx = ContextManager(settings)
            except Exception as e:
                logger.exception("KB init failed: %s", e)

    # ====== –ö–æ–º–∞–Ω–¥—ã/–º–µ–Ω—é ======
    def _build_commands(self) -> List[BotCommand]:
        """
        –¢–û–õ–¨–ö–û –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã. –°—Ç–∞—Ä—ã–µ –≤—Ä–æ–¥–µ /del, /reload_menu, /cancelupload
        –∑–¥–µ—Å—å –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
        """
        return [
            BotCommand("help", "–ø–æ–º–æ—â—å"),
            BotCommand("reset", "—Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
            BotCommand("stats", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("kb", "–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"),
            BotCommand("model", "–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI"),
            BotCommand("mode", "—Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤"),
            BotCommand("dialogs", "—Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"),
            BotCommand("img", "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
            BotCommand("web", "–≤–µ–±‚Äë–ø–æ–∏—Å–∫"),
        ]

    async def setup_commands(self, app: Application) -> None:
        """
        –í–ê–ñ–ù–û: —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ Application.builder().post_init(...)
        –≤ main.py. –û–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Application.
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Å–µ—Ö scope –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ.
        """
        bot = app.bot

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö–æ–º–∞–Ω–¥—ã" –≤ —à—Ç–æ—Ä–∫–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        try:
            await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        except Exception:
            pass

        commands = self._build_commands()

        scopes = [
            BotCommandScopeDefault(),
            BotCommandScopeAllPrivateChats(),
            BotCommandScopeAllGroupChats(),
            BotCommandScopeAllChatAdministrators(),
        ]
        # –Ø–∑—ã–∫–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: –±–µ–∑ –∫–æ–¥–∞ –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —è–∑—ã–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        langs = [None]
        lang_cfg = getattr(self.settings, "bot_language", None)
        if lang_cfg:
            langs.append(lang_cfg)

        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for scope in scopes:
            for lc in langs:
                try:
                    await bot.delete_my_commands(scope=scope, language_code=lc)
                except Exception:
                    pass

        # –ó–∞—Ç–µ–º –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ
        for scope in scopes:
            for lc in langs:
                await bot.set_my_commands(commands=commands, scope=scope, language_code=lc)

        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ—Ö scope/—è–∑—ã–∫–∞—Ö.")

    # ====== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ======
    def install(self, app: Application) -> None:
        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.cmd_start))
        app.add_handler(CommandHandler("help", self.cmd_help))
        app.add_handler(CommandHandler("reset", self.cmd_reset))
        app.add_handler(CommandHandler("stats", self.cmd_stats))
        app.add_handler(CommandHandler("model", self.cmd_model))
        app.add_handler(CommandHandler("mode", self.cmd_mode))
        app.add_handler(CommandHandler("dialogs", self.cmd_dialogs))
        app.add_handler(CommandHandler("img", self.cmd_img))
        app.add_handler(CommandHandler("web", self.cmd_web))
        # KB
        app.add_handler(CommandHandler("kb", self.cmd_kb))

        # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        app.add_handler(MessageHandler(filters.VOICE, self.on_voice))
        app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, self.on_file_or_photo))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text))

        # Inline callbacks
        app.add_handler(CallbackQueryHandler(self.on_callback))

    # ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======
    def _ensure_dialog(self, user_id: int) -> DialogState:
        user_dialogs = self._dialogs_by_user.setdefault(user_id, {})
        if user_id not in self._current_dialog_by_user or self._current_dialog_by_user[user_id] not in user_dialogs:
            dlg_id = self._next_dialog_id
            self._next_dialog_id += 1
            st = DialogState(dialog_id=dlg_id)
            user_dialogs[dlg_id] = st
            self._current_dialog_by_user[user_id] = dlg_id
        return user_dialogs[self._current_dialog_by_user[user_id]]

    def _list_dialogs(self, user_id: int) -> List[DialogState]:
        return list(self._dialogs_by_user.get(user_id, {}).values())

    async def _send_typing(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        try:
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        except Exception:
            pass

    # ====== –ö–æ–º–∞–Ω–¥—ã ======
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self._ensure_dialog(update.effective_user.id)
        await update.effective_message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
            "–ö–æ–º–∞–Ω–¥—ã: /help, /reset, /stats, /kb, /model, /mode, /dialogs, /img, /web"
        )

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (
            "/reset ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥)\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/kb ‚Äî –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–≤–∫–ª/–∏—Å–∫–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã)\n"
            "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI\n"
            "/mode ‚Äî —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤\n"
            "/dialogs ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (–æ—Ç–∫—Ä—ã—Ç—å/—É–¥–∞–ª–∏—Ç—å)\n"
            "/img ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "/web ‚Äî –≤–µ–±‚Äë–ø–æ–∏—Å–∫\n"
        )
        await update.effective_message.reply_text(text)

    async def cmd_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dlg_id = self._next_dialog_id
        self._next_dialog_id += 1
        self._dialogs_by_user.setdefault(user_id, {})[dlg_id] = DialogState(dialog_id=dlg_id)
        self._current_dialog_by_user[user_id] = dlg_id
        await update.effective_message.reply_text("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        kb_list = ", ".join(st.kb_selected_docs) if st.kb_selected_docs else "‚Äî"
        model_name = st.model or getattr(self.settings, "openai_model", "gpt-4o")
        text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –î–∏–∞–ª–æ–≥: {st.title}\n"
            f"- –ú–æ–¥–µ–ª—å: {model_name}\n"
            f"- –°—Ç–∏–ª—å: {st.style}\n"
            f"- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'–≤–∫–ª—é—á–µ–Ω–∞' if st.kb_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}\n"
            f"- –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: {len(st.kb_selected_docs)}\n"
            f"- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {kb_list}"
        )
        await update.effective_message.reply_text(text)

    async def cmd_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        try:
            models = self.openai.list_models_for_menu()  # -> List[str]
        except Exception as e:
            logger.exception("list_models failed: %s", e)
            await update.effective_message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
            return

        rows = []
        current = st.model or getattr(self.settings, "openai_model", None)
        for name in models:
            mark = "‚úÖ " if name == current else ""
            rows.append([InlineKeyboardButton(f"{mark}{name}", callback_data=f"model:{name}")])
        kb = InlineKeyboardMarkup(rows)
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=kb)

    async def cmd_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        modes = ["Pro", "Expert", "User", "CEO"]
        rows = []
        for m in modes:
            mark = "‚úÖ " if st.style == m else ""
            rows.append([InlineKeyboardButton(f"{mark}{m}", callback_data=f"mode:{m}")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_dialogs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dialogs = self._list_dialogs(user_id)
        current_id = self._current_dialog_by_user.get(user_id)
        if not dialogs:
            await update.effective_message.reply_text("–î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ /reset –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")
            return

        rows = []
        for d in dialogs:
            title = d.title or f"–î–∏–∞–ª–æ–≥ #{d.dialog_id}"
            prefix = "‚≠ê " if d.dialog_id == current_id else ""
            rows.append([
                InlineKeyboardButton(f"{prefix}{title}", callback_data=f"open:{d.dialog_id}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"del:{d.dialog_id}"),
            ])
        rows.append([InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data="newdlg")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_img(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /img <–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>")
            return
        prompt = " ".join(context.args)
        await self._send_typing(update.effective_chat.id, context)
        try:
            img_bytes, used_prompt = await asyncio.to_thread(
                self.openai.generate_image, prompt, None
            )
            # PTB —É–º–µ–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å bytes –Ω–∞–ø—Ä—è–º—É—é
            await update.effective_message.reply_photo(
                photo=img_bytes,
                caption=f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ prompt:\n{used_prompt}",
            )
        except Exception as e:
            logger.exception("Image generation failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    async def cmd_web(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /web <–∑–∞–ø—Ä–æ—Å>")
            return
        query = " ".join(context.args)
        await self._send_typing(update.effective_chat.id, context)
        try:
            answer, sources = await asyncio.to_thread(self.openai.web_answer, query)
            if sources:
                src_text = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(f"‚Ä¢ {u}" for u in sources)
            else:
                src_text = "\n\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —è–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
            await update.effective_message.reply_text(answer + src_text)
        except Exception as e:
            logger.exception("Web search failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≤–µ–±‚Äë–ø–æ–∏—Å–∫–∞: {e}")

    async def cmd_kb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        if not KB_AVAILABLE or not (self.kb_indexer and self.kb_retriever and self.kb_ctx):
            await update.effective_message.reply_text("–ú–æ–¥—É–ª—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.")
            return

        rows = [
            [InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="kb:sync")],
            [InlineKeyboardButton(
                f"{'‚úÖ' if st.kb_enabled else '‚ùå'} –í–∫–ª—é—á–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π",
                callback_data=f"kb:toggle:{1 if not st.kb_enabled else 0}")],
            [InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="kb:pick")],
        ]
        await update.effective_message.reply_text("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:", reply_markup=InlineKeyboardMarkup(rows))

    # ====== –°–æ–æ–±—â–µ–Ω–∏—è ======
    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        user_text = update.effective_message.text

        await self._send_typing(update.effective_chat.id, context)
        kb_ctx = None
        if st.kb_enabled and st.kb_selected_docs and KB_AVAILABLE and self.kb_retriever and self.kb_ctx:
            try:
                chunks = await asyncio.to_thread(self.kb_retriever.retrieve, user_text, st.kb_selected_docs)
                kb_ctx = self.kb_ctx.build_context(chunks)
            except Exception as e:
                logger.warning("KB retrieve failed: %s", e)

        try:
            reply = await asyncio.to_thread(
                self.openai.chat,
                user_text,
                st.model or getattr(self.settings, "openai_model", None),
                getattr(self.settings, "openai_temperature", 0.2),
                st.style,
                kb_ctx,
            )
            await update.effective_message.reply_text(reply)
        except Exception as e:
            logger.exception("text chat failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")

    async def on_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        file = await update.effective_message.voice.get_file()
        file_bytes = await file.download_as_bytearray()

        await self._send_typing(update.effective_chat.id, context)
        try:
            transcript = await asyncio.to_thread(self.openai.transcribe_audio, bytes(file_bytes))
        except Exception as e:
            logger.exception("transcribe failed: %s", e)
            await update.effective_message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ: {e}")
            return

        kb_ctx = None
        if st.kb_enabled and st.kb_selected_docs and KB_AVAILABLE and self.kb_retriever and self.kb_ctx:
            try:
                chunks = await asyncio.to_thread(self.kb_retriever.retrieve, transcript, st.kb_selected_docs)
                kb_ctx = self.kb_ctx.build_context(chunks)
            except Exception as e:
                logger.warning("KB retrieve failed: %s", e)

        try:
            reply = await asyncio.to_thread(
                self.openai.chat,
                transcript,
                st.model or getattr(self.settings, "openai_model", None),
                getattr(self.settings, "openai_temperature", 0.2),
                st.style,
                kb_ctx,
            )
            await update.effective_message.reply_text(f"üéôÔ∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {transcript}\n\n–û—Ç–≤–µ—Ç:\n{reply}")
        except Exception as e:
            logger.exception("voice chat failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")

    async def on_file_or_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –í —ç—Ç–æ–π –ª–æ–≥–∏–∫–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞/—Ñ–æ—Ç–æ –±–æ—Ç –¢–û–õ–¨–ö–û –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç,
        –∞ –≤ –ë–ó –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ /kb -> ¬´–í—ã–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã¬ª (–Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).
        """
        message = update.effective_message
        await self._send_typing(update.effective_chat.id, context)

        try:
            if message.document:
                file = await message.document.get_file()
                content = await file.download_as_bytearray()
                summary = await asyncio.to_thread(self.openai.describe_file, bytes(content), message.document.file_name)
                await message.reply_text(f"üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {message.document.file_name}\n–ê–Ω–∞–ª–∏–∑:\n{summary}")
            elif message.photo:
                file = await message.photo[-1].get_file()  # —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø—Ä–µ–≤—å—é
                content = await file.download_as_bytearray()
                summary = await asyncio.to_thread(self.openai.describe_image, bytes(content))
                await message.reply_text(f"üñºÔ∏è –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ê–Ω–∞–ª–∏–∑:\n{summary}")
        except Exception as e:
            logger.exception("file/photo analyze failed: %s", e)
            await message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ: {e}")

    # ====== Inline callbacks ======
    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if not query:
            return
        await query.answer()

        data = query.data or ""
        user_id = update.effective_user.id
        st = self._ensure_dialog(user_id)

        # model:<name>
        if data.startswith("model:"):
            name = data.split(":", 1)[1]
            st.model = name
            st.updated_at_ts = time.time()
            await query.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {name}")
            return

        # mode:<name>
        if data.startswith("mode:"):
            name = data.split(":", 1)[1]
            st.style = name
            st.updated_at_ts = time.time()
            await query.edit_message_text(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {name}")
            return

        # dialogs
        if data == "newdlg":
            dlg_id = self._next_dialog_id
            self._next_dialog_id += 1
            self._dialogs_by_user.setdefault(user_id, {})[dlg_id] = DialogState(dialog_id=dlg_id)
            self._current_dialog_by_user[user_id] = dlg_id
            await query.edit_message_text("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
            return

        if data.startswith("open:"):
            dlg_id = int(data.split(":", 1)[1])
            if dlg_id in self._dialogs_by_user.get(user_id, {}):
                self._current_dialog_by_user[user_id] = dlg_id
                await query.edit_message_text(f"–û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥ #{dlg_id}.")
            else:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if data.startswith("del:"):
            dlg_id = int(data.split(":", 1)[1])
            if dlg_id in self._dialogs_by_user.get(user_id, {}):
                del self._dialogs_by_user[user_id][dlg_id]
                if self._current_dialog_by_user.get(user_id) == dlg_id:
                    rest = list(self._dialogs_by_user.get(user_id, {}).keys())
                    self._current_dialog_by_user[user_id] = rest[0] if rest else None
                await query.edit_message_text(f"–î–∏–∞–ª–æ–≥ #{dlg_id} —É–¥–∞–ª–µ–Ω.")
            else:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # KB callbacks
        if data == "kb:sync":
            if not KB_AVAILABLE or not self.kb_indexer:
                await query.edit_message_text("–ú–æ–¥—É–ª—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            try:
                added, updated, deleted, unchanged = await asyncio.to_thread(self.kb_indexer.sync)
                await query.edit_message_text(
                    f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                    f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}\n‚Ä¢ –£–¥–∞–ª–µ–Ω–æ: {deleted}\n‚Ä¢ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {unchanged}"
                )
            except Exception as e:
                logger.exception("KB sync failed: %s", e)
                await query.edit_message_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return

        if data.startswith("kb:toggle:"):
            try:
                v = int(data.split(":", 2)[2])
                st.kb_enabled = bool(v)
                st.updated_at_ts = time.time()
                await query.edit_message_text(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π {'–≤–∫–ª—é—á–µ–Ω–∞' if st.kb_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}.")
            except Exception:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å.")
            return

        if data == "kb:pick":
            # TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –ë–ó.
            await query.edit_message_text("–í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.")
            return
