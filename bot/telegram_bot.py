import logging
from functools import wraps
from typing import Optional, List, Tuple, Dict
from io import BytesIO
from datetime import datetime

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from sqlalchemy.orm import Session
from bot.db.session import SessionLocal
from bot.db.models import Document, Conversation
from bot.openai_helper import OpenAIHelper
from bot.settings import Settings

logger = logging.getLogger(__name__)

# ----- Access decorator -----
def only_allowed(func):
    @wraps(func)
    async def wrapper(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id if update.effective_user else None
        if self.allowed and uid not in self.allowed:
            await update.effective_message.reply_text("‚õî –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
            return
        return await func(self, update, context)
    return wrapper

# ----- Style presets -----
STYLE_LABELS = {
    "pro": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
    "expert": "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",
    "user": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π",
    "ceo": "–°–ï–û",
}

def style_system_hint(style: str) -> Tuple[str, float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (system_prompt, temperature) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è.
    """
    s = (style or "pro").lower()
    if s == "pro":
        return ("–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –≤—ã—Å–æ–∫–æ–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ, –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã.", 0.2)
    if s == "expert":
        return ("–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–∞–∫—Ç–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ —Ç–µ–º—ã. –ü—Ä–∏–≤–æ–¥–∏ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏.", 0.3)
    if s == "user":
        return ("–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –æ–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ú–æ–∂–µ—à—å –¥–∞–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏ —á—É—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å.", 0.6)
    if s == "ceo":
        return ("–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –±–∏–∑–Ω–µ—Å–∞ (EMBA/DBA): —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, ROI, —Ä–∏—Å–∫–∏, —Ä–µ—Å—É—Ä—Å—ã, –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ—Ä–≥–¥–∏–∑–∞–π–Ω –∏ –∫—É–ª—å—Ç—É—Ä—É.", 0.25)
    return ("–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É.", 0.3)

class ChatGPTTelegramBot:
    def __init__(self, openai: OpenAIHelper, settings: Settings):
        self.openai = openai
        self.settings = settings
        self.allowed = set(settings.allowed_set) if settings.allowed_set else set()
        self.admins = set(settings.admin_set) if settings.admin_set else set()

    # ----- Wiring -----
    def install(self, app: Application):
        app.add_handler(CommandHandler("start", self.on_start))
        app.add_handler(CommandHandler("help", self.on_help))
        app.add_handler(CommandHandler("reset", self.on_reset))
        app.add_handler(CommandHandler("stats", self.on_stats))
        app.add_handler(CommandHandler("kb", self.on_kb))
        app.add_handler(CommandHandler("model", self.on_model))
        app.add_handler(CommandHandler("dialogs", self.on_dialogs))
        app.add_handler(CommandHandler("dialog", self.on_dialog_select))

        # New: modes & images & KB passwords
        app.add_handler(CommandHandler("mode", self.on_mode))
        app.add_handler(CommandHandler("img", self.on_img))
        app.add_handler(CommandHandler("cancelpass", self.on_cancel_pass))

        app.add_handler(CallbackQueryHandler(self.on_callback))

        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text))

        # Commands menu
        app.post_init = self._post_init_commands

    async def _post_init_commands(self, app: Application):
        cmds = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –∏ –º–µ–Ω—é"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("reset", "–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("kb", "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"),
            BotCommand("model", "–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"),
            BotCommand("dialogs", "–°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"),
            BotCommand("img", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
            BotCommand("mode", "–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤"),
        ]
        try:
            await app.bot.set_my_commands(cmds)
        except Exception as e:
            logger.warning("Failed to set commands: %s", e)

    # ---------- DB helpers ----------
    def _get_db(self) -> Session:
        return SessionLocal()

    def _get_active_conv(self, chat_id: int, db: Session) -> Conversation:
        conv = db.query(Conversation).filter_by(chat_id=chat_id, is_active=True).order_by(Conversation.id.desc()).first()
        if not conv:
            conv = Conversation(chat_id=chat_id, title="–î–∏–∞–ª–æ–≥")
            db.add(conv); db.commit(); db.refresh(conv)
        return conv

    # ---------- Title helpers ----------
    @staticmethod
    def _short_title_from_text(text: str, limit: int = 48) -> str:
        base = (text or "").strip().splitlines()[0]
        base = " ".join(base.split())
        return (base[:limit] + "‚Ä¶") if len(base) > limit else base

    def _ensure_conv_title(self, conv: Conversation, first_user_text: str, db: Session):
        """–ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—â—ë —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ‚Äî –∞–≤—Ç–æ–∏–º–µ–Ω—É–µ–º. –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É upd –Ω–∞ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
        base = conv.title or "–î–∏–∞–ª–æ–≥"
        created = conv.created_at.strftime("%Y-%m-%d")
        now = datetime.utcnow().strftime("%Y-%m-%d %H:%M")
        if base == "–î–∏–∞–ª–æ–≥":
            short = self._short_title_from_text(first_user_text) or "–î–∏–∞–ª–æ–≥"
            conv.title = f"{short} ¬∑ {created} ¬∑ upd {now}"
        else:
            # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ö–≤–æ—Å—Ç —Å –º–µ—Ç–∫–æ–π upd
            parts = base.split(" ¬∑ ")
            if len(parts) >= 2:
                conv.title = " ¬∑ ".join(parts[:2] + [f"upd {now}"])
            else:
                conv.title = f"{base} ¬∑ upd {now}"
        db.add(conv); db.commit()

    # ---------- Commands ----------
    @only_allowed
    async def on_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
            "–ö–æ–º–∞–Ω–¥—ã: /help, /reset, /stats, /kb, /model, /dialogs, /img, /mode"
        )

    @only_allowed
    async def on_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "/reset ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/kb ‚Äî –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (–≤–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–∞—Ä–æ–ª–∏)\n"
            "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI\n"
            "/mode ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ (–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π/–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π/–°–ï–û)\n"
            "/dialogs ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤, /dialog <id> ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è\n"
            "/img <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        )

    @only_allowed
    async def on_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        db = self._get_db()
        chat_id = update.effective_chat.id
        db.query(Conversation).filter_by(chat_id=chat_id, is_active=True).update({"is_active": False})
        db.commit()
        newc = Conversation(chat_id=chat_id, title="–î–∏–∞–ª–æ–≥")
        db.add(newc); db.commit()
        await update.message.reply_text("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")
        context.user_data.pop("kb_enabled", None)
        context.user_data.pop("kb_selected_ids", None)
        context.user_data.pop("kb_passwords", None)
        context.user_data.pop("await_password_for", None)
        context.user_data.pop("style", None)

    @only_allowed
    async def on_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        db = self._get_db()
        chat_id = update.effective_chat.id
        conv = self._get_active_conv(chat_id, db)
        docs = context.user_data.get("kb_selected_ids", set()) or set()
        kb_enabled = context.user_data.get("kb_enabled", True)
        style = context.user_data.get("style", "pro")
        style_label = STYLE_LABELS.get(style, "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π")

        title = conv.title or "–î–∏–∞–ª–æ–≥"
        names = []
        if docs:
            q = db.query(Document).filter(Document.id.in_(list(docs))).all()
            names = [d.title for d in q]

        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –î–∏–∞–ª–æ–≥: {title}\n"
            f"- –ú–æ–¥–µ–ª—å: {self.openai.model}\n"
            f"- –°—Ç–∏–ª—å: {style_label}\n"
            f"- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'–≤–∫–ª—é—á–µ–Ω–∞' if kb_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}\n"
            f"- –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: {len(docs)}"
        )
        if names:
            text += "\n- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: " + ", ".join(names[:10])
            if len(names) > 10:
                text += f" –∏ –µ—â—ë {len(names) - 10}‚Ä¶"

        await update.message.reply_text(text)

    # ----- KB -----
    @only_allowed
    async def on_kb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        db = self._get_db()
        chat_id = update.effective_chat.id
        self._get_active_conv(chat_id, db)  # ensure exists

        kb_enabled = context.user_data.get("kb_enabled", True)
        selected = context.user_data.get("kb_selected_ids", set())
        docs = db.query(Document).order_by(Document.id.asc()).limit(30).all()

        rows = []
        for d in docs:
            mark = "‚úÖ" if d.id in selected else "‚ûï"
            rows.append([InlineKeyboardButton(f"{mark} {d.title}", callback_data=f"kb_toggle:{d.id}")])

        # Admin-only sync button
        if update.effective_user and update.effective_user.id in self.admins:
            rows.append([InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –Ø.–î–∏—Å–∫–æ–º", callback_data="kb_sync")])

        rows.append([InlineKeyboardButton(("üîï –û—Ç–∫–ª—é—á–∏—Ç—å –ë–ó" if kb_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å –ë–ó"), callback_data="kb_toggle_enabled")])
        rows.append([InlineKeyboardButton("üîê –£–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö", callback_data="kb_pass_menu")])

        await update.message.reply_text(
            f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'–≤–∫–ª—é—á–µ–Ω–∞' if kb_enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–æ 30 –ø–æ–∫–∞–∑–∞–Ω–æ).",
            reply_markup=InlineKeyboardMarkup(rows)
        )

    # ----- Models -----
    @only_allowed
    async def on_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        models = self.openai.list_models()
        prefer = [m for m in models if any(x in m for x in ["gpt-4o", "gpt-4.1", "gpt-4", "gpt-3.5"])]
        items = prefer[:30] if prefer else models[:30]
        rows = [[InlineKeyboardButton(m, callback_data=f"set_model:{m}")] for m in items]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(rows))

    # ----- Modes -----
    @only_allowed
    async def on_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        rows = [
            [InlineKeyboardButton("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", callback_data="set_mode:pro")],
            [InlineKeyboardButton("–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", callback_data="set_mode:expert")],
            [InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", callback_data="set_mode:user")],
            [InlineKeyboardButton("–°–ï–û", callback_data="set_mode:ceo")],
        ]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤:", reply_markup=InlineKeyboardMarkup(rows))

    # ----- Images -----
    @only_allowed
    async def on_img(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        prompt = " ".join(context.args) if context.args else ""
        if not prompt and update.message and update.message.reply_to_message:
            prompt = update.message.reply_to_message.text or update.message.reply_to_message.caption or ""
        prompt = (prompt or "").strip()
        if not prompt:
            await update.message.reply_text("–£—Ç–æ—á–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/img –ª–æ–≥–æ—Ç–∏–ø –≤ —Å—Ç–∏–ª–µ –º–∏–Ω–∏–º–∞–ª–∏–∑–º`", parse_mode="Markdown")
            return

        try:
            png = self.openai.generate_image(prompt, size="1024x1024")
            bio = BytesIO(png); bio.name = "image.png"; bio.seek(0)
            await update.message.reply_photo(photo=InputFile(bio, filename="image.png"), caption=prompt)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    # ----- Dialogs -----
    @only_allowed
    async def on_dialogs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        db = self._get_db()
        chat_id = update.effective_chat.id
        items = db.query(Conversation).filter_by(chat_id=chat_id).order_by(Conversation.id.desc()).limit(10).all()
        if not items:
            await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.")
            return
        rows = [[InlineKeyboardButton(f"#{c.id} {c.title}", callback_data=f"goto_dialog:{c.id}") ] for c in items]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥:", reply_markup=InlineKeyboardMarkup(rows))

    @only_allowed
    async def on_dialog_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args or []
        if not args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dialog <id>")
            return
        try:
            target = int(args[0])
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id.")
            return

        db = self._get_db()
        chat_id = update.effective_chat.id
        db.query(Conversation).filter_by(chat_id=chat_id, is_active=True).update({"is_active": False})
        c = db.query(Conversation).filter_by(chat_id=chat_id, id=target).first()
        if not c:
            await update.message.reply_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        c.is_active = True
        db.commit()
        await update.message.reply_text(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–∏–∞–ª–æ–≥ #{c.id} ({c.title}).")

    # ----- Callbacks -----
    @only_allowed
    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        q = update.callback_query
        await q.answer()
        data = q.data or ""

        if data.startswith("kb_toggle:"):
            doc_id = int(data.split(":")[1])
            selected = context.user_data.get("kb_selected_ids", set())
            if doc_id in selected:
                selected.remove(doc_id)
            else:
                selected.add(doc_id)
            context.user_data["kb_selected_ids"] = selected
            await q.edit_message_reply_markup(reply_markup=None)
            await q.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /kb, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫.")

        elif data == "kb_toggle_enabled":
            cur = context.user_data.get("kb_enabled", True)
            context.user_data["kb_enabled"] = not cur
            await q.edit_message_text(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {'–≤–∫–ª—é—á–µ–Ω–∞' if not cur else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}. –ù–∞–∂–º–∏—Ç–µ /kb, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å.")

        elif data == "kb_sync":
            if update.effective_user and update.effective_user.id in self.admins:
                await q.edit_message_text("–ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é‚Ä¶")
                await self._kb_sync_internal(update, context)
            else:
                await q.edit_message_text("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

        elif data == "kb_pass_menu":
            selected = context.user_data.get("kb_selected_ids", set())
            if not selected:
                await q.edit_message_text("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Ö –≤ /kb.")
                return
            db = self._get_db()
            docs = db.query(Document).filter(Document.id.in_(list(selected))).all()
            rows = [[InlineKeyboardButton(f"üîê {d.title}", callback_data=f"kb_pass:{d.id}")] for d in docs[:30]]
            rows.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="kb_pass_cancel")])
            await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è:", reply_markup=InlineKeyboardMarkup(rows))

        elif data.startswith("kb_pass:"):
            doc_id = int(data.split(":")[1])
            context.user_data["await_password_for"] = doc_id
            await q.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã: /cancelpass")

        elif data == "kb_pass_cancel":
            context.user_data.pop("await_password_for", None)
            await q.edit_message_text("–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω—ë–Ω.")

        elif data.startswith("set_model:"):
            m = data.split(":", 1)[1]
            self.openai.set_model(m)
            await q.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {m}")

        elif data.startswith("goto_dialog:"):
            try:
                target = int(data.split(":")[1])
            except ValueError:
                return
            db = self._get_db()
            chat_id = update.effective_chat.id
            db.query(Conversation).filter_by(chat_id=chat_id, is_active=True).update({"is_active": False})
            c = db.query(Conversation).filter_by(chat_id=chat_id, id=target).first()
            if c:
                c.is_active = True; db.commit()
                await q.edit_message_text(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–∏–∞–ª–æ–≥ #{c.id} ({c.title}).")
            else:
                await q.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        elif data.startswith("set_mode:"):
            mode = data.split(":", 1)[1]
            context.user_data["style"] = mode
            await q.edit_message_text(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {STYLE_LABELS.get(mode, '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π')}")

    async def _kb_sync_internal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        from bot.knowledge_base.indexer import sync_disk_to_db
        db = SessionLocal()
        added = 0
        try:
            added = sync_disk_to_db(db, self.settings.yandex_disk_token, self.settings.yandex_root_path)
            await update.effective_chat.send_message(f"–ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {added}")
        except Exception as e:
            await update.effective_chat.send_message(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        finally:
            db.close()

    # ----- KB passwords -----
    @only_allowed
    async def on_cancel_pass(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data.pop("await_password_for", None)
        await update.message.reply_text("–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ–Ω—ë–Ω.")

    # ----- Text handler -----
    @only_allowed
    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        db = self._get_db()
        chat_id = update.effective_chat.id
        conv = self._get_active_conv(chat_id, db)

        # 1) –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)
        awaiting: Optional[int] = context.user_data.get("await_password_for")
        if awaiting is not None:
            pwd = (update.message.text or "").strip()
            if not pwd:
                await update.message.reply_text("–ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ /cancelpass")
                return
            kb_passwords: Dict[int, str] = context.user_data.get("kb_passwords", {}) or {}
            kb_passwords[awaiting] = pwd
            context.user_data["kb_passwords"] = kb_passwords
            context.user_data.pop("await_password_for", None)
            await update.message.reply_text("‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return

        # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É
        kb_enabled = context.user_data.get("kb_enabled", True)
        selected_ids = context.user_data.get("kb_selected_ids", set())
        selected_docs: List[Document] = []
        if kb_enabled and selected_ids:
            selected_docs = db.query(Document).filter(Document.id.in_(list(selected_ids))).all()

        style = context.user_data.get("style", "pro")
        sys_hint, temp = style_system_hint(style)

        kb_hint = ""
        if selected_docs:
            titles = ", ".join([d.title for d in selected_docs][:10])
            kb_hint = f" –£—á–∏—Ç—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {titles}."

        # 3) –û–±–Ω–æ–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞ (–ø–µ—Ä–≤–æ–µ/–∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        self._ensure_conv_title(conv, update.message.text or "", db)

        # 4) –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        prompt = (update.message.text or "").strip()
        messages = [
            {"role": "system", "content": (sys_hint + kb_hint).strip()},
            {"role": "user", "content": prompt}
        ]

        try:
            ans = self.openai.chat(messages, temperature=temp, max_output_tokens=2048)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")
            return

        await update.message.reply_text(ans or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
