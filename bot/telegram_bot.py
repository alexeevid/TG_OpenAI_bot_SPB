from __future__ import annotations
from sqlalchemy import text
from datetime import datetime
from typing import List, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from sqlalchemy import select, func
from bot.settings import load_settings
from bot.db.session import get_session
from bot.db import models as M
from bot.openai_helper import chat, transcribe_audio, generate_image
from bot.knowledge_base.indexer import sync_kb
from bot.knowledge_base.retriever import retrieve_context

_settings = load_settings()

def _user_is_admin(user_id: int) -> bool:
    try:
        ids = [int(x.strip()) for x in (_settings.admin_user_ids or '').split(',') if x.strip()]
        return user_id in ids
    except:
        return False

def _ensure_user_and_dialog(tg_id:int):
    with get_session() as s:
        dbu = s.execute(select(M.User).where(M.User.tg_user_id == tg_id)).scalar_one_or_none()
        if dbu is None:
            dbu = M.User(tg_user_id=tg_id, is_admin=_user_is_admin(tg_id), is_allowed=True, lang='ru'); s.add(dbu); s.commit()
        dlg = s.execute(select(M.Dialog).where(M.Dialog.user_id==dbu.id, M.Dialog.is_deleted==False).order_by(M.Dialog.created_at.desc())).scalar_one_or_none()
        if dlg is None:
            dlg = M.Dialog(user_id=dbu.id, title=datetime.now().strftime('%Y-%m-%d | –¥–∏–∞–ª–æ–≥'), style='expert', model=_settings.openai_model); s.add(dlg); s.commit()
        return dbu, dlg

# –±—ã–ª–æ: async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
import logging

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = (update.effective_chat.id if update.effective_chat else None)
    user = update.effective_user

    # —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–¥–∏–∞–ª–æ–≥, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    try:
        if user:
            _ensure_user_and_dialog(user.id)
    except Exception:
        logging.exception("start: _ensure_user_and_dialog failed")

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏–∑ –ë–ó.\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ /kb (–∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏) –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.\n\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
    )

    # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ-–ª—é–±–æ–º—É –∫–∞–Ω–∞–ª—É: message, callback, –ª–∏–±–æ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç
    if update.message:
        await update.message.reply_text(text)
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text(text)
        except Exception:
            await update.callback_query.message.reply_text(text)
    elif chat_id is not None:
        await context.bot.send_message(chat_id, text)

async def help_cmd(update, context):
    await update.message.reply_text('/start /help /reset /stats\n/dialogs, /dialog <id>\n/kb, /kb_diag\n/model, /mode\n/img <prompt>\n/web <query>\n/whoami, /grant <id>, /revoke <id>')

async def whoami(update, context):
    user=update.effective_user
    with get_session() as s:
        dbu=s.execute(select(M.User).where(M.User.tg_user_id==user.id)).scalar_one_or_none()
        if not dbu: await update.message.reply_text('–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'); return
        await update.message.reply_text(f'–í–∞—à id={user.id}\nadmin={dbu.is_admin}\nallowed={dbu.is_allowed}')

async def grant(update, context):
    if not _user_is_admin(update.effective_user.id):
        await update.message.reply_text('–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á—ë–Ω.'); return
    if not context.args: await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant <tg_id>'); return
    tg_id=int(context.args[0])
    with get_session() as s:
        u=s.execute(select(M.User).where(M.User.tg_user_id==tg_id)).scalar_one_or_none()
        if not u: u=M.User(tg_user_id=tg_id, is_admin=False, is_allowed=True, lang='ru'); s.add(u)
        else: u.is_allowed=True
        s.commit()
    await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –¥–æ–±–∞–≤–ª–µ–Ω/—Ä–∞–∑—Ä–µ—à—ë–Ω.')

async def revoke(update, context):
    if not _user_is_admin(update.effective_user.id):
        await update.message.reply_text('–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á—ë–Ω.'); return
    if not context.args: await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <tg_id>'); return
    tg_id=int(context.args[0])
    with get_session() as s:
        u=s.execute(select(M.User).where(M.User.tg_user_id==tg_id)).scalar_one_or_none()
        if u: u.is_allowed=False; s.commit()
    await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –∑–∞–ø—Ä–µ—â—ë–Ω.')

async def health(update, context):
    try:
        with get_session() as s:
            s.execute(text("SELECT 1"))
        await update.message.reply_text("OK: DB connection")
    except Exception:
        logging.exception("/health failed")
        await update.message.reply_text("FAIL: DB connection")

async def stats(update, context):
    try:
        with get_session() as s:
            dialogs = s.execute(select(func.count(M.Dialog.id))).scalar() or 0
            messages = s.execute(select(func.count(M.Message.id))).scalar() or 0
            docs = s.execute(select(func.count(M.KbDocument.id))).scalar() or 0
        await update.message.reply_text(f"–î–∏–∞–ª–æ–≥–æ–≤: {dialogs}\n–°–æ–æ–±—â–µ–Ω–∏–π: {messages}\n–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–ó: {docs}")
    except Exception:
        logging.exception("/stats failed")
        await update.message.reply_text("‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def reset(update, context):
    context.user_data.clear()
    await update.message.reply_text('–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω.')

FILTERS = ['all','connected','available']

from telegram import InlineKeyboardMarkup, InlineKeyboardButton

def _kb_build_keyboard(docs, page:int, pages:int, filter_name:str, connected_ids:set[int], is_admin:bool):
    rows=[]
    for d in docs:
        checked = '‚òë' if d.id in connected_ids else '‚òê'
        label = f"{checked} {d.path.split('/')[-1]}"
        rows.append([InlineKeyboardButton(label, callback_data=f"kb:toggle:{d.id}:{page}:{filter_name}")])
    nav=[]
    if page>1:
        nav.append(InlineKeyboardButton('¬´ –ù–∞–∑–∞–¥', callback_data=f"kb:list:{page-1}:{filter_name}"))
    nav.append(InlineKeyboardButton(f'{page}/{pages}', callback_data='kb:nop'))
    if page<pages:
        nav.append(InlineKeyboardButton('–í–ø–µ—Ä—ë–¥ ¬ª', callback_data=f"kb:list:{page+1}:{filter_name}"))
    if nav: rows.append(nav)
    filt = [InlineKeyboardButton(('üîµ ' if filter_name=='all' else '')+'–í—Å–µ', callback_data='kb:list:1:all'),
            InlineKeyboardButton(('üîµ ' if filter_name=='connected' else '')+'–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ', callback_data='kb:list:1:connected'),
            InlineKeyboardButton(('üîµ ' if filter_name=='available' else '')+'–î–æ—Å—Ç—É–ø–Ω—ã–µ', callback_data='kb:list:1:available')]
    rows.append(filt)
    if is_admin:
        rows.append([InlineKeyboardButton('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', callback_data='kb:sync')])
    rows.append([InlineKeyboardButton('üìÅ –°—Ç–∞—Ç—É—Å –ë–ó', callback_data='kb:status')])
    return InlineKeyboardMarkup(rows)

async def kb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _kb_show(update.effective_user.id, update, context, 1, 'all', new_message=True)

async def _kb_show(tg_user_id:int, update_or_callback, context, page:int, filter_name:str, new_message:bool=False):
    dbu, dlg = _ensure_user_and_dialog(tg_user_id)
    PAGE=8
    with get_session() as s:
        conn_ids = {r[0] for r in s.execute(select(M.DialogKbLink.document_id).where(M.DialogKbLink.dialog_id==dlg.id)).all()}
        q = select(M.KbDocument).where(M.KbDocument.is_active==True)
        if filter_name=='connected':
            if conn_ids:
                q = q.where(M.KbDocument.id.in_(conn_ids))
            else:
                docs=[]
                keyboard=_kb_build_keyboard(docs, 1, 1, filter_name, conn_ids, dbu.is_admin)
                text='–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.'
                return await _kb_reply(update_or_callback, keyboard, text, new_message)
        elif filter_name=='available':
            if conn_ids:
                q = q.where(M.KbDocument.id.notin_(conn_ids))
        total = len(s.execute(q).scalars().all())
        pages = max(1, (total + PAGE - 1)//PAGE)
        page = max(1, min(page, pages))
        docs = s.execute(q.order_by(M.KbDocument.path).offset((page-1)*PAGE).limit(PAGE)).scalars().all()
    kb = _kb_build_keyboard(docs, page, pages, filter_name, conn_ids, dbu.is_admin)
    text = '–ú–µ–Ω—é –ë–ó: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –¥–∏–∞–ª–æ–≥—É.'
    await _kb_reply(update_or_callback, kb, text, new_message)

async def _kb_reply(update_or_callback, keyboard, text, new_message=False):
    if hasattr(update_or_callback, 'message') and new_message:
        await update_or_callback.message.reply_text(text, reply_markup=keyboard)
    else:
        try:
            await update_or_callback.callback_query.edit_message_text(text, reply_markup=keyboard)
        except Exception:
            await update_or_callback.callback_query.message.reply_text(text, reply_markup=keyboard)

async def kb_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    data = q.data or ''
    user_id = update.effective_user.id
    if data.startswith('kb:list:'):
        _,_,page,filter_name = data.split(':',3)
        await _kb_show(user_id, update, context, int(page), filter_name)
        return
    if data.startswith('kb:toggle:'):
        _,_,doc_id,page,filter_name = data.split(':',4)
        dbu, dlg = _ensure_user_and_dialog(user_id)
        with get_session() as s:
            link = s.execute(select(M.DialogKbLink).where(M.DialogKbLink.dialog_id==dlg.id, M.DialogKbLink.document_id==int(doc_id))).scalar_one_or_none()
            if link:
                s.delete(link); s.commit()
            else:
                s.add(M.DialogKbLink(dialog_id=dlg.id, document_id=int(doc_id))); s.commit()
        await _kb_show(user_id, update, context, int(page), filter_name)
        return
    if data=='kb:sync':
        if not _user_is_admin(user_id):
            await q.edit_message_text('–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á—ë–Ω.'); return
        with get_session() as s:
            res = sync_kb(s)
        await q.edit_message_text(f'–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {res}'); return
    if data=='kb:status':
        with get_session() as s:
            docs = s.execute(select(func.count(M.KbDocument.id))).scalar() or 0
            chunks = s.execute(select(func.count(M.KbChunk.id))).scalar() or 0
        await q.edit_message_text(f'–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {docs}\n–ß–∞–Ω–∫–æ–≤: {chunks}')
        return
    if data=='kb:nop':
        return

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    import traceback, logging
    logging.exception("Unhandled error: %s", traceback.format_exc())
    # –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if hasattr(update, "message") and update.message:
            await update.message.reply_text("‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        elif hasattr(update, "callback_query") and update.callback_query:
            await update.callback_query.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception:
        pass

async def dialogs_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    dbu, _ = _ensure_user_and_dialog(user.id)
    with get_session() as s:
        ds = s.execute(select(M.Dialog).join(M.User, M.User.id==M.Dialog.user_id).where(M.User.tg_user_id==user.id, M.Dialog.is_deleted==False).order_by(M.Dialog.created_at.desc())).scalars().all()
    rows=[]
    for d in ds:
        rows.append([InlineKeyboardButton(f'üìÑ {d.title or d.id}', callback_data=f'dlg:open:{d.id}'),
                     InlineKeyboardButton('‚úèÔ∏è', callback_data=f'dlg:rename:{d.id}'),
                     InlineKeyboardButton('üì§', callback_data=f'dlg:export:{d.id}'),
                     InlineKeyboardButton('üóë', callback_data=f'dlg:delete:{d.id}')])
    if not rows:
        await update.message.reply_text('–î–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç.')
        return
    await update.message.reply_text('–ú–æ–∏ –¥–∏–∞–ª–æ–≥–∏:', reply_markup=InlineKeyboardMarkup(rows))

async def dialog_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q=update.callback_query; await q.answer()
    data=q.data or ''
    if data.startswith('dlg:open:'):
        dlg_id=int(data.split(':')[-1])
        with get_session() as s:
            dlg=s.get(M.Dialog, dlg_id)
            if dlg:
                await q.edit_message_text(f'–û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥ #{dlg_id}: {dlg.title}')
        return
    if data.startswith('dlg:rename:'):
        dlg_id=int(data.split(':')[-1])
        context.user_data['rename_dialog_id']=dlg_id
        await q.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:')
        return
    if data.startswith('dlg:export:'):
        dlg_id=int(data.split(':')[-1])
        with get_session() as s:
            msgs=s.execute(select(M.Message).where(M.Message.dialog_id==dlg_id).order_by(M.Message.created_at)).scalars().all()
        content = ['# –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞\n']
        for m in msgs:
            role = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if m.role=='user' else '–ë–æ—Ç'
            content.append(f'**{role}:**\n{m.content}\n')
        data_bytes='\n'.join(content).encode('utf-8')
        await q.message.reply_document(document=InputFile.from_bytes(data_bytes, filename=f'dialog_{dlg_id}.md'), caption='–≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤')
        return
    if data.startswith('dlg:delete:'):
        dlg_id=int(data.split(':')[-1])
        with get_session() as s:
            dlg=s.get(M.Dialog, dlg_id)
            if dlg: dlg.is_deleted=True; s.commit()
        await q.edit_message_text(f'–î–∏–∞–ª–æ–≥ #{dlg_id} —É–¥–∞–ª—ë–Ω')
        return

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'rename_dialog_id' in context.user_data:
        dlg_id = context.user_data.pop('rename_dialog_id')
        new_title = update.message.text.strip()[:100]
        with get_session() as s:
            dlg=s.get(M.Dialog, dlg_id)
            if dlg:
                dlg.title=new_title; s.commit()
        await update.message.reply_text('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
        return
    await handle_text_message(update, context)

async def voice_message(update, context):
    v=update.message.voice or update.message.audio or update.message.video_note
    if not v: return
    f=await context.bot.get_file(v.file_id)
    fp=f"/tmp/{v.file_unique_id}.ogg"; await f.download_to_drive(custom_path=fp)
    text=await transcribe_audio(fp)
    await update.message.reply_text(f'–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}')
    await handle_text_message(update, context, override_text=text)

async def img_cmd(update, context):
    prompt=' '.join(context.args) if context.args else ''
    if not prompt: await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /img <–æ–ø–∏—Å–∞–Ω–∏–µ>'); return
    img_bytes=await generate_image(prompt)
    await update.message.reply_photo(photo=img_bytes, caption='–ì–æ—Ç–æ–≤–æ.')

async def model_cmd(update, context):
    await update.message.reply_text(f'–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {_settings.openai_model} (—Å–ø–∏—Å–æ–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)')

async def mode_cmd(update, context):
    await update.message.reply_text('–†–µ–∂–∏–º—ã: ceo | expert | pro | user (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ‚Äî TODO)')

async def handle_text_message(update, context, override_text: str|None=None):
    user=update.effective_user
    text=override_text or (update.message and update.message.text) or ''
    if not text: return
    with get_session() as s:
        dbu=s.execute(select(M.User).where(M.User.tg_user_id==user.id)).scalar_one_or_none()
        if not dbu or (not dbu.is_allowed and not dbu.is_admin):
            await update.message.reply_text('–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'); return
        dlg=s.execute(select(M.Dialog).where(M.Dialog.user_id==dbu.id, M.Dialog.is_deleted==False).order_by(M.Dialog.created_at.desc())).scalar_one_or_none()
        if not dlg:
            dlg=M.Dialog(user_id=dbu.id, title=datetime.now().strftime('%Y-%m-%d | –¥–∏–∞–ª–æ–≥'), style='expert', model=_settings.openai_model); s.add(dlg); s.commit()
        try:
            ctx_rows=await retrieve_context(s, dlg.id, text, _settings.kb_top_k)
        except Exception:
            ctx_rows=[]

        context_block=''; cites=[]
        for r in ctx_rows:
            snippet=(r['content'] or '')[:300].replace('\n',' ')
            context_block+=f'- {snippet}\n'
            cites.append(f"{r['path']}")

        sys_prompt='–¢—ã ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–ó, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.'
        msgs=[{'role':'system','content':sys_prompt}]
        if context_block:
            msgs.append({'role':'system','content':'–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–ó:\n'+context_block})
        msgs.append({'role':'user','content':text})

        try:
            answer=await chat(msgs, model=dlg.model or _settings.openai_model, max_tokens=800)
        except Exception:
            await update.message.reply_text('‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.'); return

    if cites:
        answer+='\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏: '+ '; '.join(sorted(set(cites))[:5])
    await update.message.reply_text(answer)


async def kb_diag(update, context):
    with get_session() as s:
        docs = s.execute(select(func.count(M.KbDocument.id))).scalar() or 0
        chunks = s.execute(select(func.count(M.KbChunk.id))).scalar() or 0
        links = s.execute(select(func.count(M.DialogKbLink.id))).scalar() or 0
    await update.message.reply_text(f"–ë–ó: –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤={docs}, —á–∞–Ω–∫–æ–≤={chunks}, —Å–≤—è–∑–µ–π={links}")

def build_app()->Application:
    app=Application.builder().token(_settings.telegram_bot_token).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_cmd))
    app.add_handler(CommandHandler('whoami', whoami))
    app.add_handler(CommandHandler('grant', grant))
    app.add_handler(CommandHandler('revoke', revoke))
    app.add_handler(CommandHandler('stats', stats))
    app.add_handler(CommandHandler('reset', reset))
    app.add_handler(CommandHandler('kb_diag', kb_diag))
    app.add_handler(CommandHandler('kb', kb))
    app.add_handler(CallbackQueryHandler(kb_cb, pattern=r'^kb:'))
    app.add_handler(CommandHandler('dialogs', dialogs_cmd))
    app.add_handler(CallbackQueryHandler(dialog_cb, pattern=r'^dlg:'))
    app.add_handler(CommandHandler('img', img_cmd))
    app.add_handler(CommandHandler('model', model_cmd))
    app.add_handler(CommandHandler('mode', mode_cmd))
    app.add_handler(MessageHandler(filters.VOICE | filters.AUDIO | filters.VIDEO_NOTE, voice_message))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), text_router))
    app.add_handler(CommandHandler('health', health))
    app.add_error_handler(on_error)
    return app
