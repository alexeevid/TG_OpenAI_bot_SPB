# bot/telegram_bot.py
from __future__ import annotations

import asyncio
import io
import logging
from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional, Tuple

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    MenuButtonCommands,
    BotCommandScopeDefault,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllChatAdministrators,
)
from telegram.constants import ChatAction
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

logger = logging.getLogger(__name__)

# --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π (KB) ---
KB_AVAILABLE = True
try:
    from bot.knowledge_base.indexer import KnowledgeBaseIndexer
    from bot.knowledge_base.retriever import KnowledgeBaseRetriever, IndexBuilder
    from bot.knowledge_base.context_manager import ContextManager
except Exception as e:
    KB_AVAILABLE = False
    logger.warning("KB unavailable: %s", e)


# --- –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏ ---
@dataclass
class DialogState:
    dialog_id: int
    title: str = "–î–∏–∞–ª–æ–≥"
    created_at_ts: float = 0.0
    updated_at_ts: float = 0.0
    model: Optional[str] = None
    style: str = "Pro"
    # –ë–ó:
    kb_selected_docs: List[str] = field(default_factory=list)  # –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    kb_strict: bool = True                                    # STRICT: —Ç–æ–ª—å–∫–æ –∏–∑ –ë–ó, HYBRID: KB-first
    kb_focus_doc: Optional[str] = None                        # –µ—Å–ª–∏ –∑–∞–¥–∞–Ω ‚Äî —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–µ


class ChatGPTTelegramBot:
    def __init__(self, openai, settings):
        self.openai = openai
        self.settings = settings

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
        self.admin_ids = set(getattr(settings, "admin_user_ids", []) or getattr(settings, "admin_set", []) or [])
        self.allowed_ids = set(getattr(settings, "allowed_user_ids", []) or getattr(settings, "allowed_set", []) or [])

        # –î–∏–∞–ª–æ–≥–∏
        self._dialogs_by_user: Dict[int, Dict[int, DialogState]] = {}
        self._current_dialog_by_user: Dict[int, int] = {}
        self._next_dialog_id: int = 1

        # KB
        self.kb_indexer: Optional[KnowledgeBaseIndexer] = None
        self.kb_retriever: Optional[KnowledgeBaseRetriever] = None
        self.kb_ctx: Optional[ContextManager] = None
        self.kb_builder: Optional[IndexBuilder] = None
        if KB_AVAILABLE:
            try:
                self.kb_indexer = KnowledgeBaseIndexer(settings)
                self.kb_retriever = KnowledgeBaseRetriever(settings)
                self.kb_retriever.ensure_index()  # –ø–æ–¥–≥—Ä—É–∑–∏–º on-disk, –µ—Å–ª–∏ –µ—Å—Ç—å
                self.kb_ctx = ContextManager()
                self.kb_builder = IndexBuilder(settings, self.kb_retriever)
            except Exception as e:
                logger.exception("KB init failed: %s", e)

    # ========== –ö–æ–º–∞–Ω–¥—ã/–º–µ–Ω—é ==========
    def _build_commands(self) -> List[BotCommand]:
        return [
            BotCommand("help", "–ø–æ–º–æ—â—å"),
            BotCommand("reset", "—Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
            BotCommand("stats", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("kb", "–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"),
            BotCommand("model", "–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI"),
            BotCommand("mode", "—Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤"),
            BotCommand("dialogs", "—Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"),
            BotCommand("img", "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
            BotCommand("web", "–≤–µ–±-–ø–æ–∏—Å–∫"),
        ]

    async def setup_commands(self, app: Application):
        """post_init callback (Application.builder().post_init(self.setup_commands))"""
        commands = self._build_commands()
        try:
            await app.bot.set_chat_menu_button(menu_button=MenuButtonCommands())
        except Exception:
            pass
        scopes = [
            BotCommandScopeDefault(),
            BotCommandScopeAllPrivateChats(),
            BotCommandScopeAllChatAdministrators(),
        ]
        for scope in scopes:
            try:
                await app.bot.delete_my_commands(scope=scope)
            except Exception:
                pass
            await app.bot.set_my_commands(commands=commands, scope=scope)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (global scopes)")

    # ========== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ==========
    def install(self, app: Application) -> None:
        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.cmd_start))
        app.add_handler(CommandHandler("help", self.cmd_help))
        app.add_handler(CommandHandler("reset", self.cmd_reset))
        app.add_handler(CommandHandler("stats", self.cmd_stats))
        app.add_handler(CommandHandler("model", self.cmd_model))
        app.add_handler(CommandHandler("mode", self.cmd_mode))
        app.add_handler(CommandHandler("dialogs", self.cmd_dialogs))
        app.add_handler(CommandHandler("img", self.cmd_img))
        app.add_handler(CommandHandler("web", self.cmd_web))
        # KB
        app.add_handler(CommandHandler("kb", self.cmd_kb))

        # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        app.add_handler(MessageHandler(filters.VOICE, self.on_voice))
        app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, self.on_file_or_photo))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_text))

        # Inline callbacks
        app.add_handler(CallbackQueryHandler(self.on_callback))

    # ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ==========
    def _ensure_dialog(self, user_id: int) -> DialogState:
        user_dialogs = self._dialogs_by_user.setdefault(user_id, {})
        if user_id not in self._current_dialog_by_user or self._current_dialog_by_user[user_id] not in user_dialogs:
            dlg_id = self._next_dialog_id
            self._next_dialog_id += 1
            st = DialogState(dialog_id=dlg_id)
            user_dialogs[dlg_id] = st
            self._current_dialog_by_user[user_id] = dlg_id
        return user_dialogs[self._current_dialog_by_user[user_id]]

    def _list_dialogs(self, user_id: int) -> List[DialogState]:
        return list(self._dialogs_by_user.get(user_id, {}).values())

    async def _send_typing(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        try:
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        except Exception:
            pass

    def _is_admin(self, user_id: int) -> bool:
        return user_id in self.admin_ids if self.admin_ids else True  # –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å–µ –∞–¥–º–∏–Ω—ã

    # ========== –ö–æ–º–∞–Ω–¥—ã ==========
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        self._ensure_dialog(update.effective_user.id)
        await update.effective_message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n–ö–æ–º–∞–Ω–¥—ã: /help, /reset, /stats, /kb, /model, /mode, /dialogs, /img, /web"
        )

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = (
            "/reset ‚Äî —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥)\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/kb ‚Äî –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è/–≤—ã–±–æ—Ä/—Ä–µ–∂–∏–º)\n"
            "/model ‚Äî –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI\n"
            "/mode ‚Äî —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤\n"
            "/dialogs ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (–æ—Ç–∫—Ä—ã—Ç—å/—É–¥–∞–ª–∏—Ç—å)\n"
            "/img ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "/web ‚Äî –≤–µ–±-–ø–æ–∏—Å–∫\n"
        )
        await update.effective_message.reply_text(text)

    async def cmd_reset(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dlg_id = self._next_dialog_id
        self._next_dialog_id += 1
        self._dialogs_by_user.setdefault(user_id, {})[dlg_id] = DialogState(dialog_id=dlg_id)
        self._current_dialog_by_user[user_id] = dlg_id
        await update.effective_message.reply_text("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        kb_list = ", ".join(st.kb_selected_docs) if st.kb_selected_docs else "‚Äî"
        text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"- –î–∏–∞–ª–æ–≥: {st.title}\n"
            f"- –ú–æ–¥–µ–ª—å: {st.model or getattr(self.settings, 'openai_model', 'gpt-4o')}\n"
            f"- –°—Ç–∏–ª—å: {st.style}\n"
            f"- –†–µ–∂–∏–º –ë–ó: {'STRICT' if st.kb_strict else 'HYBRID'}\n"
            f"- –í—ã–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(st.kb_selected_docs)}\n"
            f"- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {kb_list}"
        )
        await update.effective_message.reply_text(text)

    async def cmd_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        try:
            models = self.openai.list_models_for_menu()
        except Exception as e:
            logger.exception("list_models failed: %s", e)
            await update.effective_message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
            return

        rows = []
        current = st.model or getattr(self.settings, "openai_model", None)
        for name in models:
            mark = "‚úÖ " if name == current else ""
            rows.append([InlineKeyboardButton(f"{mark}{name}", callback_data=f"model:{name}")])
        kb = InlineKeyboardMarkup(rows)
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=kb)

    async def cmd_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        modes = ["Pro", "Expert", "User", "CEO"]
        rows = []
        for m in modes:
            mark = "‚úÖ " if st.style == m else ""
            rows.append([InlineKeyboardButton(f"{mark}{m}", callback_data=f"mode:{m}")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_dialogs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        dialogs = self._list_dialogs(user_id)
        current_id = self._current_dialog_by_user.get(user_id)
        if not dialogs:
            await update.effective_message.reply_text("–î–∏–∞–ª–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ /reset –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.")
            return

        rows = []
        for d in dialogs:
            title = d.title or f"–î–∏–∞–ª–æ–≥ #{d.dialog_id}"
            prefix = "‚≠ê " if d.dialog_id == current_id else ""
            rows.append([
                InlineKeyboardButton(f"{prefix}{title}", callback_data=f"open:{d.dialog_id}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"del:{d.dialog_id}"),
            ])
        rows.append([InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", callback_data="newdlg")])
        await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥:", reply_markup=InlineKeyboardMarkup(rows))

    async def cmd_img(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /img <–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>")
            return
        prompt = " ".join(context.args)
        await self._send_typing(update.effective_chat.id, context)
        try:
            img_bytes, used_prompt = await asyncio.to_thread(self.openai.generate_image, prompt, None)
            bio = io.BytesIO(img_bytes)
            bio.name = "image.png"
            await update.effective_message.reply_photo(photo=bio, caption=f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ prompt:\n{used_prompt}")
        except Exception as e:
            logger.exception("Image generation failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    async def cmd_web(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /web <–∑–∞–ø—Ä–æ—Å>")
            return
        query = " ".join(context.args)
        await self._send_typing(update.effective_chat.id, context)
        try:
            answer, sources = await asyncio.to_thread(self.openai.web_answer, query)
            if sources:
                src_text = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(f"‚Ä¢ {u}" for u in sources)
            else:
                src_text = "\n\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —è–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
            await update.effective_message.reply_text(answer + src_text)
        except Exception as e:
            logger.exception("Web search failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")

    async def cmd_kb(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        st = self._ensure_dialog(user_id)

        if not KB_AVAILABLE or not (self.kb_indexer and self.kb_retriever and self.kb_ctx and self.kb_builder):
            await update.effective_message.reply_text("–ú–æ–¥—É–ª—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.")
            return

        # 1) –µ—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä—è–º–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        new_badge = ""
        if self._is_admin(user_id):
            try:
                added, updated, deleted, unchanged = await asyncio.to_thread(self.kb_indexer.sync)
                if (added or updated):
                    new_badge = f" (–Ω–æ–≤—ã–µ/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ: {added + updated})"
            except Exception as e:
                logger.exception("KB sync failed: %s", e)
                await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                return

        # 2) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs = [d.__dict__ for d in self.kb_indexer.list_all()]
        if not docs:
            await update.effective_message.reply_text("–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return

        rows: List[List[InlineKeyboardButton]] = []
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ä–µ–∂–∏–º–∞
        rows.append([InlineKeyboardButton(
            f"–†–µ–∂–∏–º: {'STRICT' if st.kb_strict else 'HYBRID'}", callback_data=f"kb:strict:{0 if st.kb_strict else 1}"
        )])
        # –§–æ–∫—É—Å
        if st.kb_focus_doc:
            rows.append([InlineKeyboardButton("üéØ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ–∫—É—Å", callback_data="kb:unfocus")])

        # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        for d in docs:
            doc_id = d["doc_id"]
            title = d.get("title") or doc_id
            mark = "‚úÖ" if doc_id in st.kb_selected_docs else "‚¨ú"
            if st.kb_focus_doc == doc_id:
                title = f"[F] {title}"
            rows.append([
                InlineKeyboardButton(f"{mark} {title}", callback_data=f"kb:pick:{doc_id}"),
                InlineKeyboardButton("üéØ", callback_data=f"kb:focus:{doc_id}"),
            ])

        header = "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π" + new_badge
        await update.effective_message.reply_text(header, reply_markup=InlineKeyboardMarkup(rows))

    # ========== –°–æ–æ–±—â–µ–Ω–∏—è ==========
    async def on_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        user_text = update.effective_message.text

        await self._send_typing(update.effective_chat.id, context)

        kb_ctx_text = None
        chunks = []
        if KB_AVAILABLE and self.kb_retriever and self.kb_ctx and st.kb_selected_docs:
            doc_scope = [st.kb_focus_doc] if st.kb_focus_doc else list(st.kb_selected_docs)
            try:
                chunks = await asyncio.to_thread(
                    self.kb_retriever.retrieve, user_text, doc_scope, self.openai.embed_texts, 8
                )
                kb_ctx_text = self.kb_ctx.build_context(chunks) if chunks else None
            except Exception as e:
                logger.warning("KB retrieve failed: %s", e)

        # strict –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ‚Äî —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        if st.kb_selected_docs and st.kb_strict and not kb_ctx_text:
            await update.effective_message.reply_text(
                "–í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –∑–∞–ø—Ä–æ—Å—É."
            )
            return

        try:
            reply = await asyncio.to_thread(
                self.openai.chat,
                user_text,
                st.model or getattr(self.settings, "openai_model", None),
                getattr(self.settings, "openai_temperature", 0.2),
                st.style,
                kb_ctx_text,
                st.kb_selected_docs and st.kb_strict,
            )
            footer = self.kb_ctx.build_sources_footer(chunks) if chunks else ""
            await update.effective_message.reply_text(reply + (footer if footer else ""))
        except Exception as e:
            logger.exception("text chat failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")

    async def on_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        st = self._ensure_dialog(update.effective_user.id)
        file = await update.effective_message.voice.get_file()
        file_bytes = await file.download_as_bytearray()

        await self._send_typing(update.effective_chat.id, context)
        try:
            transcript = await asyncio.to_thread(self.openai.transcribe_audio, bytes(file_bytes))
        except Exception as e:
            logger.exception("transcribe failed: %s", e)
            await update.effective_message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ: {e}")
            return

        kb_ctx_text = None
        chunks = []
        if KB_AVAILABLE and self.kb_retriever and self.kb_ctx and st.kb_selected_docs:
            doc_scope = [st.kb_focus_doc] if st.kb_focus_doc else list(st.kb_selected_docs)
            try:
                chunks = await asyncio.to_thread(
                    self.kb_retriever.retrieve, transcript, doc_scope, self.openai.embed_texts, 8
                )
                kb_ctx_text = self.kb_ctx.build_context(chunks) if chunks else None
            except Exception as e:
                logger.warning("KB retrieve failed: %s", e)

        if st.kb_selected_docs and st.kb_strict and not kb_ctx_text:
            await update.effective_message.reply_text(
                f"üéôÔ∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {transcript}\n\n"
                "–í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –∑–∞–ø—Ä–æ—Å—É."
            )
            return

        try:
            reply = await asyncio.to_thread(
                self.openai.chat,
                transcript,
                st.model or getattr(self.settings, "openai_model", None),
                getattr(self.settings, "openai_temperature", 0.2),
                st.style,
                kb_ctx_text,
                st.kb_selected_docs and st.kb_strict,
            )
            footer = self.kb_ctx.build_sources_footer(chunks) if chunks else ""
            await update.effective_message.reply_text(f"üéôÔ∏è –í—ã —Å–∫–∞–∑–∞–ª–∏: {transcript}\n\n–û—Ç–≤–µ—Ç:\n{reply}" + (footer if footer else ""))
        except Exception as e:
            logger.exception("voice chat failed: %s", e)
            await update.effective_message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}")

    async def on_file_or_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞/—Ñ–æ—Ç–æ ‚Äî —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–ó).
        """
        message = update.effective_message
        await self._send_typing(update.effective_chat.id, context)

        try:
            if message.document:
                file = await message.document.get_file()
                content = await file.download_as_bytearray()
                summary = await asyncio.to_thread(self._analyze_doc, bytes(content), message.document.file_name)
                await message.reply_text(f"üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {message.document.file_name}\n–ê–Ω–∞–ª–∏–∑:\n{summary}")
            elif message.photo:
                file = await message.photo[-1].get_file()
                content = await file.download_as_bytearray()
                summary = await asyncio.to_thread(self._analyze_img, bytes(content))
                await message.reply_text(f"üñºÔ∏è –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ê–Ω–∞–ª–∏–∑:\n{summary}")
        except Exception as e:
            logger.exception("file/photo analyze failed: %s", e)
            await message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ: {e}")

    def _analyze_doc(self, content: bytes, name: str) -> str:
        # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ —á–µ—Ä–µ–∑ vision –∏–ª–∏ text scanner)
        prompt = f"–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç '{name}', –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ –∫–∞–∫ –µ–≥–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å."
        return self.openai.chat(prompt, model="gpt-4o-mini", temperature=0.2, style="Pro")

    def _analyze_img(self, content: bytes) -> str:
        prompt = "–û–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –≤—ã–≤–æ–¥—ã –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
        return self.openai.chat(prompt, model="gpt-4o-mini", temperature=0.2, style="Pro")

    # ========== Inline callbacks ==========
    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        if not query:
            return
        await query.answer()

        data = query.data or ""
        user_id = update.effective_user.id
        st = self._ensure_dialog(user_id)

        # model:<name>
        if data.startswith("model:"):
            name = data.split(":", 1)[1]
            st.model = name
            await query.edit_message_text(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {name}")
            return

        # mode:<name>
        if data.startswith("mode:"):
            name = data.split(":", 1)[1]
            st.style = name
            await query.edit_message_text(f"–°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {name}")
            return

        # dialogs
        if data == "newdlg":
            dlg_id = self._next_dialog_id
            self._next_dialog_id += 1
            self._dialogs_by_user.setdefault(user_id, {})[dlg_id] = DialogState(dialog_id=dlg_id)
            self._current_dialog_by_user[user_id] = dlg_id
            await query.edit_message_text("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
            return

        if data.startswith("open:"):
            dlg_id = int(data.split(":", 1)[1])
            if dlg_id in self._dialogs_by_user.get(user_id, {}):
                self._current_dialog_by_user[user_id] = dlg_id
                await query.edit_message_text(f"–û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥ #{dlg_id}.")
            else:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if data.startswith("del:"):
            dlg_id = int(data.split(":", 1)[1])
            if dlg_id in self._dialogs_by_user.get(user_id, {}):
                del self._dialogs_by_user[user_id][dlg_id]
                if self._current_dialog_by_user.get(user_id) == dlg_id:
                    rest = list(self._dialogs_by_user.get(user_id, {}).keys())
                    self._current_dialog_by_user[user_id] = rest[0] if rest else None
                await query.edit_message_text(f"–î–∏–∞–ª–æ–≥ #{dlg_id} —É–¥–∞–ª–µ–Ω.")
            else:
                await query.edit_message_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # -------------- KB callbacks --------------
        if data.startswith("kb:strict:"):
            v = int(data.split(":", 2)[2])
            st.kb_strict = bool(v)
            await query.edit_message_text(f"–†–µ–∂–∏–º –ë–ó: {'STRICT' if st.kb_strict else 'HYBRID'}")
            return

        if data == "kb:unfocus":
            st.kb_focus_doc = None
            await query.edit_message_text("–§–æ–∫—É—Å –Ω–∞ –∫–Ω–∏–≥–µ —Å–Ω—è—Ç.")
            return

        if data.startswith("kb:focus:"):
            doc_id = data.split(":", 2)[2]
            st.kb_focus_doc = doc_id
            if doc_id not in st.kb_selected_docs:
                st.kb_selected_docs.append(doc_id)
            await query.edit_message_text("–§–æ–∫—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return

        if data.startswith("kb:pick:"):
            doc_id = data.split(":", 2)[2]
            if doc_id in st.kb_selected_docs:
                st.kb_selected_docs.remove(doc_id)
                if st.kb_focus_doc == doc_id:
                    st.kb_focus_doc = None
            else:
                st.kb_selected_docs.append(doc_id)
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω.")
            return
