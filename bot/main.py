# bot/main.py
import logging
from telegram.ext import Application
from telegram import BotCommand

from bot.config import load_settings
from bot.telegram_bot import ChatGPTTelegramBot
from bot.openai_helper import OpenAIHelper

# ‚Äî‚Äî‚Äî –í–∫–ª—é—á–∞–µ–º DEBUG-–ª–æ–≥–∏ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s %(levelname)-5s %(name)s: %(message)s"
)
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def build_application() -> Application:
    settings = load_settings()

    # OpenAI helper –≤ –≤–∞—à–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
    openai = OpenAIHelper(api_key=settings.openai_api_key)

    # –ù–∞—à –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    bot = ChatGPTTelegramBot(openai=openai, settings=settings)

    async def _post_init(app: Application):
        # 1) –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≥–∞—Å–∏–º –≤–µ–±—Ö—É–∫ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ¬´–∑–∞–≤–∏—Å—à–∏–µ¬ª –∞–ø–¥–µ–π—Ç—ã
        await app.bot.delete_webhook(drop_pending_updates=True)
        me = await app.bot.get_me()
        logger.info("ü§ñ Connected as @%s (id=%s)", me.username, me.id)

        # 2) –°—Ç–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—ã:
        try:
            if hasattr(bot, "setup_commands") and callable(getattr(bot, "setup_commands")):
                # –ï—Å–ª–∏ –≤ –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ –≤–¥—Ä—É–≥ –ø–æ—è–≤–∏—Ç—Å—è –º–µ—Ç–æ–¥ setup_commands(app)
                await bot.setup_commands(app)
            elif hasattr(bot, "_post_init") and callable(getattr(bot, "_post_init")):
                # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π _post_init(app), –æ—Ç–¥–∞–¥–∏–º –µ–º—É –ø—Ä–∞–≤–æ –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
                await bot._post_init(app)  # type: ignore[attr-defined]
            elif hasattr(bot, "_apply_bot_commands") and callable(getattr(bot, "_apply_bot_commands")):
                # –°—Ç–∞—Ä–æ–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ API ‚Äî  —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Å–µ—Ö scope
                await bot._apply_bot_commands(app.bot, lang=getattr(bot.settings, "bot_language", None))  # type: ignore[attr-defined]
            else:
                # –§–æ–ª–±—ç–∫: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                commands = [
                    BotCommand("help", "–ø–æ–º–æ—â—å"),
                    BotCommand("reset", "—Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"),
                    BotCommand("stats", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                    BotCommand("kb", "–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"),
                    BotCommand("model", "–≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"),
                    BotCommand("mode", "—Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤"),
                    BotCommand("dialogs", "–¥–∏–∞–ª–æ–≥–∏"),
                    BotCommand("img", "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                    BotCommand("web", "–≤–µ–±-–ø–æ–∏—Å–∫"),
                ]
                await app.bot.set_my_commands(commands=commands)
                logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (fallback)")
        except Exception as e:
            logger.exception("setup_commands failed: %s", e)

    # –°–±–æ—Ä–∫–∞ Application —Å post_init
    builder = (
        Application.builder()
        .token(settings.telegram_bot_token)
        .post_init(_post_init)
    )
    app = builder.build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    bot.install(app)

    return app


def main() -> None:
    logger.info("üîí Advisory-lock –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.")
    app = build_application()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (run_polling)...")

    # –í–ê–ñ–ù–û: –∑–∞–ø—É—Å–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã
    app.run_polling(
        drop_pending_updates=True,
        allowed_updates=None,
    )


if __name__ == "__main__":
    main()
