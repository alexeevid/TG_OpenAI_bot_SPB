# bot/main.py
from __future__ import annotations

import logging
from telegram.ext import Application

from bot.config import load_settings
from bot.telegram_bot import ChatGPTTelegramBot
from bot.openai_helper import OpenAIHelper

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s:%(name)s:%(message)s",
)

# –ø—Ä–∏–≥–ª—É—à–∞–µ–º —à—É–º
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram.request").setLevel(logging.WARNING)
logging.getLogger("yadisk").setLevel(logging.WARNING)

# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –¢–û–õ–¨–ö–û getUpdates:
class _DropGetUpdates(logging.Filter):
    def filter(self, record: logging.LogRecord) -> bool:
        try:
            return "getUpdates" not in record.getMessage()
        except Exception:
            return True

logging.getLogger("httpx").addFilter(_DropGetUpdates())

def build_application() -> Application:
    settings = load_settings()

    # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ api_key, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—ã.
    openai = OpenAIHelper(
        api_key=settings.openai_api_key
        # –ï—Å–ª–∏ –≤–∞—à OpenAIHelper –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ,
        # –Ω–æ —Å–µ–π—á–∞—Å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞—à–µ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π.
    )

    # ‚ö†Ô∏è –°–æ–∑–¥–∞—ë–º bot –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ setup_commands –≤ post_init:
    bot = ChatGPTTelegramBot(openai=openai, settings=settings)

    # ‚úÖ post_init –≤—ã–∑–æ–≤–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ initialize():
    builder = (
        Application.builder()
        .token(settings.telegram_bot_token)
        .post_init(bot.setup_commands)  # <-- –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
    )
    app = builder.build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    bot.install(app)

    return app


def main() -> None:
    logger.info("üîí Advisory-lock –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.")
    app = build_application()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (run_polling)...")
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ (PTB —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop):
    app.run_polling(allowed_updates=["message", "edited_message", "callback_query"])


if __name__ == "__main__":
    main()
