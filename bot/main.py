# bot/main.py
from __future__ import annotations

import logging
from telegram.ext import Application

from bot.config import load_settings
from bot.telegram_bot import ChatGPTTelegramBot
from bot.openai_helper import OpenAIHelper

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

async def _post_init(app: Application):
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ,
    —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ polling –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.
    """
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook —É–¥–∞–ª—ë–Ω (drop_pending_updates=True). –†–∞–±–æ—Ç–∞–µ–º –≤ polling.")
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: %s", e)

def build_application() -> Application:
    settings = load_settings()

    openai = OpenAIHelper(api_key=settings.openai_api_key)

    bot = ChatGPTTelegramBot(openai=openai, settings=settings)

    builder = (
        Application.builder()
        .token(settings.telegram_bot_token)
        .post_init(_post_init)         # <-- –≤–∞–∂–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        .post_init(bot.setup_commands) # <-- –≤–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö scope
    )
    app = builder.build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot.install(app)

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –Ω–µ –≤–∏–¥–µ—Ç—å "No error handlers are registered"
    async def _on_error(update, context):
        logger.exception("Unhandled exception: %s", context.error)
    app.add_error_handler(_on_error)

    return app

def main() -> None:
    logger.info("üîí Advisory-lock –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.")
    app = build_application()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (run_polling)...")
    # drop_pending_updates=True ‚Äî –ª–∏—à–Ω–∏–µ –∞–ø–¥–µ–π—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –¢–µ–ª–µ–≥—Ä–∞–º–∞ —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    app.run_polling(
        allowed_updates=["message", "edited_message", "callback_query"],
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
