# bot/main.py
from __future__ import annotations

import logging
import os
import sys

# Advisory-lock –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
try:
    import fcntl  # –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Windows, –Ω–æ Railway –Ω–∞ Linux
except Exception:  # pragma: no cover
    fcntl = None

from telegram.ext import Application

from bot.config import load_settings
from bot.openai_helper import OpenAIHelper
from bot.telegram_bot import ChatGPTTelegramBot
from bot.db.session import init_db
from bot.db.models import Base


LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(levelname)s:%(name)s:%(message)s",
)
logger = logging.getLogger(__name__)


def _acquire_advisory_lock() -> None:
    """
    –ü—Ä–æ—Å—Ç–æ–π advisory-lock –Ω–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ
    –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–∏–Ω–∞—á–µ 409 Conflict –æ—Ç getUpdates).
    """
    if fcntl is None:
        logger.warning("fcntl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é advisory-lock (OK –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)")
        return
    lock_path = "/tmp/tg_openai_bot.lock"
    lock_file = open(lock_path, "w")
    try:
        fcntl.flock(lock_file, fcntl.LOCK_EX | fcntl.LOCK_NB)
        logger.info("üîí Advisory-lock –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.")
    except OSError:
        logger.error("üö´ –£–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (lock %s). –ó–∞–≤–µ—Ä—à–∞—é—Å—å.", lock_path)
        sys.exit(1)


def build_application() -> Application:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ë–î, OpenAI-—Ö–µ–ª–ø–µ—Ä–∞ –∏ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    settings = load_settings()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    init_db(Base)

    # OpenAI helper. –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'default_model' –∏ 'temperature'.
    openai = OpenAIHelper(
        api_key=settings.openai_api_key,
        default_model=getattr(settings, "openai_model", None),
        image_model=getattr(settings, "image_model", None),
        temperature=float(getattr(settings, "openai_temperature", 0.2)),
        enable_image_generation=bool(getattr(settings, "enable_image_generation", True)),
        settings=settings,  # —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ whitelist/denylist –∏ –¥—Ä.
    )

    # Telegram app
    app = Application.builder().token(settings.telegram_bot_token).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ handlers –∏ —Å–µ—Ä–≤–∏—Å—ã
    bot = ChatGPTTelegramBot(openai=openai, settings=settings)
    bot.install(app)

    return app


def main() -> None:
    _acquire_advisory_lock()

    app = build_application()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (run_polling)...")
    # run_polling ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥-–æ–±—ë—Ä—Ç–∫–∞, —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç asyncio-—Ü–∏–∫–ª–æ–º
    app.run_polling(
        allowed_updates=None,  # –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        stop_signals=None,     # –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
        poll_interval=1.0,
        timeout=10,
        drop_pending_updates=False,
    )


if __name__ == "__main__":
    main()
