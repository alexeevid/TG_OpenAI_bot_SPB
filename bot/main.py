# bot/main.py
from __future__ import annotations

import logging
from telegram.ext import Application

from bot.config import load_settings
from bot.telegram_bot import ChatGPTTelegramBot
from bot.openai_helper import OpenAIHelper

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def build_application() -> Application:
    settings = load_settings()

    openai = OpenAIHelper(api_key=settings.openai_api_key)

    bot = ChatGPTTelegramBot(openai=openai, settings=settings)

    async def _post_init(app: Application):
        # 1) –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –≤—ã—á–∏—â–∞–µ–º –≤–∏—Å—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã
        await app.bot.delete_webhook(drop_pending_updates=True)
        me = await app.bot.get_me()
        logger.info("ü§ñ Connected as @%s (id=%s)", me.username, me.id)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –±–æ—Ç–∞)
        try:
            await bot.setup_commands(app)
        except Exception as e:
            logger.exception("setup_commands failed: %s", e)

    builder = (
        Application.builder()
        .token(settings.telegram_bot_token)
        .post_init(_post_init)
    )
    app = builder.build()

    bot.install(app)
    return app


def main() -> None:
    logger.info("üîí Advisory-lock –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.")
    app = build_application()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (run_polling)...")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã
    app.run_polling(
        drop_pending_updates=True,
        allowed_updates=None,  # –≤—Å–µ —Ç–∏–ø—ã
    )


if __name__ == "__main__":
    main()
