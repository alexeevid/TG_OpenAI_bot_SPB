from __future__ import annotations

import asyncio
import logging
import os
from contextlib import asynccontextmanager

from telegram.ext import ApplicationBuilder

from bot.config import load_settings
from bot.db.session import init_db
from bot.openai_helper import OpenAIHelper
from bot.telegram_bot import ChatGPTTelegramBot

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")

LOCK_FILE = "/tmp/tg_bot.lock"

@asynccontextmanager
async def advisory_lock(path: str):
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π advisory-lock –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã, —á—Ç–æ–±—ã –Ω–∞ Railway –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å
    –¥–≤–∞ poller'–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–∏–Ω–∞—á–µ –±—É–¥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã getUpdates 409/Conflict).
    """
    if os.path.exists(path):
        logger.info("üîí Advisory-lock —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.")
        raise SystemExit(0)
    with open(path, "w") as f:
        f.write(str(os.getpid()))
    try:
        yield
    finally:
        try:
            os.remove(path)
        except FileNotFoundError:
            pass

def build_application():
    settings = load_settings()

    # 1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)
    init_db()

    # 2) OpenAI helper
    openai = OpenAIHelper(
        api_key=settings.openai_api_key,
        model=getattr(settings, "openai_model", None),
        image_model=getattr(settings, "image_model", None),
        temperature=getattr(settings, "openai_temperature", 0.2),
        enable_image_generation=bool(getattr(settings, "enable_image_generation", True)),
    )

    # 3) Telegram bot (handlers + –∫–æ–ª–±—ç–∫ post_init)
    bot = ChatGPTTelegramBot(openai=openai, settings=settings)

    # 4) PTB Application + –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è post_init –ß–ï–†–ï–ó BUILDER!
    app = (
        ApplicationBuilder()
        .token(settings.telegram_bot_token)
        .post_init(bot._post_init)  # –í–ê–ñ–ù–û: post_init –∑–∞–¥–∞—ë—Ç—Å—è –Ω–∞ BUILDER, –∞ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —É Application!
        .concurrent_updates(True)
        .build()
    )

    # 5) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
    bot.install(app)

    return app

def main():
    logger.info("üîí Advisory-lock –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.")
    async def _run():
        async with advisory_lock(LOCK_FILE):
            app = build_application()
            logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (run_polling)...")
            await app.run_polling(allowed_updates=["message", "edited_message", "callback_query"])
    asyncio.run(_run())

if __name__ == "__main__":
    main()
