# bot/main.py
from __future__ import annotations

import logging
from telegram.ext import Application

from bot.config import load_settings
from bot.telegram_bot import ChatGPTTelegramBot
from bot.openai_helper import OpenAIHelper

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def build_application() -> Application:
    settings = load_settings()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI-—Ö–µ–ª–ø–µ—Ä (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –≤–∞—à–∏–º –∫–æ–¥–æ–º/–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    openai = OpenAIHelper(
        api_key=settings.openai_api_key,
        model=getattr(settings, "openai_model", None),
        image_model=getattr(settings, "image_model", None),
        temperature=getattr(settings, "openai_temperature", 0.2),
        enable_image_generation=bool(getattr(settings, "enable_image_generation", True)),
    )

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    app = Application.builder().token(settings.telegram_bot_token).build()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö handlers)
    bot = ChatGPTTelegramBot(openai=openai, settings=settings)
    bot.install(app)

    return app


def main() -> None:
    logger.info("üîí Advisory-lock –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.")
    app = build_application()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (run_polling)...")
    # –í–ê–ñ–ù–û: –±–µ–∑ asyncio.run –∏ –±–µ–∑ await!
    app.run_polling(
        allowed_updates=["message", "edited_message", "callback_query"]
    )


if __name__ == "__main__":
    main()
