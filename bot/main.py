# bot/main.py
from __future__ import annotations

import logging
import sys
from typing import Optional

from telegram.ext import Application
from telegram.request import HTTPXRequest
from telegram.error import TimedOut, NetworkError, Conflict

from bot.config import load_settings
from bot.telegram_bot import ChatGPTTelegramBot
from bot.openai_helper import OpenAIHelper

# --- –õ–æ–≥–∏ --------------------------------------------------------------
# –£–º–µ—Ä–∏–º –±–æ–ª—Ç–ª–∏–≤–æ—Å—Ç—å httpx/PTB: –æ—Å—Ç–∞–≤–∏–º WARNING –∏ –æ—à–∏–±–∫–∏.
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s:%(name)s:%(message)s",
    stream=sys.stdout,
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.INFO)
logging.getLogger("telegram.ext").setLevel(logging.INFO)


def _build_request(settings) -> HTTPXRequest:
    """
    –°–æ–∑–¥–∞—ë–º HTTPXRequest —Å —è–≤–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏.
    –≠—Ç–æ —É–º–µ–Ω—å—à–∏—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∞–Ω–∏–π –Ω–∞ shutdown –∏ ReadTimeout –≤ –ª–æ–≥–∞—Ö.
    """
    # –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥ —Å–≤–æ—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    return HTTPXRequest(
        read_timeout=getattr(settings, "tg_read_timeout", 15),     # —á—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        write_timeout=getattr(settings, "tg_write_timeout", 15),   # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        connect_timeout=getattr(settings, "tg_connect_timeout", 10),
        pool_timeout=getattr(settings, "tg_pool_timeout", 10),
    )


async def _on_error(update, context) -> None:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π error handler –¥–ª—è PTB.
    –ù–µ –¥–∞—ë–º –Ω–µ—Ñ–∞—Ç–∞–ª—å–Ω—ã–º —Å–µ—Ç–µ–≤—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º ¬´–∫—Ä–∞—Å–∏—Ç—å¬ª –ª–æ–≥–∏ –∏ —Ä–æ–Ω—è—Ç—å –ø–æ—Ç–æ–∫.
    """
    err = context.error
    if isinstance(err, (TimedOut, NetworkError)):
        logging.getLogger("bot.telegram_bot").warning("Non-fatal network issue: %s", err)
        return
    if isinstance(err, Conflict):
        # –û–±—ã—á–Ω–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞ –≤—Ç–æ—Ä–∞—è –∫–æ–ø–∏—è –±–æ—Ç–∞
        logging.getLogger("bot.telegram_bot").warning(
            "Conflict: another getUpdates is running for this token. Stop other instance."
        )
        return

    # –û—Å—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ error —Å–æ —Å—Ç–µ–∫–æ–º
    logging.getLogger("bot.telegram_bot").exception("Unhandled exception in handler: %s", err)


def build_application() -> Application:
    settings = load_settings()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAIHelper —Å—Ç—Ä–æ–≥–æ —Å —Ç–µ–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
    openai = OpenAIHelper(api_key=settings.openai_api_key)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    request = _build_request(settings)

    # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ post_init –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    bot = ChatGPTTelegramBot(openai=openai, settings=settings)

    builder = (
        Application.builder()
        .token(settings.telegram_bot_token)
        .request(request)
        .post_init(bot.setup_commands)  # –∫–æ–º–∞–Ω–¥—ã/–º–µ–Ω—é –≤—ã—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    )

    app = builder.build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    bot.install(app)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ PTB
    app.add_error_handler(_on_error)

    return app


def main() -> None:
    logger.info("üîí Advisory-lock –ø–æ–ª—É—á–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.")
    app = build_application()

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (run_polling)...")
    try:
        # –í–∞–∂–Ω–æ: run_polling ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤;
        # PTB —Å–∞–º —Å–æ–∑–¥–∞—ë—Ç/–∑–∞–∫—Ä—ã–≤–∞–µ—Ç event loop.
        app.run_polling(
            allowed_updates=["message", "edited_message", "callback_query"],
            # –ù–∞ —Å—Ç–∞—Ä—Ç–µ —É–¥–∞–ª–∏–º ¬´—Ö–≤–æ—Å—Ç—ã¬ª (–µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è)
            drop_pending_updates=True,
            # –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
            poll_interval=1.0,
            # –ê —ç—Ç–∏ —Ç–∞–π–º–∞—É—Ç—ã PTB –ø–µ—Ä–µ–¥–∞—Å—Ç –≤ HTTPXRequest, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤—ã—à–µ;
            # –º—ã —É–∂–µ –∑–∞–¥–∞–ª–∏ –∏—Ö –≤ _build_request, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–Ω–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å:
            # read_timeout=15, write_timeout=15, connect_timeout=10, pool_timeout=10,
        )
    except Conflict:
        # –°–∞–º—ã–π —á–∞—Å—Ç—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
        logger.error(
            "Another instance is polling getUpdates. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–æ–ø–∏—è –±–æ—Ç–∞ (Railway Replicas=1, –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)."
        )
    except TimedOut as e:
        # –°–µ—Ç–µ–≤–æ–π —Ç–∞–π–º–∞—É—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏/—Ä–µ—Å—Ç–∞—Ä—Ç–∞ ‚Äî –Ω–µ —Ñ–∞—Ç–∞–ª–µ–Ω
        logger.warning("Telegram network timeout on shutdown: %s", e)
    except Exception as e:
        logger.exception("Unexpected fatal error: %s", e)


if __name__ == "__main__":
    main()
