# bot/openai_helper.py
from __future__ import annotations

import io
import os
import base64
import logging
from typing import List, Optional, Tuple

from openai import OpenAI

logger = logging.getLogger(__name__)


class OpenAIHelper:
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –∏–Ω–≤–∞–∑–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–º–æ—â–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å OpenAI.

    –¢–æ—á–µ—á–Ω—ã–µ –ø—Ä–∞–≤–∫–∏:
    1) chat(): –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ Responses API (–∏—Å–ø–æ–ª—å–∑—É–µ–º response.output_text),
       –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ out.message (–≤ SDK 1.x —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç).
       –ï—Å—Ç—å —Ñ–æ–ª–±—ç–∫ –Ω–∞ Chat Completions –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    2) generate_image(): –≤—Å–µ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º base64 —á–µ—Ä–µ–∑ response_format="b64_json",
       –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ b64. –ï—Å–ª–∏ primary-–º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º fallback.
    """

    def __init__(self, api_key: str):
        if not api_key:
            raise ValueError("OpenAI API key is required")

        self.client = OpenAI(api_key=api_key)

        # –î–µ—Ñ–æ–ª—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        self.default_chat_model = os.getenv("OPENAI_DEFAULT_MODEL", "gpt-4o-mini")
        self.image_model = os.getenv("OPENAI_IMAGE_MODEL", "gpt-image-1")

    # ===================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =====================

    def _style_to_system_prompt(self, style: str) -> str:
        s = (style or "Pro").lower()
        if s in ("pro", "professional", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"):
            return (
                "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ –¥–µ–ª—É, —è—Å–Ω–æ, "
                "–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —à–∞–≥–∏. –ò–∑–±–µ–≥–∞–π –≤–æ–¥—ã."
            )
        if s in ("expert", "—ç–∫—Å–ø–µ—Ä—Ç"):
            return (
                "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç —Å –≥–ª—É–±–æ–∫–∏–º –¥–æ–º–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º: –æ–±—ä—è—Å–Ω—è–π –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏, "
                "–ø—Ä–∏–≤–æ–¥–∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ —Ä–∏—Å–∫–∞—Ö –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö."
            )
        if s in ("user", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "casual"):
            return (
                "–û–±—â–∞–π—Å—è –ø—Ä–æ—Å—Ç–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏. "
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî —É—Ç–æ—á–Ω—è–π."
            )
        if s in ("ceo", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"):
            return (
                "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: –∫—Ä–∞—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º, —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ä–µ—à–µ–Ω–∏–π. "
                "–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ —Å—Ä–æ–∫–∞—Ö."
            )
        # –¥–µ—Ñ–æ–ª—Ç
        return (
            "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. "
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —É—Ç–æ—á–Ω—è–π –≤–æ–ø—Ä–æ—Å—ã."
        )

    # ===================== –¢–ï–ö–°–¢–û–í–´–ô –î–ò–ê–õ–û–ì =====================

    # –í–ê–ñ–ù–û: –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ü–µ–ª–∏–∫–æ–º –≤–º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ chat() –≤ bot/openai_helper.py

    def chat(self, user_text: str,
             model: Optional[str] = None,
             temperature: float = 0.2,
             style: str = "Pro",
             kb_ctx: Optional[Dict[str, Any]] = None) -> str:
        """
        –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–∏–∞–ª–æ–≥–∞. –ï—Å–ª–∏ –µ—Å—Ç—å kb_ctx, –æ—Ç–≤–µ—á–∞–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ –ë–ó.
        kb_ctx –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∞:
            {
              "text": "<—Å–∫–ª–µ–µ–Ω–Ω—ã–µ –≤—ã–¥–µ—Ä–∂–∫–∏>",
              "sources": ["disk:/...pdf", "disk:/...pdf", ...]   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            }
        """
    
        use_model = model or self.default_model or "gpt-4o"
        temp = max(0.0, min(1.0, temperature))
    
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---
        sys_parts = []
    
        # –ë–∞–∑–æ–≤—ã–π —Ç–æ–Ω (–ø–æ —Å—Ç–∏–ª—é), –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–π
        if style.lower() in ("pro", "professional"):
            sys_parts.append("–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Å–ø–∏—Å–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç.")
        elif style.lower() in ("expert", "—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π"):
            sys_parts.append("–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–∞–∫—Ç–∏–∫. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ, —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.")
        elif style.lower() in ("ceo",):
            sys_parts.append("–û—Ç–≤–µ—á–∞–π —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º, —Ñ–æ–∫—É—Å –Ω–∞ —Ä–µ—à–µ–Ω–∏—è—Ö –∏ —Ä–∏—Å–∫–∞—Ö.")
        else:
            sys_parts.append("–û—Ç–≤–µ—á–∞–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ.")
    
        kb_mode = bool(kb_ctx and isinstance(kb_ctx, dict) and kb_ctx.get("text"))
        if kb_mode:
            # –ñ—ë—Å—Ç–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ë–ó
            sys_parts.append(
                "–ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–∏–∂–µ –≤—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ –ë–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–ë–ó). "
                "–ï—Å–ª–∏ –≤—ã–¥–µ—Ä–∂–µ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø–∏—à–∏: "
                "¬´–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –ë–ó –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞¬ª –∏ –ø–æ—è—Å–Ω–∏, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç."
            )
            sys_parts.append("–ë–ó:\n" + str(kb_ctx.get("text")))
    
            # –î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ñ–∞–Ω—Ç–∞–∑–∏–∏
            temp = min(temp, 0.3)
    
        system_prompt = "\n\n".join(sys_parts).strip()
    
        # --- –°–æ–±–∏—Ä–∞–µ–º messages –¥–ª—è Chat Completions ---
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_text.strip()},
        ]
    
        # --- –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ Responses API (–µ—Å–ª–∏ —É –≤–∞—Å —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è), –∏–Ω–∞—á–µ ‚Äî Chat Completions ---
        # –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à —Ç–µ–∫—É—â–∏–π ¬´fallback¬ª –∫ chat.completions, –Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º messages –≤—ã—à–µ.
        try:
            # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ç–∫–∞ —á–µ—Ä–µ–∑ Responses API ‚Äî –º–æ–∂–µ—Ç–µ –µ—ë –æ—Å—Ç–∞–≤–∏—Ç—å,
            # –≥–ª–∞–≤–Ω–æ–µ: –ø–µ—Ä–µ–¥–∞–π—Ç–µ system+user –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Ç-–∫–æ–º–ø–ª–∏—à–Ω—Å.
            pass
        except Exception:
            pass
    
        # Chat Completions (–Ω–∞–¥—ë–∂–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ)
        try:
            resp = self.client.chat.completions.create(
                model=use_model,
                messages=messages,
                temperature=temp,
            )
            reply = resp.choices[0].message.content if resp and resp.choices else ""
        except Exception as e:
            logger.error("chat.completions failed: %s", e)
            raise
    
        reply = reply or ""
    
        # –•–≤–æ—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω KB_DEBUG
        try:
            import os
            if kb_mode and os.getenv("KB_DEBUG", "0") == "1":
                sources = kb_ctx.get("sources") or []
                sources = [s for s in sources if s]
                if sources:
                    tail = "\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (–ë–ó):\n" + "\n".join(f"‚Ä¢ {s}" for s in sources[:10])
                    reply += tail
        except Exception:
            pass
    
        return reply

    # ===================== –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø =====================

    def generate_image(self, prompt: str, model: Optional[str] = None) -> Tuple[bytes, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (bytes_png, used_prompt).
        –¢–æ—á–µ—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞: –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Å–∏–º base64 (response_format='b64_json') –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º.
        –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –Ω–∞ 'dall-e-3', –µ—Å–ª–∏ primary –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
        """
        primary = model or self.image_model or "gpt-image-1"
        fallbacks = ["dall-e-3"] if primary != "dall-e-3" else []

        last_err: Optional[Exception] = None

        def _call(img_model: str) -> bytes:
            res = self.client.images.generate(
                model=img_model,
                prompt=prompt,
                n=1,
                size="1024x1024",
                response_format="b64_json",  # –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            )
            data = res.data[0]
            b64 = getattr(data, "b64_json", None)
            if not b64:
                raise RuntimeError("Images API did not return base64 image.")
            return base64.b64decode(b64)

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º primary
        try:
            return _call(primary), prompt
        except Exception as e:
            logger.warning("Primary image model '%s' failed: %s", primary, e)
            last_err = e

        # –ó–∞—Ç–µ–º ‚Äî fallback-–∏
        for fb in fallbacks:
            try:
                return _call(fb), prompt
            except Exception as e:
                logger.error("Fallback image model '%s' failed: %s", fb, e)
                last_err = e

        raise RuntimeError(f"Image generation failed: {last_err}")

    # ===================== –†–ï–ß–¨ =====================

    def transcribe_audio(self, audio_bytes: bytes) -> str:
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ (Whisper-1). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç bytes, –Ω–µ –º–µ–Ω—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        """
        try:
            audio_io = io.BytesIO(audio_bytes)
            audio_io.name = "audio.ogg"  # –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            tr = self.client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_io,
            )
            text = getattr(tr, "text", None)
            if not text:
                text = str(tr)
            return text.strip()
        except Exception as e:
            logger.error("transcribe_audio failed: %s", e)
            raise

    # ===================== –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í/–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =====================

    def describe_file(self, file_bytes: bytes, filename: str) -> str:
        """
        –õ—ë–≥–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF/Office,
        —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å–±–æ—Ä–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.
        """
        prompt = (
            "–¢–µ–±–µ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–∞–π–ª. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ: —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, "
            "–æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (–µ—Å–ª–∏ —É–¥–∞—ë—Ç—Å—è –ø–æ–Ω—è—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é), –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è. "
            "–ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–µ –≤–∏–¥–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç), –æ–±—ä—è—Å–Ω–∏, "
            "–∫–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–µ–∑ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∏ —á—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
            f"\n\n–ò–º—è —Ñ–∞–π–ª–∞: {filename}"
        )
        return self.chat(prompt, model=self.default_chat_model, temperature=0.2, style="Pro")

    def describe_image(self, image_bytes: bytes) -> str:
        """
        –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –î–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ Chat Completions —Å vision,
        —á—Ç–æ–±—ã –Ω–µ –ª–µ–∑—Ç—å –≥–ª—É–±–æ–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç Responses + input_image.
        """
        try:
            b64 = base64.b64encode(image_bytes).decode("utf-8")
            cc = self.client.chat.completions.create(
                model=self.default_chat_model,
                messages=[
                    {"role": "system", "content": "–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ. –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ —Ç–æ—á–µ–Ω."},
                            {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{b64}"}},
                        ],
                    },
                ],
                temperature=0.2,
            )
            return (cc.choices[0].message.content or "").strip()
        except Exception as e:
            logger.error("describe_image failed: %s", e)
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é."

    # ===================== –í–ï–ë (–∑–∞–≥–ª—É—à–∫–∞/—Ç–æ–Ω–∫–∞—è –ª–æ–≥–∏–∫–∞) =====================

    def web_answer(self, query: str) -> Tuple[str, List[str]]:
        """
        –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–µ–º:
        –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–∏ –≤—ã–∑–æ–≤—ã.
        –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫ ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ —Ç–µ–ª–æ –Ω–∞ —Å–≤–æ–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä.
        """
        answer = self.chat(
            prompt=(
                "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, "
                "–¥–∞–π –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –∏ —á–µ—Å—Ç–Ω–æ –æ—Ç–º–µ—Ç—å, —á—Ç–æ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.\n\n"
                f"–í–æ–ø—Ä–æ—Å: {query}"
            ),
            model=self.default_chat_model,
            temperature=0.3,
            style="Pro",
        )
        return answer, []

    # ===================== –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π =====================

    def list_models_for_menu(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
        """
        try:
            models = self.client.models.list()
            names = [m.id for m in getattr(models, "data", [])]
            priority = ["o4-mini", "o3-mini", "o1-mini", "o1", "gpt-4o", "gpt-4o-mini", "gpt-4.1-mini"]
            names = sorted(
                names,
                key=lambda n: (0 if n in priority else 1, priority.index(n) if n in priority else 0, n),
            )
            return names
        except Exception as e:
            logger.warning("list_models_for_menu failed: %s", e)
            return ["gpt-4o", "gpt-4o-mini", "o3-mini", "o1-mini", "o1"]
